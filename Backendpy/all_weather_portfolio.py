# -*- coding: utf-8 -*-
"""all_weather_portfolio.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F76LIdUj0l6_YPnAltUdMObaitj96kLA
"""

from bs4 import BeautifulSoup
import requests
import pandas as pd 
import json
def allweather():
  def fmcgtob(stockname,url1,url2):


    stock_name=stockname
    url = url1

    # Make a GET request to fetch the raw HTML content
    html_content = requests.get(url).text

    # Parse HTML code for the entire site
    soup = BeautifulSoup(html_content, "lxml")
    # print(soup)

    mc = soup.find_all("div", attrs={"class": "oview_table"})
    # print("Number of tables on site: ",len(mc))

    data = dict()
    for tb in mc[:4]:
        body = tb.find_all("tr")
        for i in body:
            vals = i.find_all("td")
            title = vals[0].text.strip()
            try:
                value = float(vals[1].text.replace(',',''))
            except ValueError:
                value = vals[1].text.replace(',','')
            data[title] = value
    # print(data)



    excel_data=pd.read_csv(r"C:\Users\mohil\OneDrive\Desktop\STOCKS_new.csv")
    excel_data.drop(columns=['Name (largecap alpha.csv)', 'Ticker (largecap alpha.csv)'],inplace=True)
    # excel_data.head(10)

    avg_price=round((data['Open']+data['Previous Close'])/2,2)
    shareholding=round((data['Mkt Cap (Rs. Cr.)']/avg_price),2)
    shareholding

    parameters_dict = dict()
    def scrape_indicators(urls):
        for url in urls:
            html_content = requests.get(url).text

            # Parse HTML code for the entire site
            soup = BeautifulSoup(html_content, "lxml")
            stonks = soup.find_all("div", attrs={"id": "standalone-new"})

            body = stonks[0].find_all("tr")

            indicator_dict = dict()

            for record in body:
                indicator = record.find_all("td")[0].text.upper()
                temp_indicator_values = []
                try:
                    for table_data in (record.find_all('td')[1:-1]):
                        temp_indicator_values.append(
                            float(table_data.text.replace(',', '')))
                except ValueError:
                    continue
                indicator_dict[indicator] = temp_indicator_values

            parameters_dict.update(indicator_dict)

        yield(url, parameters_dict)


        
    urls=url2


    for request_url, indicator_data in scrape_indicators(urls):
        # print(request_url)
        # print(indicator_data)
        print()
        # print()

    if(data['Mkt Cap (Rs. Cr.)']<20000.00 and data['Mkt Cap (Rs. Cr.)']>5000.00):
      cap="Mid Cap"
    elif (data['Mkt Cap (Rs. Cr.)']>20000.00):
      cap="Large Cap"
    else:
      cap="Small Cap"
    

    pepoints=0



    ##Indicator 1: Reserves & Surplus
    # print(indicator_data['RESERVES AND SURPLUS'])
    rands_list=[]
    count_reserves=0
    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,0,-1):
      if(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i]>0):
        rands_list.append(round(((indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i])/indicator_data['RESERVES AND SURPLUS'][i])*100,2))
        # print(indicator_data['RESERVES AND SURPLUS'][i])
        count_reserves=count_reserves+20
        pepoints+=1
        # print(indicator_data['RESERVES AND SURPLUS'][i-1] , "-" , indicator_data['RESERVES AND SURPLUS'][i],"=", round(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i],2))
      else:
        rands_list.append(round(((indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i])/indicator_data['RESERVES AND SURPLUS'][i])*100,2))
        # print(indicator_data['RESERVES AND SURPLUS'][i])
        count_reserves=count_reserves-20
        pepoints-=1
        # print(indicator_data['RESERVES AND SURPLUS'][i-1],"-",indicator_data['RESERVES AND SURPLUS'][i],"=", round(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i],2))

    rands_list=rands_list[::-1]

    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,-1,-1):
        if(indicator_data['RESERVES AND SURPLUS'][i]<0):
          count_reserves-=20
          pepoints-=1

    # print(count_reserves)
    # print(rands_list)

    ##Indicator 2: Revenue From Operations Gross
    count_revenuefromop=0
    revenue_list=[]
    # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])
    for i in range(len(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])-1,0,-1):
      if(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i]>0):
        revenue_list.append(round(((indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])/indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])*100,2))
        count_revenuefromop=count_revenuefromop+10
        # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1] , "-" , indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],"=", round(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],2))
      else:
        revenue_list.append(round(((indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])/indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])*100,2))
        count_revenuefromop=count_revenuefromop-10
        # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1],"-",indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],"=",round(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],2))

    revenue_list=revenue_list[::-1]

    for i in range(len(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])-1,-1,-1):
        if(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i]<0):
          count_revenuefromop-=15


    # print(count_revenuefromop)
    # print(revenue_list)





    ##Indicator 3: Profit/Loss for the period
    count_profitloss=0
    profit_list=[]
    # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'])
    for i in range(len(indicator_data['PROFIT/LOSS FOR THE PERIOD'])-1,0,-1):
      if(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i]>0):
        profit_list.append(round(((indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])/indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])*100,2))
        count_profitloss=count_profitloss+10
        # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1] , "-" , indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],"=", round(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],2))
      else:
        profit_list.append(round(((indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])/indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])*100,2))
        count_profitloss=count_profitloss-10
        # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1],"-",indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],"=",round(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],2))

    profit_list=profit_list[::-1]

    for i in range(len(indicator_data['PROFIT/LOSS FOR THE PERIOD'])-1,-1,-1):
        if(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i]<0):
          count_profitloss-=15

    # print(count_profitloss)
    # print(profit_list)

    # print(pepoints)

    ##Indicator 4: ROCE

    count_roce=0
    # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])
    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,0,-1):
      if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]>-1):
        count_roce+=10
        # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1] , "-" , indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],"=", round(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],2))
      else:
        count_roce-=10
        # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1],"-",indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],"=",round(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],2))

    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,-1,-1):
        if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]<10):
          count_roce-=15
          pepoints-=1
        else:
          if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]>10):
            count_roce+=15
            pepoints+=1


    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,-1,-1):
        if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]<0):
          count_roce-=25

    roce_ind=indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][0]


    # print(count_roce)

    # print(pepoints)

    ##Indicator 5: Inventory Turnover Ratio
    count_ito=0
    # print(indicator_data['INVENTORY TURNOVER RATIO (X)'])
    for i in range(len(indicator_data['INVENTORY TURNOVER RATIO (X)'])-1,0,-1):
      if(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i]>0):
        count_ito+=20
        pepoints+=1
        # print(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1] , "-" , indicator_data['INVENTORY TURNOVER RATIO (X)'][i],"=", round(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i],2))
      else:
        count_ito-=10
        pepoints-=1
        # print(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1],"-",indicator_data['INVENTORY TURNOVER RATIO (X)'][i],"=",round(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i],2))
    # print(count_ito)

    # pepoints

    ##Indicator 6: Reserves & Surplus/Equity Share Capital
    # print(indicator_data['RESERVES AND SURPLUS'])
    # print(indicator_data['TOTAL SHARE CAPITAL'])
    rsesc_list=[]
    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,-1,-1):
            # print(indicator_data['RESERVES AND SURPLUS'][i])
            # print(indicator_data['RESERVES AND SURPLUS'][i] , "/" , indicator_data['TOTAL SHARE CAPITAL'][i],"=", round((indicator_data['RESERVES AND SURPLUS'][i]/indicator_data['TOTAL SHARE CAPITAL'][i]),2))
            rsesc_list.append(round(indicator_data['RESERVES AND SURPLUS'][i]/indicator_data['TOTAL SHARE CAPITAL'][i],2))

    
    rsesc_list=rsesc_list[::-1]
    # print(rsesc_list)
    
    count_rec=0
    for i in range(len(rsesc_list)-1,0,-1):
      if(rsesc_list[i-1]-rsesc_list[i]>0):
        count_rec+=20
        pepoints+=1
        # print(rsesc_list[i-1] , "-" , rsesc_list[i],"=", round(rsesc_list[i-1]-rsesc_list[i],2))
      else:
        count_rec-=10
        pepoints-=1
        # print(rsesc_list[i-1],"-",rsesc_list[i],"=",round(rsesc_list[i-1]-rsesc_list[i],2))


    for i in range(len(rsesc_list)-1,-1,-1):
        if(rsesc_list[i]<10):
          count_rec-=15

    for i in range(len(rsesc_list)-1,-1,-1):
        if(rsesc_list[i]<0):
          count_rec-=20


    # print(rsesc_list)
    # print(count_rec)



    # pepoints





    ## Indicator 7: Trade Receivables in Current Assets
    # print(indicator_data['TOTAL CURRENT ASSETS'])
    # print(indicator_data['TRADE RECEIVABLES'])

    trade_list=[]
    bonus=0
    for i in range(len(indicator_data['TOTAL CURRENT ASSETS'])-1,-1,-1):
              # print(indicator_data['TOTAL CURRENT ASSETS'][i] , "/" , indicator_data['TRADE RECEIVABLES'][i],"=", round((indicator_data['TOTAL CURRENT ASSETS'][i]/indicator_data['TRADE RECEIVABLES'][i]),2))
              if(round((indicator_data['TOTAL CURRENT ASSETS'][i]/indicator_data['TRADE RECEIVABLES'][i]),2)<50.00):
                bonus+=10
              else:
                bonus-=5
    # print(bonus)

    # print(pepoints)

    ## Indicator 8: Earnings Before Interest Tax

    indicator_data['PBIT MARGIN (%)']
    count_ebit=0
    # print(indicator_data['PBIT MARGIN (%)'])
    for i in range(len(indicator_data['PBIT MARGIN (%)'])-1,0,-1):
      if(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i]>0):
        count_ebit+=10
        pepoints+=1
        # print(indicator_data['PBIT MARGIN (%)'][i-1] , "-" , indicator_data['PBIT MARGIN (%)'][i],"=", round(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i],2))
      else:
        count_ebit-=5
        pepoints+=1
        # print(indicator_data['PBIT MARGIN (%)'][i-1],"-",indicator_data['PBIT MARGIN (%)'][i],"=",round(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i],2))

    for i in range(len(indicator_data['PBIT MARGIN (%)'])-1,-1,-1):
        if(indicator_data['PBIT MARGIN (%)'][i]<0):
          count_ebit-=20


    # print(count_ebit)

    # print(pepoints)

    ## Indicator 9: Debt To Equity Ratio

    count_debt=0
    # print(indicator_data["TOTAL DEBT/EQUITY (X)"])

    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,0,-1):
      if(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i]>0):
        count_debt+=10
        # print(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1] , "-" , indicator_data['TOTAL DEBT/EQUITY (X)'][i],"=", round(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i],2))
      elif (indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i]==0):
            count_debt+=10
      else:
        count_debt-=5
        # print(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1],"-",indicator_data['TOTAL DEBT/EQUITY (X)'][i],"=",round(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i],2))
      
    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,-1,-1):
        if(indicator_data['TOTAL DEBT/EQUITY (X)'][i]>2):
          count_debt-=15
          pepoints-=1
        else:
          count_debt+=15
          pepoints+=1

    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,-1,-1):
        if(indicator_data['TOTAL DEBT/EQUITY (X)'][i]<0):
          count_debt-=20


    # print(count_debt)

    # pepoints

    ## Indicator 10: Current Ratio
    indicator_data['CURRENT RATIO (X)']

    count_currentratio=0
    # print(indicator_data["CURRENT RATIO (X)"])

    for i in range(len(indicator_data['CURRENT RATIO (X)'])-1,0,-1):
      if(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i]>0):
        count_currentratio+=10
        # print(indicator_data['CURRENT RATIO (X)'][i-1] , "-" , indicator_data['CURRENT RATIO (X)'][i],"=", round(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i],2))
      elif ((indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i])==0):
            count_currentratio+=10
      else:
        count_currentratio-=5
        # print(indicator_data['CURRENT RATIO (X)'][i-1],"-",indicator_data['CURRENT RATIO (X)'][i],"=",round(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i],2))

    for i in range(len(indicator_data['CURRENT RATIO (X)'])-1,-1,-1):
        if(indicator_data['CURRENT RATIO (X)'][i]<2):
          # print(indicator_data['CURRENT RATIO (X)'][i])
          count_currentratio-=10
          pepoints=pepoints-0.5
        elif (indicator_data['CURRENT RATIO (X)'][i]<1):
          count_currentratio-=20
          pepoints=pepoints-1
        else:
          count_currentratio+=10
          pepoints+=1


    # print(count_currentratio)

    # pepoints

    ##Indicator 11: Net Cashflow From Operating Activities
    count_netcashflow=0
    cashflow_list=[]
    # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])
    for i in range(len(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])-1,0,-1):
      if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]==0):
        indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]=indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]
      if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]>0):
        cashflow_list.append(round(((indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])/indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])*100,2))
        count_netcashflow=count_netcashflow+10
        pepoints+=1
        # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1] , "-" , indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],"=", round(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],2))
      else:
        cashflow_list.append(round(((indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])/indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])*100,2))
        count_netcashflow=count_netcashflow-10
        pepoints-=1
        # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1],"-",indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],"=",round(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],2))

    cashflow_list=cashflow_list[::-1]

    for i in range(len(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])-1,-1,-1):
        if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]<0):
          count_netcashflow-=15

    # print(count_netcashflow)
    # print(cashflow_list)

    ##Indicator 12: Free cash Flow
    stock_position=None
    stock_data=excel_data.values.tolist()
    stock_data
    for i in stock_data:
      for j in i:
        j=str(j)
        if(stock_name in j):
          # print(j.index(i))
          stock_position=stock_data.index(i)
          # print(j)
          break
          
    # print(stock_position)

    freecash_list=[]
    for i in range(5):
      freecash_list.append(stock_data[stock_position][i])
    # print(freecash_list)

    count_freecash=0
    for i in range(1,len(freecash_list)):
      if(freecash_list[i]-freecash_list[i-1]>0):
        # print(freecash_list[i],"-",freecash_list[i-1],"=",freecash_list[i]-freecash_list[i-1])
        count_freecash+=20
        pepoints+=1
      else:
        # print(freecash_list[i],"-",freecash_list[i-1],"=",freecash_list[i]-freecash_list[i-1])
        count_freecash-=10
        pepoints-=1

    for i in range(0,len(freecash_list)):
      if(freecash_list[i]<0):
        count_freecash-=20
        pepoints-=1

    # print(count_freecash)

    ##Indicator 13: Pledged shares
    for i in stock_data:
      for j in i:
        j=str(j)
        if(stock_name in j):
          # print(j.index(i))
          stock_position=stock_data.index(i)
          # print(j)
          break

    pledged_shares=stock_data[stock_position][15]
    # print(pledged_shares)
    stock_name=stock_data[stock_position][5]
    count_pshares=1
    if(pledged_shares>0):
      pepoints-=1
      count_pshares=count_pshares*-10
    else:
      pepoints+=1
      count_pshares=count_pshares*10


    ##Entities: Alpha & Beta
    alpha=round(stock_data[stock_position][9],2)
    # print("Alpha",alpha)
    beta=round(stock_data[stock_position][10],2)
    # print("Beta",beta)
    divy=data['Dividend Yield']
    # print("Dividend Yield",divy)

    cagr=stock_data[stock_position][8]
    # print("CAGR:", cagr)

    # pepoints

    ##Indicator 14: PE Ratio
    st_pe=data['TTM PE']
    se_pe=data['Sector PE']
    # print("Stock PE", st_pe)
    # print("Sector PE",se_pe)
    count_pe=1
    if(data['TTM PE']=="--"):
        count_pe=pepoints*12
    elif(data['TTM PE']<data['Sector PE']):
      count_pe=pepoints*15
    else:
      count_pe=pepoints*10

    # print(count_pe)



    #Predicting Target Price 
    flag=0
    target_price=None
    entry_price=None
    # int(indicator_data['ENTERPRISE VALUE (CR.)'])
    # print(indicator_data['EV/EBITDA (X)'])
    

    ebitda_list=[]
    for i in range(len(indicator_data['ENTERPRISE VALUE (CR.)'])-1,-1,-1):
            if(indicator_data['ENTERPRISE VALUE (CR.)'][i]==0):

              flag=1
              break

            # print(indicator_data['ENTERPRISE VALUE (CR.)'][i] , "/" , indicator_data['EV/EBITDA (X)'][i],"=", round((indicator_data['ENTERPRISE VALUE (CR.)'][i]/indicator_data['EV/EBITDA (X)'][i]),2))
            ebitda_list.append(round(indicator_data['ENTERPRISE VALUE (CR.)'][i]/indicator_data['EV/EBITDA (X)'][i],2))
    if(flag==0):

      
      ebitda_list=ebitda_list[::-1]

      # print(ebitda_list)
      growth_ebitda=[]
      for i in range(len(ebitda_list)-1,0,-1):
        # print(ebitda_list[i-1],"-",ebitda_list[i],"=",round(ebitda_list[i-1]-ebitda_list[i],2), "   ",round((ebitda_list[i-1]-ebitda_list[i])/ebitda_list[i]*100,2))
        growth_ebitda.append(round((ebitda_list[i-1]-ebitda_list[i])/ebitda_list[i]*100,2))

  
      growth_ebitda=growth_ebitda[::-1]

      # print(growth_ebitda)
      
      grow=0
      for i in range(len(growth_ebitda)-1):
        grow=grow+growth_ebitda[i]

      growth=round(grow/3,2)
      # print("Growth for last three years:", growth)
      # print(ebitda_list[0])
      pred_ebitda=round(((100+growth)*ebitda_list[0])/100,2)

      # print("Predicted Ebitda:",pred_ebitda)


      forecasted_ev= round(pred_ebitda*indicator_data['EV/EBITDA (X)'][0],2)

      forecasted_ev=forecasted_ev-indicator_data['LONG TERM BORROWINGS'][0]
      forecasted_ev

      # print("Forecasted EV:",forecasted_ev)
  
      target_price=round(forecasted_ev/shareholding,2)
      # print("Target Price:", target_price)

      entry_price=round(target_price*0.75,2)
      # print("Good Buy Price:",entry_price)

    points=bonus+count_currentratio+count_debt+count_ebit+count_ito+count_profitloss+count_rec+count_reserves+count_revenuefromop+count_roce+count_netcashflow+count_pe+count_freecash+count_pshares
    final_list=[]
    per_paint="6%"
    industry="Paints"


    final_list.append(stock_name)
    final_list.append(points)
    final_list.append(cap)
    final_list.append(roce_ind)
    final_list.append(per_paint)
    final_list.append(industry)


    
    return final_list

  table=[]
  url_list=[]
        
  url_list=[[["ASIANPAINT"],['https://www.moneycontrol.com/india/stockpricequote/paintsvarnishes/asianpaints/AP31'],['https://www.moneycontrol.com/financials/asianpaints/ratiosVI/AP31#AP31','https://www.moneycontrol.com/financials/asianpaints/cash-flowVI/AP31#AP31','https://www.moneycontrol.com/financials/asianpaints/profit-lossVI/AP31#AP31','https://www.moneycontrol.com/financials/asianpaints/balance-sheetVI/AP31#AP31']],
  [["BERGEPAINT"],['https://www.moneycontrol.com/india/stockpricequote/paintsvarnishes/bergerpaintsindia/BPI02'],['https://www.moneycontrol.com/financials/bergerpaintsindia/ratiosVI/BPI02#BPI02','https://www.moneycontrol.com/financials/bergerpaintsindia/cash-flowVI/BPI02','https://www.moneycontrol.com/financials/bergerpaintsindia/profit-lossVI/BPI02#BPI02','https://www.moneycontrol.com/financials/bergerpaintsindia/balance-sheetVI/BPI02']],
  [["KANSAINER"],['https://www.moneycontrol.com/india/stockpricequote/paintsvarnishes/kansainerolacpaints/KNP'],['https://www.moneycontrol.com/financials/kansainerolacpaints/ratiosVI/KNP#KNP','https://www.moneycontrol.com/financials/kansainerolacpaints/cash-flowVI/KNP#KNP','https://www.moneycontrol.com/financials/kansainerolacpaints/profit-lossVI/KNP#KNP','https://www.moneycontrol.com/financials/kansainerolacpaints/balance-sheetVI/KNP']],
  [["INDIGOPNTS"],['https://www.moneycontrol.com/india/stockpricequote/paints/indigopaints/IP08'],['https://www.moneycontrol.com/financials/indigopaints/ratiosVI/IP08#IP08','https://www.moneycontrol.com/financials/indigopaints/cash-flowVI/IP08#IP08','https://www.moneycontrol.com/financials/indigopaints/profit-lossVI/IP08#IP08','https://www.moneycontrol.com/financials/indigopaints/balance-sheetVI/IP08#IP08']],
  [["SIRCA"],['https://www.moneycontrol.com/india/stockpricequote/paintsvarnishes/sircapaintsindialtd/SPI06'],['https://www.moneycontrol.com/financials/sircapaintsindialtd/ratiosVI/SPI06#SPI06','https://www.moneycontrol.com/financials/sircapaintsindialtd/cash-flowVI/SPI06#SPI06','https://www.moneycontrol.com/financials/sircapaintsindialtd/profit-lossVI/SPI06#SPI06','https://www.moneycontrol.com/financials/sircapaintsindialtd/balance-sheetVI/SPI06#SPI06']]]


  for i in range(len(url_list)):
    list_input=[]
    for j in url_list[i]:
      list_input.append(j)
    stockname=list_input[0][0]
    url1=list_input[1][0]
    url2=list_input[2]
    # print(stockname,url1,url2)
    final_list=fmcgtob(stockname,url1,url2)
    table.append(final_list)
  df=pd.DataFrame(table,columns=['stock_name','points','cap','roce_ind','per_paint','industry'])
  df.sort_values(by='points', ascending=False,inplace=True)
  stock=[]
  portfolio=[]
  
  df_final=df[['stock_name','cap','roce_ind','per_paint','industry']]

  data=df[['points']]
  dt=data.values.tolist()
  max=dt[0][0]
  c=0
  for i in range(len(dt)):
    for j in dt[i]:
      # print(j)
      if(j>max-100):
        c=c+1
  stock=df_final[:1].values.tolist()

  portfolio.append(stock)

  def automobile(stockname,url1,url2):


    stock_name=stockname
    url = url1

    # Make a GET request to fetch the raw HTML content
    html_content = requests.get(url).text

    # Parse HTML code for the entire site
    soup = BeautifulSoup(html_content, "lxml")
    # print(soup)

    mc = soup.find_all("div", attrs={"class": "oview_table"})
    # print("Number of tables on site: ",len(mc))

    data = dict()
    for tb in mc[:4]:
        body = tb.find_all("tr")
        for i in body:
            vals = i.find_all("td")
            title = vals[0].text.strip()
            try:
                value = float(vals[1].text.replace(',',''))
            except ValueError:
                value = vals[1].text.replace(',','')
            data[title] = value
    # print(data)



    excel_data=pd.read_csv(r"C:\Users\mohil\OneDrive\Desktop\STOCKS_new.csv")
    excel_data.drop(columns=['Name (largecap alpha.csv)', 'Ticker (largecap alpha.csv)'],inplace=True)
    # excel_data.head(10)

    avg_price=round((data['Open']+data['Previous Close'])/2,2)
    shareholding=round((data['Mkt Cap (Rs. Cr.)']/avg_price),2)
    shareholding

    parameters_dict = dict()
    def scrape_indicators(urls):
        for url in urls:
            html_content = requests.get(url).text

            # Parse HTML code for the entire site
            soup = BeautifulSoup(html_content, "lxml")
            stonks = soup.find_all("div", attrs={"id": "standalone-new"})

            body = stonks[0].find_all("tr")

            indicator_dict = dict()

            for record in body:
                indicator = record.find_all("td")[0].text.upper()
                temp_indicator_values = []
                try:
                    for table_data in (record.find_all('td')[1:-1]):
                        temp_indicator_values.append(
                            float(table_data.text.replace(',', '')))
                except ValueError:
                    continue
                indicator_dict[indicator] = temp_indicator_values

            parameters_dict.update(indicator_dict)

        yield(url, parameters_dict)


        
    urls=url2


    for request_url, indicator_data in scrape_indicators(urls):
        # print(request_url)
        # print(indicator_data)
        print()
        # print()

    pepoints=0


    if(data['Mkt Cap (Rs. Cr.)']<20000.00 and data['Mkt Cap (Rs. Cr.)']>5000.00):
      cap="Mid Cap"
    elif (data['Mkt Cap (Rs. Cr.)']>20000.00):
      cap="Large Cap"
    else:
      cap="Small Cap"
    
    ##Indicator 1: Reserves & Surplus
    # print(indicator_data['RESERVES AND SURPLUS'])
    rands_list=[]
    count_reserves=0
    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,0,-1):
      if(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i]>0):
        rands_list.append(round(((indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i])/indicator_data['RESERVES AND SURPLUS'][i])*100,2))
        # print(indicator_data['RESERVES AND SURPLUS'][i])
        count_reserves=count_reserves+20
        pepoints+=1
        # print(indicator_data['RESERVES AND SURPLUS'][i-1] , "-" , indicator_data['RESERVES AND SURPLUS'][i],"=", round(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i],2))
      else:
        rands_list.append(round(((indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i])/indicator_data['RESERVES AND SURPLUS'][i])*100,2))
        # print(indicator_data['RESERVES AND SURPLUS'][i])
        count_reserves=count_reserves-20
        pepoints-=1
        # print(indicator_data['RESERVES AND SURPLUS'][i-1],"-",indicator_data['RESERVES AND SURPLUS'][i],"=", round(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i],2))

    rands_list=rands_list[::-1]

    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,-1,-1):
        if(indicator_data['RESERVES AND SURPLUS'][i]<0):
          count_reserves-=20
          pepoints-=1

    # print(count_reserves)
    # print(rands_list)

    ##Indicator 2: Revenue From Operations Gross
    count_revenuefromop=0
    revenue_list=[]
    # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])
    for i in range(len(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])-1,0,-1):
      if(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i]>0):
        revenue_list.append(round(((indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])/indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])*100,2))
        count_revenuefromop=count_revenuefromop+10
        # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1] , "-" , indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],"=", round(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],2))
      else:
        revenue_list.append(round(((indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])/indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])*100,2))
        count_revenuefromop=count_revenuefromop-10
        # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1],"-",indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],"=",round(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],2))

    revenue_list=revenue_list[::-1]

    for i in range(len(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])-1,-1,-1):
        if(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i]<0):
          count_revenuefromop-=15


    # print(count_revenuefromop)
    # print(revenue_list)





    ##Indicator 3: Profit/Loss for the period
    count_profitloss=0
    profit_list=[]
    # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'])
    for i in range(len(indicator_data['PROFIT/LOSS FOR THE PERIOD'])-1,0,-1):
      if(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i]>0):
        profit_list.append(round(((indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])/indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])*100,2))
        count_profitloss=count_profitloss+10
        # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1] , "-" , indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],"=", round(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],2))
      else:
        profit_list.append(round(((indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])/indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])*100,2))
        count_profitloss=count_profitloss-10
        # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1],"-",indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],"=",round(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],2))

    profit_list=profit_list[::-1]

    for i in range(len(indicator_data['PROFIT/LOSS FOR THE PERIOD'])-1,-1,-1):
        if(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i]<0):
          count_profitloss-=15

    # print(count_profitloss)
    # print(profit_list)

    # print(pepoints)

    ##Indicator 4: ROCE

    count_roce=0
    # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])
    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,0,-1):
      if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]>-1):
        count_roce+=10
        # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1] , "-" , indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],"=", round(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],2))
      else:
        count_roce-=10
        # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1],"-",indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],"=",round(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],2))

    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,-1,-1):
        if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]<10):
          count_roce-=15
          pepoints-=1
        else:
          if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]>10):
            count_roce+=15
            pepoints+=1


    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,-1,-1):
        if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]<0):
          count_roce-=25

    roce_ind=indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][0]

    # print(count_roce)

    # print(pepoints)

    ##Indicator 5: Inventory Turnover Ratio
    count_ito=0
    # print(indicator_data['INVENTORY TURNOVER RATIO (X)'])
    for i in range(len(indicator_data['INVENTORY TURNOVER RATIO (X)'])-1,0,-1):
      if(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i]>0):
        count_ito+=20
        pepoints+=1
        # print(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1] , "-" , indicator_data['INVENTORY TURNOVER RATIO (X)'][i],"=", round(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i],2))
      else:
        count_ito-=10
        pepoints-=1
        # print(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1],"-",indicator_data['INVENTORY TURNOVER RATIO (X)'][i],"=",round(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i],2))
    # print(count_ito)

    # pepoints

    ##Indicator 6: Reserves & Surplus/Equity Share Capital
    # print(indicator_data['RESERVES AND SURPLUS'])
    # print(indicator_data['TOTAL SHARE CAPITAL'])
    # print()
    rsesc_list=[]
    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,-1,-1):
            # print(indicator_data['RESERVES AND SURPLUS'][i])
            # print(indicator_data['RESERVES AND SURPLUS'][i] , "/" , indicator_data['TOTAL SHARE CAPITAL'][i],"=", round((indicator_data['RESERVES AND SURPLUS'][i]/indicator_data['TOTAL SHARE CAPITAL'][i]),2))
            rsesc_list.append(round(indicator_data['RESERVES AND SURPLUS'][i]/indicator_data['TOTAL SHARE CAPITAL'][i],2))

    # print()
    rsesc_list=rsesc_list[::-1]
    # print(rsesc_list)
    # print()
    count_rec=0
    for i in range(len(rsesc_list)-1,0,-1):
      if(rsesc_list[i-1]-rsesc_list[i]>0):
        count_rec+=20
        pepoints+=1
        # print(rsesc_list[i-1] , "-" , rsesc_list[i],"=", round(rsesc_list[i-1]-rsesc_list[i],2))
      else:
        count_rec-=10
        pepoints-=1
        # print(rsesc_list[i-1],"-",rsesc_list[i],"=",round(rsesc_list[i-1]-rsesc_list[i],2))


    for i in range(len(rsesc_list)-1,-1,-1):
        if(rsesc_list[i]<10):
          count_rec-=15

    for i in range(len(rsesc_list)-1,-1,-1):
        if(rsesc_list[i]<0):
          count_rec-=20


    # print(rsesc_list)
    # print(count_rec)



    # pepoints





    ## Indicator 7: Trade Receivables in Current Assets
    # print(indicator_data['TOTAL CURRENT ASSETS'])
    # print(indicator_data['TRADE RECEIVABLES'])

    trade_list=[]
    bonus=0
    for i in range(len(indicator_data['TOTAL CURRENT ASSETS'])-1,-1,-1):
              # print(indicator_data['TOTAL CURRENT ASSETS'][i] , "/" , indicator_data['TRADE RECEIVABLES'][i],"=", round((indicator_data['TOTAL CURRENT ASSETS'][i]/indicator_data['TRADE RECEIVABLES'][i]),2))
              if(round((indicator_data['TOTAL CURRENT ASSETS'][i]/indicator_data['TRADE RECEIVABLES'][i]),2)<50.00):
                bonus+=10
              else:
                bonus-=5
    # print(bonus)

    # print(pepoints)

    ## Indicator 8: Earnings Before Interest Tax

    indicator_data['PBIT MARGIN (%)']
    count_ebit=0
    # print(indicator_data['PBIT MARGIN (%)'])
    for i in range(len(indicator_data['PBIT MARGIN (%)'])-1,0,-1):
      if(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i]>0):
        count_ebit+=10
        pepoints+=1
        # print(indicator_data['PBIT MARGIN (%)'][i-1] , "-" , indicator_data['PBIT MARGIN (%)'][i],"=", round(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i],2))
      else:
        count_ebit-=5
        pepoints+=1
        # print(indicator_data['PBIT MARGIN (%)'][i-1],"-",indicator_data['PBIT MARGIN (%)'][i],"=",round(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i],2))

    for i in range(len(indicator_data['PBIT MARGIN (%)'])-1,-1,-1):
        if(indicator_data['PBIT MARGIN (%)'][i]<0):
          count_ebit-=20


    # print(count_ebit)

    # print(pepoints)

    ## Indicator 9: Debt To Equity Ratio

    count_debt=0
    # print(indicator_data["TOTAL DEBT/EQUITY (X)"])

    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,0,-1):
      if(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i]>0):
        count_debt+=10
        # print(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1] , "-" , indicator_data['TOTAL DEBT/EQUITY (X)'][i],"=", round(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i],2))
      elif (indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i]==0):
            count_debt+=10
      else:
        count_debt-=5
        # print(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1],"-",indicator_data['TOTAL DEBT/EQUITY (X)'][i],"=",round(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i],2))
      
    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,-1,-1):
        if(indicator_data['TOTAL DEBT/EQUITY (X)'][i]>2):
          count_debt-=15
          pepoints-=1
        else:
          count_debt+=15
          pepoints+=1

    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,-1,-1):
        if(indicator_data['TOTAL DEBT/EQUITY (X)'][i]<0):
          count_debt-=20


    # print(count_debt)

    # pepoints

    ## Indicator 10: Current Ratio
    indicator_data['CURRENT RATIO (X)']

    count_currentratio=0
    # print(indicator_data["CURRENT RATIO (X)"])

    for i in range(len(indicator_data['CURRENT RATIO (X)'])-1,0,-1):
      if(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i]>0):
        count_currentratio+=10
        # print(indicator_data['CURRENT RATIO (X)'][i-1] , "-" , indicator_data['CURRENT RATIO (X)'][i],"=", round(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i],2))
      elif ((indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i])==0):
            count_currentratio+=10
      else:
        count_currentratio-=5
        # print(indicator_data['CURRENT RATIO (X)'][i-1],"-",indicator_data['CURRENT RATIO (X)'][i],"=",round(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i],2))

    for i in range(len(indicator_data['CURRENT RATIO (X)'])-1,-1,-1):
        if(indicator_data['CURRENT RATIO (X)'][i]<2):
          # print(indicator_data['CURRENT RATIO (X)'][i])
          count_currentratio-=10
          pepoints=pepoints-0.5
        elif (indicator_data['CURRENT RATIO (X)'][i]<1):
          count_currentratio-=20
          pepoints=pepoints-1
        else:
          count_currentratio+=10
          pepoints+=1


    # print(count_currentratio)

    # pepoints

    ##Indicator 11: Net Cashflow From Operating Activities
    count_netcashflow=0
    cashflow_list=[]
    # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])
    
    if(stock_name=="BAJAJ-AUTO"):
      for i in range(len(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])-3,0,-1):
        if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]==0):
          indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]=indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]
        if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]>0):
          cashflow_list.append(round(((indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])/indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])*100,2))
          count_netcashflow=count_netcashflow+10
          pepoints+=1
          # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1] , "-" , indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],"=", round(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],2))
        else:
          cashflow_list.append(round(((indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])/indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])*100,2))
          count_netcashflow=count_netcashflow-10
          pepoints-=1
          # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1],"-",indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],"=",round(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],2))

      cashflow_list=cashflow_list[::-1]

      for i in range(len(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])-1,-1,-1):
          if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]<0):
            count_netcashflow-=15

    else:
    
    
    
      for i in range(len(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])-1,0,-1):
        if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]==0):
          indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]=indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]
        if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]>0):
          cashflow_list.append(round(((indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])/indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])*100,2))
          count_netcashflow=count_netcashflow+10
          pepoints+=1
          # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1] , "-" , indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],"=", round(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],2))
        else:
          cashflow_list.append(round(((indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])/indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])*100,2))
          count_netcashflow=count_netcashflow-10
          pepoints-=1
          # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1],"-",indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],"=",round(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],2))

      cashflow_list=cashflow_list[::-1]

      for i in range(len(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])-1,-1,-1):
          if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]<0):
            count_netcashflow-=15

    # print(count_netcashflow)
    # print(cashflow_list)

    ##Indicator 12: Free cash Flow
    stock_position=None
    stock_data=excel_data.values.tolist()
    stock_data
    for i in stock_data:
      for j in i:
        j=str(j)
        if(stock_name in j):
          # print(j.index(i))
          stock_position=stock_data.index(i)
          # print(j)
          break
          
    # print(stock_position)

    freecash_list=[]
    for i in range(5):
      freecash_list.append(stock_data[stock_position][i])
    # print(freecash_list)

    count_freecash=0
    for i in range(1,len(freecash_list)):
      if(freecash_list[i]-freecash_list[i-1]>0):
        # print(freecash_list[i],"-",freecash_list[i-1],"=",freecash_list[i]-freecash_list[i-1])
        count_freecash+=20
        pepoints+=1
      else:
        # print(freecash_list[i],"-",freecash_list[i-1],"=",freecash_list[i]-freecash_list[i-1])
        count_freecash-=10
        pepoints-=1

    for i in range(0,len(freecash_list)):
      if(freecash_list[i]<0):
        count_freecash-=20
        pepoints-=1

    # print(count_freecash)

    ##Indicator 15: Net sales from operations

    count_revenuefromopqt=0
    revenueqt_list=[]
    # print(indicator_data['NET SALES/INCOME FROM OPERATIONS'])
    for i in range(len(indicator_data['NET SALES/INCOME FROM OPERATIONS'])-1,0,-1):
      if(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1]-indicator_data['NET SALES/INCOME FROM OPERATIONS'][i]>0):
        revenueqt_list.append(round(((indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1]-indicator_data['NET SALES/INCOME FROM OPERATIONS'][i])/indicator_data['NET SALES/INCOME FROM OPERATIONS'][i])*100,2))
        count_revenuefromopqt=count_revenuefromopqt+15
        pepoints=pepoints+1
        # print(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1] , "-" , indicator_data['NET SALES/INCOME FROM OPERATIONS'][i],"=", round(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1]-indicator_data['NET SALES/INCOME FROM OPERATIONS'][i],2))
      else:
        revenueqt_list.append(round(((indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1]-indicator_data['NET SALES/INCOME FROM OPERATIONS'][i])/indicator_data['NET SALES/INCOME FROM OPERATIONS'][i])*100,2))
        count_revenuefromopqt=count_revenuefromopqt-15
        pepoints=pepoints-1
        # print(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1],"-",indicator_data['NET SALES/INCOME FROM OPERATIONS'][i],"=",round(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1]-indicator_data['NET SALES/INCOME FROM OPERATIONS'][i],2))

    revenueqt_list=revenueqt_list[::-1]

    for i in range(len(indicator_data['NET SALES/INCOME FROM OPERATIONS'])-1,-1,-1):
        if(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i]<0):
          count_revenuefromopqt-=15
          pepoints=pepoints-1

      ##Indicator 16: Net profit/loss
    count_profitqt=0
    profitqt_list=[]
    # print(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'])
    for i in range(len(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'])-1,0,-1):
      if(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1]-indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i]>0):
        profitqt_list.append(round(((indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1]-indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i])/indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i])*100,2))
        count_profitqt=count_profitqt+10
        pepoints=pepoints+1
        # print(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1] , "-" , indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i],"=", round(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1]-indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i],2))
      else:
        profitqt_list.append(round(((indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1]-indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i])/indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i])*100,2))
        count_profitqt=count_profitqt-10
        pepoints=pepoints-1
        # print(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1],"-",indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i],"=",round(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1]-indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i],2))

    profitqt_list=profitqt_list[::-1]

    for i in range(len(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'])-1,-1,-1):
        if(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i]<0):
          count_profitqt-=5
          pepoints=pepoints-1


    
    ##Indicator 13: Pledged shares
    for i in stock_data:
      for j in i:
        j=str(j)
        if(stock_name in j):
          # print(j.index(i))
          stock_position=stock_data.index(i)
          # print(j)
          break

    pledged_shares=stock_data[stock_position][15]
    # print(pledged_shares)
    stock_name=stock_data[stock_position][5]
    count_pshares=1
    if(pledged_shares>0):
      pepoints-=1
      count_pshares=count_pshares*-10
    else:
      pepoints+=1
      count_pshares=count_pshares*10


    ##Entities: Alpha & Beta
    alpha=round(stock_data[stock_position][9],2)
    # print("Alpha",alpha)
    beta=round(stock_data[stock_position][10],2)
    # print("Beta",beta)
    divy=data['Dividend Yield']
    # print("Dividend Yield",divy)

    cagr=stock_data[stock_position][8]
    # print("CAGR:", cagr)

    # pepoints

    ##Indicator 14: PE Ratio
    st_pe=data['TTM PE']
    se_pe=data['Sector PE']
    # print("Stock PE", st_pe)
    # print("Sector PE",se_pe)
    count_pe=1
    if(data['TTM PE']=="--"):
        count_pe=pepoints*12
    elif(data['TTM PE']<data['Sector PE']):
      count_pe=pepoints*15
    else:
      count_pe=pepoints*10

    # print(count_pe)



    #Predicting Target Price 
    flag=0
    target_price=None
    entry_price=None
    # int(indicator_data['ENTERPRISE VALUE (CR.)'])
    # print(indicator_data['EV/EBITDA (X)'])
    # print()

    ebitda_list=[]
    for i in range(len(indicator_data['ENTERPRISE VALUE (CR.)'])-1,-1,-1):
            if(indicator_data['ENTERPRISE VALUE (CR.)'][i]==0):

              flag=1
              break

            # print(indicator_data['ENTERPRISE VALUE (CR.)'][i] , "/" , indicator_data['EV/EBITDA (X)'][i],"=", round((indicator_data['ENTERPRISE VALUE (CR.)'][i]/indicator_data['EV/EBITDA (X)'][i]),2))
            ebitda_list.append(round(indicator_data['ENTERPRISE VALUE (CR.)'][i]/indicator_data['EV/EBITDA (X)'][i],2))
    if(flag==0):

      # print()
      ebitda_list=ebitda_list[::-1]

      # print(ebitda_list)
      growth_ebitda=[]
      for i in range(len(ebitda_list)-1,0,-1):
        # print(ebitda_list[i-1],"-",ebitda_list[i],"=",round(ebitda_list[i-1]-ebitda_list[i],2), "   ",round((ebitda_list[i-1]-ebitda_list[i])/ebitda_list[i]*100,2))
        growth_ebitda.append(round((ebitda_list[i-1]-ebitda_list[i])/ebitda_list[i]*100,2))

      # print()
      growth_ebitda=growth_ebitda[::-1]

      # print(growth_ebitda)
      # print()
      grow=0
      for i in range(len(growth_ebitda)-1):
        grow=grow+growth_ebitda[i]

      growth=round(grow/3,2)
      # print("Growth for last three years:", growth)
      # print()
      # print(ebitda_list[0])
      pred_ebitda=round(((100+growth)*ebitda_list[0])/100,2)

      # print("Predicted Ebitda:",pred_ebitda)



      # print()
      forecasted_ev= round(pred_ebitda*indicator_data['EV/EBITDA (X)'][0],2)

      # print()
      forecasted_ev=forecasted_ev-indicator_data['LONG TERM BORROWINGS'][0]
      forecasted_ev

      # print("Forecasted EV:",forecasted_ev)
      # print()
      target_price=round(forecasted_ev/shareholding,2)
      # print("Target Price:", target_price)

      entry_price=round(target_price*0.75,2)
      # print("Good Buy Price:",entry_price)

    points=bonus+count_currentratio+count_debt+count_ebit+count_ito+count_profitloss+count_rec+count_reserves+count_revenuefromop+count_roce+count_netcashflow+count_pe+count_freecash+count_pshares+count_revenuefromopqt+count_profitqt
    final_list=[]
    per_auto="8.3%"
    industry="Automobile"




    final_list.append(stock_name)
    final_list.append(cap)
    final_list.append(roce_ind)
    final_list.append(points)
    final_list.append(per_auto)
    final_list.append(industry)


    return final_list

  table=[]
  url_list=[]
        
  url_list=[[["Maruti Suzuki India"],["https://www.moneycontrol.com/india/stockpricequote/autocarsjeeps/marutisuzukiindia/MS24"],["https://www.moneycontrol.com/financials/marutisuzukiindia/profit-lossVI/MS24#MS24","https://www.moneycontrol.com/financials/marutisuzukiindia/ratiosVI/MS24#MS24","https://www.moneycontrol.com/financials/marutisuzukiindia/balance-sheetVI/MS24#MS24","https://www.moneycontrol.com/financials/marutisuzukiindia/cash-flowVI/MS24#MS24",'https://www.moneycontrol.com/financials/marutisuzukiindia/results/quarterly-results/MS24#MS24']],
          [["TATAMOTORS"],["https://www.moneycontrol.com/india/stockpricequote/autolcvshcvs/tatamotors/TM03"],["https://www.moneycontrol.com/financials/tatamotors/balance-sheetVI/TM03#TM03","https://www.moneycontrol.com/financials/tatamotors/profit-lossVI/TM03#TM03","https://www.moneycontrol.com/financials/tatamotors/cash-flowVI/TM03#TM03", " https://www.moneycontrol.com/financials/tatamotors/ratiosVI/TM03#TM03",'https://www.moneycontrol.com/financials/tatamotors/results/quarterly-results/TM03#TM03']],
          [['Mahindra and Mahindra Lt'],["https://www.moneycontrol.com/india/stockpricequote/autocarsjeeps/mahindramahindra/MM"],['https://www.moneycontrol.com/financials/mahindramahindra/cash-flowVI/MM#MM','https://www.moneycontrol.com/financials/mahindramahindra/ratiosVI/MM#MM','https://www.moneycontrol.com/financials/mahindramahindra/balance-sheetVI/MM#MM','https://www.moneycontrol.com/financials/mahindramahindra/profit-lossVI/MM#MM','https://www.moneycontrol.com/financials/mahindramahindra/results/quarterly-results/MM#MM']],
          
          [["FORCEMOT"],['https://www.moneycontrol.com/india/stockpricequote/autolcvshcvs/forcemotors/FM01'],['https://www.moneycontrol.com/financials/forcemotors/balance-sheetVI/FM01#FM01','https://www.moneycontrol.com/financials/forcemotors/profit-lossVI/FM01#FM01','https://www.moneycontrol.com/financials/forcemotors/ratiosVI/FM01#FM01','https://www.moneycontrol.com/financials/forcemotors/cash-flowVI/FM01#FM01','https://www.moneycontrol.com/financials/forcemotors/results/quarterly-results/FM01#FM01']],
          [['HEROMOTOCO'],['https://www.moneycontrol.com/india/stockpricequote/auto23wheelers/heromotocorp/HHM'],['https://www.moneycontrol.com/financials/heromotocorp/balance-sheetVI/HHM#HHM','https://www.moneycontrol.com/financials/heromotocorp/profit-lossVI/HHM#HHM','https://www.moneycontrol.com/financials/heromotocorp/results/quarterly-results/HHM#HHM','https://www.moneycontrol.com/financials/heromotocorp/cash-flowVI/HHM#HHM','https://www.moneycontrol.com/financials/heromotocorp/ratiosVI/HHM#HHM']],
          [['BAJAJ-AUTO'],['https://www.moneycontrol.com/india/stockpricequote/auto23wheelers/bajajauto/BA10'],['https://www.moneycontrol.com/financials/bajajauto/balance-sheetVI/BA10#BA10','https://www.moneycontrol.com/financials/bajajauto/profit-lossVI/BA10#BA10','https://www.moneycontrol.com/financials/bajajauto/results/quarterly-results/BA10#BA10','https://www.moneycontrol.com/financials/bajajauto/cash-flowVI/BA10#BA10','https://www.moneycontrol.com/financials/bajajauto/ratiosVI/BA10#BA10']],
          [['EICHERMOT'],['https://www.moneycontrol.com/india/stockpricequote/autolcvshcvs/eichermotors/EM'],['https://www.moneycontrol.com/financials/eichermotors/balance-sheetVI/EM#EM','https://www.moneycontrol.com/financials/eichermotors/profit-lossVI/EM#EM','https://www.moneycontrol.com/financials/eichermotors/results/quarterly-results/EM#EM','https://www.moneycontrol.com/financials/eichermotors/cash-flowVI/EM#EM','https://www.moneycontrol.com/financials/eichermotors/ratiosVI/EM#EM']]]

        
  for i in range(len(url_list)):
    list_input=[]
    for j in url_list[i]:
      list_input.append(j)
    stockname=list_input[0][0]
    url1=list_input[1][0]
    url2=list_input[2]
    # print(stockname,url1,url2)
    final_list=automobile(stockname,url1,url2)
    table.append(final_list)
  df=pd.DataFrame(table,columns=['stock_name','cap','roce_ind','points','per_auto','industry'])
  df.sort_values(by='points', ascending=False,inplace=True)
  stock=[]
  
  
  df_final=df[['stock_name','cap','roce_ind','per_auto','industry']]
  

  data=df[['points']]
  dt=data.values.tolist()
  max=dt[0][0]
  c=0
  for i in range(len(dt)):
    for j in dt[i]:
      # print(j)
      if(j>max-330):
        c=c+1


  stock= df_final[:3].values.tolist()
  
  portfolio.append(stock)
  
  def fmcgtob(stockname,url1,url2):


      stock_name=stockname
      url = url1

      # Make a GET request to fetch the raw HTML content
      html_content = requests.get(url).text

      # Parse HTML code for the entire site
      soup = BeautifulSoup(html_content, "lxml")
      # print(soup)

      mc = soup.find_all("div", attrs={"class": "oview_table"})
      # print("Number of tables on site: ",len(mc))

      data = dict()
      for tb in mc[:4]:
          body = tb.find_all("tr")
          for i in body:
              vals = i.find_all("td")
              title = vals[0].text.strip()
              try:
                  value = float(vals[1].text.replace(',',''))
              except ValueError:
                  value = vals[1].text.replace(',','')
              data[title] = value
      # print(data)



      excel_data=pd.read_csv(r"C:\Users\mohil\OneDrive\Desktop\STOCKS_new.csv")
      excel_data.drop(columns=['Name (largecap alpha.csv)', 'Ticker (largecap alpha.csv)'],inplace=True)
      # excel_data.head(10)

      avg_price=round((data['Open']+data['Previous Close'])/2,2)
      shareholding=round((data['Mkt Cap (Rs. Cr.)']/avg_price),2)
      shareholding

      parameters_dict = dict()
      def scrape_indicators(urls):
          for url in urls:
              html_content = requests.get(url).text

              # Parse HTML code for the entire site
              soup = BeautifulSoup(html_content, "lxml")
              stonks = soup.find_all("div", attrs={"id": "standalone-new"})

              body = stonks[0].find_all("tr")

              indicator_dict = dict()

              for record in body:
                  indicator = record.find_all("td")[0].text.upper()
                  temp_indicator_values = []
                  try:
                      for table_data in (record.find_all('td')[1:-1]):
                          temp_indicator_values.append(
                              float(table_data.text.replace(',', '')))
                  except ValueError:
                      continue
                  indicator_dict[indicator] = temp_indicator_values

              parameters_dict.update(indicator_dict)

          yield(url, parameters_dict)


          
      urls=url2
      # urls = ["https://www.moneycontrol.com/financials/godfreyphillipsindia/balance-sheetVI/GPI#GPI","https://www.moneycontrol.com/financials/godfreyphillipsindia/profit-lossVI/GPI#GPI","https://www.moneycontrol.com/financials/godfreyphillipsindia/cash-flowVI/GPI#GPI","https://www.moneycontrol.com/financials/godfreyphillipsindia/ratiosVI/GPI#GPI"]


      for request_url, indicator_data in scrape_indicators(urls):
          # print(request_url)
          # print(indicator_data)
          print()
          # print()

      if(data['Mkt Cap (Rs. Cr.)']<20000.00 and data['Mkt Cap (Rs. Cr.)']>5000.00):
        cap="Mid Cap"
      elif (data['Mkt Cap (Rs. Cr.)']>20000.00):
        cap="Large Cap"
      else:
        cap="Small Cap"
      

      pepoints=0



      ##Indicator 1: Reserves & Surplus
      # print(indicator_data['RESERVES AND SURPLUS'])
      rands_list=[]
      count_reserves=0
      for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,0,-1):
        if(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i]>0):
          rands_list.append(round(((indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i])/indicator_data['RESERVES AND SURPLUS'][i])*100,2))
          # print(indicator_data['RESERVES AND SURPLUS'][i])
          count_reserves=count_reserves+20
          pepoints+=1
          # print(indicator_data['RESERVES AND SURPLUS'][i-1] , "-" , indicator_data['RESERVES AND SURPLUS'][i],"=", round(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i],2))
        else:
          rands_list.append(round(((indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i])/indicator_data['RESERVES AND SURPLUS'][i])*100,2))
          # print(indicator_data['RESERVES AND SURPLUS'][i])
          count_reserves=count_reserves-20
          pepoints-=1
          # print(indicator_data['RESERVES AND SURPLUS'][i-1],"-",indicator_data['RESERVES AND SURPLUS'][i],"=", round(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i],2))

      rands_list=rands_list[::-1]

      for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,-1,-1):
          if(indicator_data['RESERVES AND SURPLUS'][i]<0):
            count_reserves-=20
            pepoints-=1

      # print(count_reserves)
      # print(rands_list)

      ##Indicator 2: Revenue From Operations Gross
      count_revenuefromop=0
      revenue_list=[]
      # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])
      for i in range(len(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])-1,0,-1):
        if(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i]>0):
          revenue_list.append(round(((indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])/indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])*100,2))
          count_revenuefromop=count_revenuefromop+10
          # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1] , "-" , indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],"=", round(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],2))
        else:
          revenue_list.append(round(((indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])/indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])*100,2))
          count_revenuefromop=count_revenuefromop-10
          # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1],"-",indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],"=",round(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],2))

      revenue_list=revenue_list[::-1]

      for i in range(len(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])-1,-1,-1):
          if(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i]<0):
            count_revenuefromop-=15


      # print(count_revenuefromop)
      # print(revenue_list)





      ##Indicator 3: Profit/Loss for the period
      count_profitloss=0
      profit_list=[]
      # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'])
      for i in range(len(indicator_data['PROFIT/LOSS FOR THE PERIOD'])-1,0,-1):
        if(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i]>0):
          profit_list.append(round(((indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])/indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])*100,2))
          count_profitloss=count_profitloss+10
          # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1] , "-" , indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],"=", round(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],2))
        else:
          profit_list.append(round(((indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])/indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])*100,2))
          count_profitloss=count_profitloss-10
          # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1],"-",indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],"=",round(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],2))

      profit_list=profit_list[::-1]

      for i in range(len(indicator_data['PROFIT/LOSS FOR THE PERIOD'])-1,-1,-1):
          if(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i]<0):
            count_profitloss-=15

      # print(count_profitloss)
      # print(profit_list)

      # print(pepoints)

      ##Indicator 4: ROCE

      count_roce=0
      # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])
      for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,0,-1):
        if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]>-1):
          count_roce+=10
          # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1] , "-" , indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],"=", round(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],2))
        else:
          count_roce-=10
          # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1],"-",indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],"=",round(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],2))

      for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,-1,-1):
          if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]<10):
            count_roce-=15
            pepoints-=1
          else:
            if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]>10):
              count_roce+=15
              pepoints+=1


      for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,-1,-1):
          if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]<0):
            count_roce-=25

      roce_ind=indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][0]


      # print(count_roce)

      # print(pepoints)

      ##Indicator 5: Inventory Turnover Ratio
      count_ito=0
      # print(indicator_data['INVENTORY TURNOVER RATIO (X)'])
      for i in range(len(indicator_data['INVENTORY TURNOVER RATIO (X)'])-1,0,-1):
        if(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i]>0):
          count_ito+=20
          pepoints+=1
          # print(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1] , "-" , indicator_data['INVENTORY TURNOVER RATIO (X)'][i],"=", round(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i],2))
        else:
          count_ito-=10
          pepoints-=1
          # print(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1],"-",indicator_data['INVENTORY TURNOVER RATIO (X)'][i],"=",round(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i],2))
      # print(count_ito)

      # pepoints

      ##Indicator 6: Reserves & Surplus/Equity Share Capital
      # print(indicator_data['RESERVES AND SURPLUS'])
      # print(indicator_data['TOTAL SHARE CAPITAL'])
      #print()
      rsesc_list=[]
      for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,-1,-1):
              # print(indicator_data['RESERVES AND SURPLUS'][i])
              # print(indicator_data['RESERVES AND SURPLUS'][i] , "/" , indicator_data['TOTAL SHARE CAPITAL'][i],"=", round((indicator_data['RESERVES AND SURPLUS'][i]/indicator_data['TOTAL SHARE CAPITAL'][i]),2))
              rsesc_list.append(round(indicator_data['RESERVES AND SURPLUS'][i]/indicator_data['TOTAL SHARE CAPITAL'][i],2))

      #print()
      rsesc_list=rsesc_list[::-1]
      # print(rsesc_list)
      #print()
      count_rec=0
      for i in range(len(rsesc_list)-1,0,-1):
        if(rsesc_list[i-1]-rsesc_list[i]>0):
          count_rec+=20
          pepoints+=1
          # print(rsesc_list[i-1] , "-" , rsesc_list[i],"=", round(rsesc_list[i-1]-rsesc_list[i],2))
        else:
          count_rec-=10
          pepoints-=1
          # print(rsesc_list[i-1],"-",rsesc_list[i],"=",round(rsesc_list[i-1]-rsesc_list[i],2))


      for i in range(len(rsesc_list)-1,-1,-1):
          if(rsesc_list[i]<10):
            count_rec-=15

      for i in range(len(rsesc_list)-1,-1,-1):
          if(rsesc_list[i]<0):
            count_rec-=20


      # print(rsesc_list)
      # print(count_rec)



      # pepoints





      ## Indicator 7: Trade Receivables in Current Assets
      # print(indicator_data['TOTAL CURRENT ASSETS'])
      # print(indicator_data['TRADE RECEIVABLES'])

      trade_list=[]
      bonus=0
      for i in range(len(indicator_data['TOTAL CURRENT ASSETS'])-1,-1,-1):
                # print(indicator_data['TOTAL CURRENT ASSETS'][i] , "/" , indicator_data['TRADE RECEIVABLES'][i],"=", round((indicator_data['TOTAL CURRENT ASSETS'][i]/indicator_data['TRADE RECEIVABLES'][i]),2))
                if(round((indicator_data['TOTAL CURRENT ASSETS'][i]/indicator_data['TRADE RECEIVABLES'][i]),2)<50.00):
                  bonus+=10
                else:
                  bonus-=5
      # print(bonus)

      # print(pepoints)

      ## Indicator 8: Earnings Before Interest Tax

      indicator_data['PBIT MARGIN (%)']
      count_ebit=0
      # print(indicator_data['PBIT MARGIN (%)'])
      for i in range(len(indicator_data['PBIT MARGIN (%)'])-1,0,-1):
        if(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i]>0):
          count_ebit+=10
          pepoints+=1
          # print(indicator_data['PBIT MARGIN (%)'][i-1] , "-" , indicator_data['PBIT MARGIN (%)'][i],"=", round(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i],2))
        else:
          count_ebit-=5
          pepoints+=1
          # print(indicator_data['PBIT MARGIN (%)'][i-1],"-",indicator_data['PBIT MARGIN (%)'][i],"=",round(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i],2))

      for i in range(len(indicator_data['PBIT MARGIN (%)'])-1,-1,-1):
          if(indicator_data['PBIT MARGIN (%)'][i]<0):
            count_ebit-=20


      # print(count_ebit)

      # print(pepoints)

      ## Indicator 9: Debt To Equity Ratio

      count_debt=0
      # print(indicator_data["TOTAL DEBT/EQUITY (X)"])

      for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,0,-1):
        if(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i]>0):
          count_debt+=10
          # print(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1] , "-" , indicator_data['TOTAL DEBT/EQUITY (X)'][i],"=", round(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i],2))
        elif (indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i]==0):
              count_debt+=10
        else:
          count_debt-=5
          # print(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1],"-",indicator_data['TOTAL DEBT/EQUITY (X)'][i],"=",round(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i],2))
        
      for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,-1,-1):
          if(indicator_data['TOTAL DEBT/EQUITY (X)'][i]>2):
            count_debt-=15
            pepoints-=1
          else:
            count_debt+=15
            pepoints+=1

      for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,-1,-1):
          if(indicator_data['TOTAL DEBT/EQUITY (X)'][i]<0):
            count_debt-=20


      # print(count_debt)

      # pepoints

      ## Indicator 10: Current Ratio
      indicator_data['CURRENT RATIO (X)']

      count_currentratio=0
      # print(indicator_data["CURRENT RATIO (X)"])

      for i in range(len(indicator_data['CURRENT RATIO (X)'])-1,0,-1):
        if(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i]>0):
          count_currentratio+=10
          # print(indicator_data['CURRENT RATIO (X)'][i-1] , "-" , indicator_data['CURRENT RATIO (X)'][i],"=", round(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i],2))
        elif ((indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i])==0):
              count_currentratio+=10
        else:
          count_currentratio-=5
          # print(indicator_data['CURRENT RATIO (X)'][i-1],"-",indicator_data['CURRENT RATIO (X)'][i],"=",round(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i],2))

      for i in range(len(indicator_data['CURRENT RATIO (X)'])-1,-1,-1):
          if(indicator_data['CURRENT RATIO (X)'][i]<2):
            # print(indicator_data['CURRENT RATIO (X)'][i])
            count_currentratio-=10
            pepoints=pepoints-0.5
          elif (indicator_data['CURRENT RATIO (X)'][i]<1):
            count_currentratio-=20
            pepoints=pepoints-1
          else:
            count_currentratio+=10
            pepoints+=1


      # print(count_currentratio)

      # pepoints

      ##Indicator 11: Net Cashflow From Operating Activities
      count_netcashflow=0
      cashflow_list=[]
      # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])
      for i in range(len(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])-1,0,-1):
        if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]>0):
          cashflow_list.append(round(((indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])/indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])*100,2))
          count_netcashflow=count_netcashflow+10
          pepoints+=1
          # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1] , "-" , indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],"=", round(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],2))
        else:
          cashflow_list.append(round(((indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])/indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])*100,2))
          count_netcashflow=count_netcashflow-10
          pepoints-=1
          # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1],"-",indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],"=",round(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],2))

      cashflow_list=cashflow_list[::-1]

      for i in range(len(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])-1,-1,-1):
          if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]<0):
            count_netcashflow-=15

      # print(count_netcashflow)
      # print(cashflow_list)

      ##Indicator 12: Free cash Flow
      stock_position=None
      stock_data=excel_data.values.tolist()
      stock_data
      for i in stock_data:
        for j in i:
          j=str(j)
          if(stock_name in j):
            # print(j.index(i))
            stock_position=stock_data.index(i)
            # print(j)
            break
            
      # print(stock_position)

      freecash_list=[]
      for i in range(5):
        freecash_list.append(stock_data[stock_position][i])
      # print(freecash_list)

      count_freecash=0
      for i in range(1,len(freecash_list)):
        if(freecash_list[i]-freecash_list[i-1]>0):
          # print(freecash_list[i],"-",freecash_list[i-1],"=",freecash_list[i]-freecash_list[i-1])
          count_freecash+=20
          pepoints+=1
        else:
          # print(freecash_list[i],"-",freecash_list[i-1],"=",freecash_list[i]-freecash_list[i-1])
          count_freecash-=10
          pepoints-=1

      for i in range(0,len(freecash_list)):
        if(freecash_list[i]<0):
          count_freecash-=20
          pepoints-=1

      # print(count_freecash)

      ##Indicator 13: Pledged shares
      for i in stock_data:
        for j in i:
          j=str(j)
          if(stock_name in j):
            # print(j.index(i))
            stock_position=stock_data.index(i)
            # print(j)
            break

      pledged_shares=stock_data[stock_position][15]
      # print(pledged_shares)
      stock_name=stock_data[stock_position][5]
      count_pshares=1
      if(pledged_shares>0):
        pepoints-=1
        count_pshares=count_pshares*-10
      else:
        pepoints+=1
        count_pshares=count_pshares*10

      ##Entities: Alpha & Beta
      alpha=round(stock_data[stock_position][9],2)
      # print("Alpha",alpha)
      beta=round(stock_data[stock_position][10],2)
      # print("Beta",beta)
      divy=data['Dividend Yield']
      # print("Dividend Yield",divy)

      cagr=stock_data[stock_position][8]
      # print("CAGR:", cagr)

      # pepoints

      ##Indicator 14: PE Ratio
      st_pe=data['TTM PE']
      se_pe=data['Sector PE']
      # print("Stock PE", st_pe)
      # print("Sector PE",se_pe)
      count_pe=1
      if(data['TTM PE']=="--"):
          count_pe=pepoints*12
      elif(data['TTM PE']<data['Sector PE']):
        count_pe=pepoints*15
      else:
        count_pe=pepoints*10

      # print(count_pe)



      #Predicting Target Price 
      flag=0
      target_price=None
      entry_price=None
      # int(indicator_data['ENTERPRISE VALUE (CR.)'])
      # print(indicator_data['EV/EBITDA (X)'])
      #print()

      ebitda_list=[]
      for i in range(len(indicator_data['ENTERPRISE VALUE (CR.)'])-1,-1,-1):
              if(indicator_data['ENTERPRISE VALUE (CR.)'][i]==0):

                flag=1
                break

              # print(indicator_data['ENTERPRISE VALUE (CR.)'][i] , "/" , indicator_data['EV/EBITDA (X)'][i],"=", round((indicator_data['ENTERPRISE VALUE (CR.)'][i]/indicator_data['EV/EBITDA (X)'][i]),2))
              ebitda_list.append(round(indicator_data['ENTERPRISE VALUE (CR.)'][i]/indicator_data['EV/EBITDA (X)'][i],2))
      if(flag==0):

        #print()
        ebitda_list=ebitda_list[::-1]

        # print(ebitda_list)
        growth_ebitda=[]
        for i in range(len(ebitda_list)-1,0,-1):
          # print(ebitda_list[i-1],"-",ebitda_list[i],"=",round(ebitda_list[i-1]-ebitda_list[i],2), "   ",round((ebitda_list[i-1]-ebitda_list[i])/ebitda_list[i]*100,2))
          growth_ebitda.append(round((ebitda_list[i-1]-ebitda_list[i])/ebitda_list[i]*100,2))

        #print()
        growth_ebitda=growth_ebitda[::-1]

        # print(growth_ebitda)
        #print()
        grow=0
        for i in range(len(growth_ebitda)-1):
          grow=grow+growth_ebitda[i]

        growth=round(grow/3,2)
        # print("Growth for last three years:", growth)
        #print()
        # print(ebitda_list[0])
        pred_ebitda=round(((100+growth)*ebitda_list[0])/100,2)

        # print("Predicted Ebitda:",pred_ebitda)


        #print()
        forecasted_ev= round(pred_ebitda*indicator_data['EV/EBITDA (X)'][0],2)

        #print()
        forecasted_ev=forecasted_ev-indicator_data['LONG TERM BORROWINGS'][0]
        forecasted_ev

        # print("Forecasted EV:",forecasted_ev)
        #print()
        target_price=round(forecasted_ev/shareholding,2)
        # print("Target Price:", target_price)

        entry_price=round(target_price*0.75,2)
        # print("Good Buy Price:",entry_price)

      points=bonus+count_currentratio+count_debt+count_ebit+count_ito+count_profitloss+count_rec+count_reserves+count_revenuefromop+count_roce+count_netcashflow+count_pe+count_freecash+count_pshares
      final_list=[]
      per_foods="11%"
      industry="FMCG Foods"

      final_list.append(stock_name)
      final_list.append(cap)
      final_list.append(roce_ind)
      final_list.append(points)
      final_list.append(per_foods)
      final_list.append(industry)

      
      return final_list

  table=[]
  url_list=[]
  url_list=[[["Nestle"],["https://www.moneycontrol.com/india/stockpricequote/foodprocessing/nestleindia/NI"],["https://www.moneycontrol.com/financials/nestleindia/balance-sheetVI/NI#NI","https://www.moneycontrol.com/financials/nestleindia/profit-lossVI/NI#NI","https://www.moneycontrol.com/financials/nestleindia/cash-flowVI/NI#NI","https://www.moneycontrol.com/financials/nestleindia/ratiosVI/NI#NI"]],
            [["Britannia"],["https://www.moneycontrol.com/india/stockpricequote/foodprocessing/britanniaindustries/BI"],["https://www.moneycontrol.com/financials/britanniaindustries/balance-sheetVI/BI#BI","https://www.moneycontrol.com/financials/britanniaindustries/cash-flowVI/BI#BI","https://www.moneycontrol.com/financials/britanniaindustries/ratiosVI/BI#BI", " https://www.moneycontrol.com/financials/britanniaindustries/profit-lossVI/BI#BI"]],
            [['Hatsun'],["https://www.moneycontrol.com/india/stockpricequote/foodprocessing/hatsunagroproducts/HAP"],['https://www.moneycontrol.com/financials/hatsunagroproducts/balance-sheetVI/HAP#HAP','https://www.moneycontrol.com/financials/hatsunagroproducts/cash-flowVI/HAP#HAP','https://www.moneycontrol.com/financials/hatsunagroproducts/ratiosVI/HAP#HAP','https://www.moneycontrol.com/financials/hatsunagroproducts/profit-lossVI/HAP#HAP']],
            [["ZYDUSWELL"],['https://www.moneycontrol.com/india/stockpricequote/vanaspatioils/zyduswellness/ZW01'],['https://www.moneycontrol.com/financials/zyduswellness/balance-sheetVI/ZW01#ZW01','https://www.moneycontrol.com/financials/zyduswellness/cash-flowVI/ZW01#ZW01','https://www.moneycontrol.com/financials/zyduswellness/ratiosVI/ZW01#ZW01','https://www.moneycontrol.com/financials/zyduswellness/profit-lossVI/ZW01#ZW01']],
            [["Hindustan Foods Ltd"],['https://www.moneycontrol.com/india/stockpricequote/foodprocessing/hindustanfoods/HFL'],['https://www.moneycontrol.com/financials/hindustanfoods/balance-sheetVI/HFL#HFL','https://www.moneycontrol.com/financials/hindustanfoods/profit-lossVI/HFL#HFL','https://www.moneycontrol.com/financials/hindustanfoods/cash-flowVI/HFL#HFL','https://www.moneycontrol.com/financials/hindustanfoods/ratiosVI/HFL#HFL']],
            [['DODLA'],['https://www.moneycontrol.com/india/stockpricequote/consumerfood/dodladairy/DD01'],['https://www.moneycontrol.com/financials/dodladairy/balance-sheetVI/DD01#DD01','https://www.moneycontrol.com/financials/dodladairy/profit-lossVI/DD01#DD01','https://www.moneycontrol.com/financials/dodladairy/cash-flowVI/DD01#DD01','https://www.moneycontrol.com/financials/dodladairy/ratiosVI/DD01#DD01']]]


  for i in range(len(url_list)):
    list_input=[]
    for j in url_list[i]:
      list_input.append(j)
    stockname=list_input[0][0]
    url1=list_input[1][0]
    url2=list_input[2]
    # print(stockname,url1,url2)
    final_list=fmcgtob(stockname,url1,url2)
    table.append(final_list)
  df=pd.DataFrame(table,columns=['stock_name','cap','roce_ind','points','per_foods','industry'])
  df.sort_values(by='points', ascending=False,inplace=True)
  stock=[]

  df_final=df[['stock_name','cap','roce_ind','per_foods','industry']]
  
  stock= df_final[:1].values.tolist()
  
  portfolio.append(stock) 


  def fmcgpro(stockname,url1,url2):


    stock_name=stockname
    url = url1

    # Make a GET request to fetch the raw HTML content
    html_content = requests.get(url).text

    # Parse HTML code for the entire site
    soup = BeautifulSoup(html_content, "lxml")
    # print(soup)

    mc = soup.find_all("div", attrs={"class": "oview_table"})
    # print("Number of tables on site: ",len(mc))

    data = dict()
    for tb in mc[:4]:
        body = tb.find_all("tr")
        for i in body:
            vals = i.find_all("td")
            title = vals[0].text.strip()
            try:
                value = float(vals[1].text.replace(',',''))
            except ValueError:
                value = vals[1].text.replace(',','')
            data[title] = value
    # print(data)



    excel_data=pd.read_csv(r"C:\Users\mohil\OneDrive\Desktop\STOCKS_new.csv")
    excel_data.drop(columns=['Name (largecap alpha.csv)', 'Ticker (largecap alpha.csv)'],inplace=True)
    # excel_data.head(10)

    avg_price=round((data['Open']+data['Previous Close'])/2,2)
    shareholding=round((data['Mkt Cap (Rs. Cr.)']/avg_price),2)
    shareholding

    parameters_dict = dict()
    def scrape_indicators(urls):
        for url in urls:
            html_content = requests.get(url).text

            # Parse HTML code for the entire site
            soup = BeautifulSoup(html_content, "lxml")
            stonks = soup.find_all("div", attrs={"id": "standalone-new"})

            body = stonks[0].find_all("tr")

            indicator_dict = dict()

            for record in body:
                indicator = record.find_all("td")[0].text.upper()
                temp_indicator_values = []
                try:
                    for table_data in (record.find_all('td')[1:-1]):
                        temp_indicator_values.append(
                            float(table_data.text.replace(',', '')))
                except ValueError:
                    continue
                indicator_dict[indicator] = temp_indicator_values

            parameters_dict.update(indicator_dict)

        yield(url, parameters_dict)


    # urls = ["https://www.moneycontrol.com/financials/itc/balance-sheetVI/ITC#ITC","https://www.moneycontrol.com/financials/itc/profit-lossVI/ITC#ITC",
            # "https://www.moneycontrol.com/financials/itc/cash-flowVI/ITC#ITC", " https://www.moneycontrol.com/financials/itc/ratiosVI/ITC#ITC"]

    # urls = ["https://www.moneycontrol.com/financials/vodafoneidealimited/balance-sheetVI/IC8#IC8","https://www.moneycontrol.com/financials/vodafoneidealimited/profit-lossVI/IC8#IC8",
            # "https://www.moneycontrol.com/financials/vodafoneidealimited/cash-flowVI/IC8#IC8", "https://www.moneycontrol.com/financials/vodafoneidealimited/ratiosVI/IC8#IC8"]
        
    urls=url2
    # urls = ["https://www.moneycontrol.com/financials/godfreyphillipsindia/balance-sheetVI/GPI#GPI","https://www.moneycontrol.com/financials/godfreyphillipsindia/profit-lossVI/GPI#GPI","https://www.moneycontrol.com/financials/godfreyphillipsindia/cash-flowVI/GPI#GPI","https://www.moneycontrol.com/financials/godfreyphillipsindia/ratiosVI/GPI#GPI"]


    for request_url, indicator_data in scrape_indicators(urls):
        # print(request_url)
        # print(indicator_data)
        print()
        # print()

    if(data['Mkt Cap (Rs. Cr.)']<20000.00 and data['Mkt Cap (Rs. Cr.)']>5000.00):
      cap="Mid Cap"
    elif (data['Mkt Cap (Rs. Cr.)']>20000.00):
      cap="Large Cap"
    else:
      cap="Small Cap"
    

    pepoints=0



    ##Indicator 1: Reserves & Surplus
    # print(indicator_data['RESERVES AND SURPLUS'])
    rands_list=[]
    count_reserves=0
    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,0,-1):
      if(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i]>0):
        rands_list.append(round(((indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i])/indicator_data['RESERVES AND SURPLUS'][i])*100,2))
        # print(indicator_data['RESERVES AND SURPLUS'][i])
        count_reserves=count_reserves+20
        pepoints+=1
        # print(indicator_data['RESERVES AND SURPLUS'][i-1] , "-" , indicator_data['RESERVES AND SURPLUS'][i],"=", round(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i],2))
      else:
        rands_list.append(round(((indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i])/indicator_data['RESERVES AND SURPLUS'][i])*100,2))
        # print(indicator_data['RESERVES AND SURPLUS'][i])
        count_reserves=count_reserves-20
        pepoints-=1
        # print(indicator_data['RESERVES AND SURPLUS'][i-1],"-",indicator_data['RESERVES AND SURPLUS'][i],"=", round(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i],2))

    rands_list=rands_list[::-1]

    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,-1,-1):
        if(indicator_data['RESERVES AND SURPLUS'][i]<0):
          count_reserves-=20
          pepoints-=1

    # print(count_reserves)
    # print(rands_list)

    ##Indicator 2: Revenue From Operations Gross
    count_revenuefromop=0
    revenue_list=[]
    # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])
    for i in range(len(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])-1,0,-1):
      if(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i]>0):
        revenue_list.append(round(((indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])/indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])*100,2))
        count_revenuefromop=count_revenuefromop+10
        # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1] , "-" , indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],"=", round(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],2))
      else:
        revenue_list.append(round(((indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])/indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])*100,2))
        count_revenuefromop=count_revenuefromop-10
        # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1],"-",indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],"=",round(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],2))

    revenue_list=revenue_list[::-1]

    for i in range(len(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])-1,-1,-1):
        if(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i]<0):
          count_revenuefromop-=15


    # print(count_revenuefromop)
    # print(revenue_list)





    ##Indicator 3: Profit/Loss for the period
    count_profitloss=0
    profit_list=[]
    # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'])
    for i in range(len(indicator_data['PROFIT/LOSS FOR THE PERIOD'])-1,0,-1):
      if(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i]>0):
        profit_list.append(round(((indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])/indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])*100,2))
        count_profitloss=count_profitloss+10
        # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1] , "-" , indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],"=", round(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],2))
      else:
        profit_list.append(round(((indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])/indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])*100,2))
        count_profitloss=count_profitloss-10
        # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1],"-",indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],"=",round(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],2))

    profit_list=profit_list[::-1]

    for i in range(len(indicator_data['PROFIT/LOSS FOR THE PERIOD'])-1,-1,-1):
        if(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i]<0):
          count_profitloss-=15

    # print(count_profitloss)
    # print(profit_list)

    # print(pepoints)

    ##Indicator 4: ROCE

    count_roce=0
    # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])
    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,0,-1):
      if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]>-1):
        count_roce+=10
        # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1] , "-" , indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],"=", round(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],2))
      else:
        count_roce-=10
        # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1],"-",indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],"=",round(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],2))

    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,-1,-1):
        if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]<10):
          count_roce-=15
          pepoints-=1
        else:
          if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]>10):
            count_roce+=15
            pepoints+=1


    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,-1,-1):
        if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]<0):
          count_roce-=25

    roce_ind=indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][0]


    # print(count_roce)

    # print(pepoints)

    ##Indicator 5: Inventory Turnover Ratio
    count_ito=0
    # print(indicator_data['INVENTORY TURNOVER RATIO (X)'])
    for i in range(len(indicator_data['INVENTORY TURNOVER RATIO (X)'])-1,0,-1):
      if(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i]>0):
        count_ito+=20
        pepoints+=1
        # print(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1] , "-" , indicator_data['INVENTORY TURNOVER RATIO (X)'][i],"=", round(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i],2))
      else:
        count_ito-=10
        pepoints-=1
        # print(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1],"-",indicator_data['INVENTORY TURNOVER RATIO (X)'][i],"=",round(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i],2))
    # print(count_ito)

    # pepoints

    ##Indicator 6: Reserves & Surplus/Equity Share Capital
    # print(indicator_data['RESERVES AND SURPLUS'])
    # print(indicator_data['TOTAL SHARE CAPITAL'])
    # print()
    rsesc_list=[]
    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,-1,-1):
            # print(indicator_data['RESERVES AND SURPLUS'][i])
            # print(indicator_data['RESERVES AND SURPLUS'][i] , "/" , indicator_data['TOTAL SHARE CAPITAL'][i],"=", round((indicator_data['RESERVES AND SURPLUS'][i]/indicator_data['TOTAL SHARE CAPITAL'][i]),2))
            rsesc_list.append(round(indicator_data['RESERVES AND SURPLUS'][i]/indicator_data['TOTAL SHARE CAPITAL'][i],2))

    # print()
    rsesc_list=rsesc_list[::-1]
    # print(rsesc_list)
    # print()
    count_rec=0
    for i in range(len(rsesc_list)-1,0,-1):
      if(rsesc_list[i-1]-rsesc_list[i]>0):
        count_rec+=20
        pepoints+=1
        # print(rsesc_list[i-1] , "-" , rsesc_list[i],"=", round(rsesc_list[i-1]-rsesc_list[i],2))
      else:
        count_rec-=10
        pepoints-=1
        # print(rsesc_list[i-1],"-",rsesc_list[i],"=",round(rsesc_list[i-1]-rsesc_list[i],2))


    for i in range(len(rsesc_list)-1,-1,-1):
        if(rsesc_list[i]<10):
          count_rec-=15

    for i in range(len(rsesc_list)-1,-1,-1):
        if(rsesc_list[i]<0):
          count_rec-=20


    # print(rsesc_list)
    # print(count_rec)



    # pepoints





    ## Indicator 7: Trade Receivables in Current Assets
    # print(indicator_data['TOTAL CURRENT ASSETS'])
    # print(indicator_data['TRADE RECEIVABLES'])

    trade_list=[]
    bonus=0
    for i in range(len(indicator_data['TOTAL CURRENT ASSETS'])-1,-1,-1):
              # print(indicator_data['TOTAL CURRENT ASSETS'][i] , "/" , indicator_data['TRADE RECEIVABLES'][i],"=", round((indicator_data['TOTAL CURRENT ASSETS'][i]/indicator_data['TRADE RECEIVABLES'][i]),2))
              if(round((indicator_data['TOTAL CURRENT ASSETS'][i]/indicator_data['TRADE RECEIVABLES'][i]),2)<50.00):
                bonus+=10
              else:
                bonus-=5
    # print(bonus)

    # print(pepoints)

    ## Indicator 8: Earnings Before Interest Tax

    indicator_data['PBIT MARGIN (%)']
    count_ebit=0
    # print(indicator_data['PBIT MARGIN (%)'])
    for i in range(len(indicator_data['PBIT MARGIN (%)'])-1,0,-1):
      if(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i]>0):
        count_ebit+=10
        pepoints+=1
        # print(indicator_data['PBIT MARGIN (%)'][i-1] , "-" , indicator_data['PBIT MARGIN (%)'][i],"=", round(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i],2))
      else:
        count_ebit-=5
        pepoints+=1
        # print(indicator_data['PBIT MARGIN (%)'][i-1],"-",indicator_data['PBIT MARGIN (%)'][i],"=",round(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i],2))

    for i in range(len(indicator_data['PBIT MARGIN (%)'])-1,-1,-1):
        if(indicator_data['PBIT MARGIN (%)'][i]<0):
          count_ebit-=20


    # print(count_ebit)

    # print(pepoints)

    ## Indicator 9: Debt To Equity Ratio

    count_debt=0
    # print(indicator_data["TOTAL DEBT/EQUITY (X)"])

    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,0,-1):
      if(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i]>0):
        count_debt+=10
        # print(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1] , "-" , indicator_data['TOTAL DEBT/EQUITY (X)'][i],"=", round(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i],2))
      elif (indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i]==0):
            count_debt+=10
      else:
        count_debt-=5
        # print(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1],"-",indicator_data['TOTAL DEBT/EQUITY (X)'][i],"=",round(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i],2))
      
    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,-1,-1):
        if(indicator_data['TOTAL DEBT/EQUITY (X)'][i]>2):
          count_debt-=15
          pepoints-=1
        else:
          count_debt+=15
          pepoints+=1

    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,-1,-1):
        if(indicator_data['TOTAL DEBT/EQUITY (X)'][i]<0):
          count_debt-=20


    # print(count_debt)

    # pepoints

    ## Indicator 10: Current Ratio
    indicator_data['CURRENT RATIO (X)']

    count_currentratio=0
    # print(indicator_data["CURRENT RATIO (X)"])

    for i in range(len(indicator_data['CURRENT RATIO (X)'])-1,0,-1):
      if(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i]>0):
        count_currentratio+=10
        # print(indicator_data['CURRENT RATIO (X)'][i-1] , "-" , indicator_data['CURRENT RATIO (X)'][i],"=", round(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i],2))
      elif ((indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i])==0):
            count_currentratio+=10
      else:
        count_currentratio-=5
        # print(indicator_data['CURRENT RATIO (X)'][i-1],"-",indicator_data['CURRENT RATIO (X)'][i],"=",round(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i],2))

    for i in range(len(indicator_data['CURRENT RATIO (X)'])-1,-1,-1):
        if(indicator_data['CURRENT RATIO (X)'][i]<2):
          # print(indicator_data['CURRENT RATIO (X)'][i])
          count_currentratio-=10
          pepoints=pepoints-0.5
        elif (indicator_data['CURRENT RATIO (X)'][i]<1):
          count_currentratio-=20
          pepoints=pepoints-1
        else:
          count_currentratio+=10
          pepoints+=1


    # print(count_currentratio)

    # pepoints

    ##Indicator 11: Net Cashflow From Operating Activities
    count_netcashflow=0
    cashflow_list=[]
    # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])
    for i in range(len(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])-1,0,-1):
      if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]>0):
        cashflow_list.append(round(((indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])/indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])*100,2))
        count_netcashflow=count_netcashflow+10
        pepoints+=1
        # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1] , "-" , indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],"=", round(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],2))
      else:
        cashflow_list.append(round(((indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])/indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])*100,2))
        count_netcashflow=count_netcashflow-10
        pepoints-=1
        # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1],"-",indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],"=",round(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],2))

    cashflow_list=cashflow_list[::-1]

    for i in range(len(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])-1,-1,-1):
        if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]<0):
          count_netcashflow-=15

    # print(count_netcashflow)
    # print(cashflow_list)

    ##Indicator 12: Free cash Flow
    stock_position=None
    stock_data=excel_data.values.tolist()
    stock_data
    for i in stock_data:
      for j in i:
        j=str(j)
        if(stock_name in j):
          # print(j.index(i))
          stock_position=stock_data.index(i)
          # print(j)
          break
          
    # print(stock_position)

    freecash_list=[]
    for i in range(5):
      freecash_list.append(stock_data[stock_position][i])
    # print(freecash_list)

    count_freecash=0
    for i in range(1,len(freecash_list)):
      if(freecash_list[i]-freecash_list[i-1]>0):
        # print(freecash_list[i],"-",freecash_list[i-1],"=",freecash_list[i]-freecash_list[i-1])
        count_freecash+=20
        pepoints+=1
      else:
        # print(freecash_list[i],"-",freecash_list[i-1],"=",freecash_list[i]-freecash_list[i-1])
        count_freecash-=10
        pepoints-=1

    for i in range(0,len(freecash_list)):
      if(freecash_list[i]<0):
        count_freecash-=20
        pepoints-=1

    # print(count_freecash)

    ##Indicator 13: Pledged shares
    for i in stock_data:
      for j in i:
        j=str(j)
        if(stock_name in j):
          # print(j.index(i))
          stock_position=stock_data.index(i)
          # print(j)
          break

    pledged_shares=stock_data[stock_position][15]
    # print(pledged_shares)
    stock_name=stock_data[stock_position][5]
    count_pshares=1
    if(pledged_shares>0):
      pepoints-=1
      count_pshares=count_pshares*-10
    else:
      count_pshares=count_pshares*10
      pepoints+=1

    ##Entities: Alpha & Beta
    alpha=round(stock_data[stock_position][9],2)
    # print("Alpha",alpha)
    beta=round(stock_data[stock_position][10],2)
    # print("Beta",beta)
    divy=data['Dividend Yield']
    # print("Dividend Yield",divy)

    cagr=stock_data[stock_position][8]
    # print("CAGR:", cagr)

    # pepoints

    ##Indicator 14: PE Ratio
    st_pe=data['TTM PE']
    se_pe=data['Sector PE']
    # print("Stock PE", st_pe)
    # print("Sector PE",se_pe)
    count_pe=1
    if(data['TTM PE']=="--"):
        count_pe=pepoints*12
    elif(data['TTM PE']<data['Sector PE']):
      count_pe=pepoints*15
    else:
      count_pe=pepoints*10

    # print(count_pe)



    #Predicting Target Price 
    flag=0
    target_price=None
    entry_price=None
    # int(indicator_data['ENTERPRISE VALUE (CR.)'])
    # print(indicator_data['EV/EBITDA (X)'])
    # print()

    ebitda_list=[]
    for i in range(len(indicator_data['ENTERPRISE VALUE (CR.)'])-1,-1,-1):
            if(indicator_data['ENTERPRISE VALUE (CR.)'][i]==0):

              flag=1
              break

            # print(indicator_data['ENTERPRISE VALUE (CR.)'][i] , "/" , indicator_data['EV/EBITDA (X)'][i],"=", round((indicator_data['ENTERPRISE VALUE (CR.)'][i]/indicator_data['EV/EBITDA (X)'][i]),2))
            ebitda_list.append(round(indicator_data['ENTERPRISE VALUE (CR.)'][i]/indicator_data['EV/EBITDA (X)'][i],2))
    if(flag==0):

      # print()
      ebitda_list=ebitda_list[::-1]

      # print(ebitda_list)
      growth_ebitda=[]
      for i in range(len(ebitda_list)-1,0,-1):
        # print(ebitda_list[i-1],"-",ebitda_list[i],"=",round(ebitda_list[i-1]-ebitda_list[i],2), "   ",round((ebitda_list[i-1]-ebitda_list[i])/ebitda_list[i]*100,2))
        growth_ebitda.append(round((ebitda_list[i-1]-ebitda_list[i])/ebitda_list[i]*100,2))

      # print()
      growth_ebitda=growth_ebitda[::-1]

      # print(growth_ebitda)
      # print()
      grow=0
      for i in range(len(growth_ebitda)-1):
        grow=grow+growth_ebitda[i]

      growth=round(grow/3,2)
      # print("Growth for last three years:", growth)
      # print()
      # print(ebitda_list[0])
      pred_ebitda=round(((100+growth)*ebitda_list[0])/100,2)

      # print("Predicted Ebitda:",pred_ebitda)


      # print()
      forecasted_ev= round(pred_ebitda*indicator_data['EV/EBITDA (X)'][0],2)

      # print()
      forecasted_ev=forecasted_ev-indicator_data['LONG TERM BORROWINGS'][0]
      forecasted_ev

      # print("Forecasted EV:",forecasted_ev)
      # print()
      target_price=round(forecasted_ev/shareholding,2)
      # print("Target Price:", target_price)

      entry_price=round(target_price*0.75,2)
      # print("Good Buy Price:",entry_price)

    points=bonus+count_currentratio+count_debt+count_ebit+count_ito+count_profitloss+count_rec+count_reserves+count_revenuefromop+count_roce+count_netcashflow+count_pe+count_freecash+count_pshares
    final_list=[]
    per_products="8%"
    industry="FMCG Products"



    final_list.append(stock_name)
    final_list.append(cap)
    final_list.append(roce_ind)
    final_list.append(points)
    final_list.append(per_products)
    final_list.append(industry)

    return final_list

  table=[]
  url_list=[]
  url_list=[[["HINDUNILVR"],["https://www.moneycontrol.com/india/stockpricequote/personalcare/hindustanunilever/HU"],["https://www.moneycontrol.com/financials/hindustanunilever/balance-sheetVI/HU#HU","https://www.moneycontrol.com/financials/hindustanunilever/profit-lossVI/HU#HU","https://www.moneycontrol.com/financials/hindustanunilever/cash-flowVI/HU#HU","https://www.moneycontrol.com/financials/hindustanunilever/ratiosVI/HU#HU"]],
            [["DABUR"],["https://www.moneycontrol.com/india/stockpricequote/personalcare/daburindia/DI"],["https://www.moneycontrol.com/financials/daburindia/balance-sheetVI/DI#DI","https://www.moneycontrol.com/financials/daburindia/ratiosVI/DI#DI","https://www.moneycontrol.com/financials/daburindia/profit-lossVI/DI#DI", "https://www.moneycontrol.com/financials/daburindia/cash-flowVI/DI#DI "]],
            [['GODREJCP'],["https://www.moneycontrol.com/india/stockpricequote/personalcare/godrejconsumerproducts/GCP"],['https://www.moneycontrol.com/financials/godrejconsumerproducts/balance-sheetVI/GCP#GCP','https://www.moneycontrol.com/financials/godrejconsumerproducts/profit-lossVI/GCP#GCP','https://www.moneycontrol.com/financials/godrejconsumerproducts/cash-flowVI/GCP#GCP','https://www.moneycontrol.com/financials/godrejconsumerproducts/ratiosVI/GCP#GCP']],
            
            [["MARICO"],['https://www.moneycontrol.com/india/stockpricequote/personalcare/marico/M13'],['https://www.moneycontrol.com/financials/marico/profit-lossVI/M13#M13','https://www.moneycontrol.com/financials/marico/ratiosVI/M13#M13','https://www.moneycontrol.com/financials/marico/cash-flowVI/M13#M13','https://www.moneycontrol.com/financials/marico/balance-sheetVI/M13#M13']],
            
            [["COLPAL"],['https://www.moneycontrol.com/india/stockpricequote/personalcare/colgatepalmoliveindia/CPI'],['https://www.moneycontrol.com/financials/colgatepalmoliveindia/cash-flowVI/CPI#CPI','https://www.moneycontrol.com/financials/colgatepalmoliveindia/profit-lossVI/CPI#CPI','https://www.moneycontrol.com/financials/colgatepalmoliveindia/balance-sheetVI/CPI#CPI','https://www.moneycontrol.com/financials/colgatepalmoliveindia/ratiosVI/CPI#CPI']],
            [['PGHH'],['https://www.moneycontrol.com/india/stockpricequote/personalcare/proctergamblehygienehealthcare/PGH'],['https://www.moneycontrol.com/financials/proctergamblehygienehealthcare/balance-sheetVI/PGH#PGH','https://www.moneycontrol.com/financials/proctergamblehygienehealthcare/profit-lossVI/PGH#PGH','https://www.moneycontrol.com/financials/proctergamblehygienehealthcare/cash-flowVI/PGH#PGH','https://www.moneycontrol.com/financials/proctergamblehygienehealthcare/ratiosVI/PGH#PGH']],
            [['EMAMILTD'],['https://www.moneycontrol.com/india/stockpricequote/personalcare/emami/E06'],['https://www.moneycontrol.com/financials/emami/balance-sheetVI/E06#E06','https://www.moneycontrol.com/financials/emami/profit-lossVI/E06#E06','https://www.moneycontrol.com/financials/emami/cash-flowVI/E06#E06','https://www.moneycontrol.com/financials/emami/ratiosVI/E06#E06']],
            [['GILLETTE'],['https://www.moneycontrol.com/india/stockpricequote/personalcare/gilletteindia/GI22'],['https://www.moneycontrol.com/financials/gilletteindia/balance-sheetVI/GI22#GI22','https://www.moneycontrol.com/financials/gilletteindia/profit-lossVI/GI22#GI22','https://www.moneycontrol.com/financials/gilletteindia/cash-flowVI/GI22#GI22','https://www.moneycontrol.com/financials/gilletteindia/ratiosVI/GI22#GI22']],
            [['JYOTHYLAB'],['https://www.moneycontrol.com/india/stockpricequote/personalcare/jyothylabs/JL'],['https://www.moneycontrol.com/financials/jyothylabs/balance-sheetVI/JL#JL','https://www.moneycontrol.com/financials/jyothylabs/profit-lossVI/JL#JL','https://www.moneycontrol.com/financials/jyothylabs/cash-flowVI/JL#JL','https://www.moneycontrol.com/financials/jyothylabs/ratiosVI/JL#JL']]]
          


  for i in range(len(url_list)):
    list_input=[]
    for j in url_list[i]:
      list_input.append(j)
    stockname=list_input[0][0]
    url1=list_input[1][0]
    url2=list_input[2]
    # print(stockname,url1,url2)
    final_list=fmcgpro(stockname,url1,url2)
    table.append(final_list)
  df=pd.DataFrame(table,columns=['stock_name','cap','roce_ind','points','per_products','industry'])
  df.sort_values(by='points', ascending=False,inplace=True)
  stock=[]

  df_final=df[['stock_name','cap','roce_ind','per_products','industry']]
  
  stock= df_final[:2].values.tolist()
  
  portfolio.append(stock) 



  def elec(stockname,url1,url2):


    stock_name=stockname
    url = url1

    # Make a GET request to fetch the raw HTML content
    html_content = requests.get(url).text

    # Parse HTML code for the entire site
    soup = BeautifulSoup(html_content, "lxml")
    # print(soup)

    mc = soup.find_all("div", attrs={"class": "oview_table"})
    # print("Number of tables on site: ",len(mc))

    data = dict()
    for tb in mc[:4]:
        body = tb.find_all("tr")
        for i in body:
            vals = i.find_all("td")
            title = vals[0].text.strip()
            try:
                value = float(vals[1].text.replace(',',''))
            except ValueError:
                value = vals[1].text.replace(',','')
            data[title] = value
    # print(data)



    excel_data=pd.read_csv(r"C:\Users\mohil\OneDrive\Desktop\STOCKS_new.csv")
    excel_data.drop(columns=['Name (largecap alpha.csv)', 'Ticker (largecap alpha.csv)'],inplace=True)
    # excel_data.head(10)

    avg_price=round((data['Open']+data['Previous Close'])/2,2)
    shareholding=round((data['Mkt Cap (Rs. Cr.)']/avg_price),2)
    shareholding

    parameters_dict = dict()
    def scrape_indicators(urls):
        for url in urls:
            html_content = requests.get(url).text

            # Parse HTML code for the entire site
            soup = BeautifulSoup(html_content, "lxml")
            stonks = soup.find_all("div", attrs={"id": "standalone-new"})

            body = stonks[0].find_all("tr")

            indicator_dict = dict()

            for record in body:
                indicator = record.find_all("td")[0].text.upper()
                temp_indicator_values = []
                try:
                    for table_data in (record.find_all('td')[1:-1]):
                        temp_indicator_values.append(
                            float(table_data.text.replace(',', '')))
                except ValueError:
                    continue
                indicator_dict[indicator] = temp_indicator_values

            parameters_dict.update(indicator_dict)

        yield(url, parameters_dict)


    # urls = ["https://www.moneycontrol.com/financials/itc/balance-sheetVI/ITC#ITC","https://www.moneycontrol.com/financials/itc/profit-lossVI/ITC#ITC",
            # "https://www.moneycontrol.com/financials/itc/cash-flowVI/ITC#ITC", " https://www.moneycontrol.com/financials/itc/ratiosVI/ITC#ITC"]

    # urls = ["https://www.moneycontrol.com/financials/vodafoneidealimited/balance-sheetVI/IC8#IC8","https://www.moneycontrol.com/financials/vodafoneidealimited/profit-lossVI/IC8#IC8",
            # "https://www.moneycontrol.com/financials/vodafoneidealimited/cash-flowVI/IC8#IC8", "https://www.moneycontrol.com/financials/vodafoneidealimited/ratiosVI/IC8#IC8"]
        
    urls=url2
    # urls = ["https://www.moneycontrol.com/financials/godfreyphillipsindia/balance-sheetVI/GPI#GPI","https://www.moneycontrol.com/financials/godfreyphillipsindia/profit-lossVI/GPI#GPI","https://www.moneycontrol.com/financials/godfreyphillipsindia/cash-flowVI/GPI#GPI","https://www.moneycontrol.com/financials/godfreyphillipsindia/ratiosVI/GPI#GPI"]


    for request_url, indicator_data in scrape_indicators(urls):
        # print(request_url)
        # print(indicator_data)
        print()
        # print()

    pepoints=0


    if(data['Mkt Cap (Rs. Cr.)']<20000.00 and data['Mkt Cap (Rs. Cr.)']>5000.00):
      cap="Mid Cap"
    elif (data['Mkt Cap (Rs. Cr.)']>20000.00):
      cap="Large Cap"
    else:
      cap="Small Cap"
    
    ##Indicator 1: Reserves & Surplus
    # print(indicator_data['RESERVES AND SURPLUS'])
    rands_list=[]
    count_reserves=0
    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,0,-1):
      if(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i]>0):
        rands_list.append(round(((indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i])/indicator_data['RESERVES AND SURPLUS'][i])*100,2))
        # print(indicator_data['RESERVES AND SURPLUS'][i])
        count_reserves=count_reserves+20
        pepoints+=1
        # print(indicator_data['RESERVES AND SURPLUS'][i-1] , "-" , indicator_data['RESERVES AND SURPLUS'][i],"=", round(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i],2))
      else:
        rands_list.append(round(((indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i])/indicator_data['RESERVES AND SURPLUS'][i])*100,2))
        # print(indicator_data['RESERVES AND SURPLUS'][i])
        count_reserves=count_reserves-20
        pepoints-=1
        # print(indicator_data['RESERVES AND SURPLUS'][i-1],"-",indicator_data['RESERVES AND SURPLUS'][i],"=", round(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i],2))

    rands_list=rands_list[::-1]

    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,-1,-1):
        if(indicator_data['RESERVES AND SURPLUS'][i]<0):
          count_reserves-=20
          pepoints-=1

    # print(count_reserves)
    # print(rands_list)

    ##Indicator 2: Revenue From Operations Gross
    count_revenuefromop=0
    revenue_list=[]
    # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])
    for i in range(len(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])-1,0,-1):
      if(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i]>0):
        revenue_list.append(round(((indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])/indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])*100,2))
        count_revenuefromop=count_revenuefromop+10
        # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1] , "-" , indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],"=", round(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],2))
      else:
        revenue_list.append(round(((indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])/indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])*100,2))
        count_revenuefromop=count_revenuefromop-10
        # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1],"-",indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],"=",round(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],2))

    revenue_list=revenue_list[::-1]

    for i in range(len(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])-1,-1,-1):
        if(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i]<0):
          count_revenuefromop-=15


    # print(count_revenuefromop)
    # print(revenue_list)





    ##Indicator 3: Profit/Loss for the period
    count_profitloss=0
    profit_list=[]
    # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'])
    for i in range(len(indicator_data['PROFIT/LOSS FOR THE PERIOD'])-1,0,-1):
      if(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i]>0):
        profit_list.append(round(((indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])/indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])*100,2))
        count_profitloss=count_profitloss+10
        # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1] , "-" , indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],"=", round(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],2))
      else:
        profit_list.append(round(((indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])/indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])*100,2))
        count_profitloss=count_profitloss-10
        # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1],"-",indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],"=",round(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],2))

    profit_list=profit_list[::-1]

    for i in range(len(indicator_data['PROFIT/LOSS FOR THE PERIOD'])-1,-1,-1):
        if(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i]<0):
          count_profitloss-=15

    # print(count_profitloss)
    # print(profit_list)

    # print(pepoints)

    ##Indicator 4: ROCE

    count_roce=0
    # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])
    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,0,-1):
      if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]>-1):
        count_roce+=10
        # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1] , "-" , indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],"=", round(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],2))
      else:
        count_roce-=10
        # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1],"-",indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],"=",round(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],2))

    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,-1,-1):
        if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]<10):
          count_roce-=15
          pepoints-=1
        else:
          if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]>10):
            count_roce+=15
            pepoints+=1


    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,-1,-1):
        if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]<0):
          count_roce-=25

    roce_ind=indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][0]

    # print(count_roce)

    # print(pepoints)

    ##Indicator 5: Inventory Turnover Ratio
    count_ito=0
    # print(indicator_data['INVENTORY TURNOVER RATIO (X)'])
    for i in range(len(indicator_data['INVENTORY TURNOVER RATIO (X)'])-1,0,-1):
      if(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i]>0):
        count_ito+=20
        pepoints+=1
        # print(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1] , "-" , indicator_data['INVENTORY TURNOVER RATIO (X)'][i],"=", round(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i],2))
      else:
        count_ito-=10
        pepoints-=1
        # print(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1],"-",indicator_data['INVENTORY TURNOVER RATIO (X)'][i],"=",round(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i],2))
    # print(count_ito)

    # pepoints

    ##Indicator 6: Reserves & Surplus/Equity Share Capital
    # print(indicator_data['RESERVES AND SURPLUS'])
    # print(indicator_data['TOTAL SHARE CAPITAL'])
    # print()
    rsesc_list=[]
    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,-1,-1):
            # print(indicator_data['RESERVES AND SURPLUS'][i])
            # print(indicator_data['RESERVES AND SURPLUS'][i] , "/" , indicator_data['TOTAL SHARE CAPITAL'][i],"=", round((indicator_data['RESERVES AND SURPLUS'][i]/indicator_data['TOTAL SHARE CAPITAL'][i]),2))
            rsesc_list.append(round(indicator_data['RESERVES AND SURPLUS'][i]/indicator_data['TOTAL SHARE CAPITAL'][i],2))

    # print()
    rsesc_list=rsesc_list[::-1]
    # print(rsesc_list)
    # print()
    count_rec=0
    for i in range(len(rsesc_list)-1,0,-1):
      if(rsesc_list[i-1]-rsesc_list[i]>0):
        count_rec+=20
        pepoints+=1
        # print(rsesc_list[i-1] , "-" , rsesc_list[i],"=", round(rsesc_list[i-1]-rsesc_list[i],2))
      else:
        count_rec-=10
        pepoints-=1
        # print(rsesc_list[i-1],"-",rsesc_list[i],"=",round(rsesc_list[i-1]-rsesc_list[i],2))


    for i in range(len(rsesc_list)-1,-1,-1):
        if(rsesc_list[i]<10):
          count_rec-=15

    for i in range(len(rsesc_list)-1,-1,-1):
        if(rsesc_list[i]<0):
          count_rec-=20


    # print(rsesc_list)
    # print(count_rec)



    # pepoints





    ## Indicator 7: Trade Receivables in Current Assets
    # print(indicator_data['TOTAL CURRENT ASSETS'])
    # print(indicator_data['TRADE RECEIVABLES'])

    trade_list=[]
    bonus=0
    for i in range(len(indicator_data['TOTAL CURRENT ASSETS'])-1,-1,-1):
              # print(indicator_data['TOTAL CURRENT ASSETS'][i] , "/" , indicator_data['TRADE RECEIVABLES'][i],"=", round((indicator_data['TOTAL CURRENT ASSETS'][i]/indicator_data['TRADE RECEIVABLES'][i]),2))
              if(round((indicator_data['TOTAL CURRENT ASSETS'][i]/indicator_data['TRADE RECEIVABLES'][i]),2)<50.00):
                bonus+=10
              else:
                bonus-=5
    # print(bonus)

    # print(pepoints)

    ## Indicator 8: Earnings Before Interest Tax

    indicator_data['PBIT MARGIN (%)']
    count_ebit=0
    # print(indicator_data['PBIT MARGIN (%)'])
    for i in range(len(indicator_data['PBIT MARGIN (%)'])-1,0,-1):
      if(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i]>0):
        count_ebit+=10
        pepoints+=1
        # print(indicator_data['PBIT MARGIN (%)'][i-1] , "-" , indicator_data['PBIT MARGIN (%)'][i],"=", round(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i],2))
      else:
        count_ebit-=5
        pepoints+=1
        # print(indicator_data['PBIT MARGIN (%)'][i-1],"-",indicator_data['PBIT MARGIN (%)'][i],"=",round(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i],2))

    for i in range(len(indicator_data['PBIT MARGIN (%)'])-1,-1,-1):
        if(indicator_data['PBIT MARGIN (%)'][i]<0):
          count_ebit-=20


    # print(count_ebit)

    # print(pepoints)

    ## Indicator 9: Debt To Equity Ratio

    count_debt=0
    # print(indicator_data["TOTAL DEBT/EQUITY (X)"])

    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,0,-1):
      if(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i]>0):
        count_debt+=10
        # print(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1] , "-" , indicator_data['TOTAL DEBT/EQUITY (X)'][i],"=", round(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i],2))
      elif (indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i]==0):
            count_debt+=10
      else:
        count_debt-=5
        # print(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1],"-",indicator_data['TOTAL DEBT/EQUITY (X)'][i],"=",round(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i],2))
      
    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,-1,-1):
        if(indicator_data['TOTAL DEBT/EQUITY (X)'][i]>2):
          count_debt-=15
          pepoints-=1
        else:
          count_debt+=15
          pepoints+=1

    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,-1,-1):
        if(indicator_data['TOTAL DEBT/EQUITY (X)'][i]<0):
          count_debt-=20


    # print(count_debt)

    # pepoints

    ## Indicator 10: Current Ratio
    indicator_data['CURRENT RATIO (X)']

    count_currentratio=0
    # print(indicator_data["CURRENT RATIO (X)"])

    for i in range(len(indicator_data['CURRENT RATIO (X)'])-1,0,-1):
      if(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i]>0):
        count_currentratio+=10
        # print(indicator_data['CURRENT RATIO (X)'][i-1] , "-" , indicator_data['CURRENT RATIO (X)'][i],"=", round(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i],2))
      elif ((indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i])==0):
            count_currentratio+=10
      else:
        count_currentratio-=5
        # print(indicator_data['CURRENT RATIO (X)'][i-1],"-",indicator_data['CURRENT RATIO (X)'][i],"=",round(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i],2))

    for i in range(len(indicator_data['CURRENT RATIO (X)'])-1,-1,-1):
        if(indicator_data['CURRENT RATIO (X)'][i]<2):
          # print(indicator_data['CURRENT RATIO (X)'][i])
          count_currentratio-=10
          pepoints=pepoints-0.5
        elif (indicator_data['CURRENT RATIO (X)'][i]<1):
          count_currentratio-=20
          pepoints=pepoints-1
        else:
          count_currentratio+=10
          pepoints+=1


    # print(count_currentratio)

    # pepoints

    ##Indicator 11: Net Cashflow From Operating Activities
    count_netcashflow=0
    cashflow_list=[]
    # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])
    for i in range(len(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])-1,0,-1):
      if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]==0):
        indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]=indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]
      if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]>0):
        cashflow_list.append(round(((indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])/indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])*100,2))
        count_netcashflow=count_netcashflow+10
        pepoints+=1
        # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1] , "-" , indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],"=", round(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],2))
      else:
        cashflow_list.append(round(((indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])/indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])*100,2))
        count_netcashflow=count_netcashflow-10
        pepoints-=1
        # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1],"-",indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],"=",round(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],2))

    cashflow_list=cashflow_list[::-1]

    for i in range(len(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])-1,-1,-1):
        if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]<0):
          count_netcashflow-=15

    # print(count_netcashflow)
    # print(cashflow_list)

    ##Indicator 12: Free cash Flow
    stock_position=None
    stock_data=excel_data.values.tolist()
    stock_data
    for i in stock_data:
      for j in i:
        j=str(j)
        if(stock_name in j):
          # print(j.index(i))
          stock_position=stock_data.index(i)
          # print(j)
          break
          
    # print(stock_position)

    freecash_list=[]
    for i in range(5):
      freecash_list.append(stock_data[stock_position][i])
    # print(freecash_list)

    count_freecash=0
    for i in range(1,len(freecash_list)):
      if(freecash_list[i]-freecash_list[i-1]>0):
        # print(freecash_list[i],"-",freecash_list[i-1],"=",freecash_list[i]-freecash_list[i-1])
        count_freecash+=20
        pepoints+=1
      else:
        # print(freecash_list[i],"-",freecash_list[i-1],"=",freecash_list[i]-freecash_list[i-1])
        count_freecash-=10
        pepoints-=1

    for i in range(0,len(freecash_list)):
      if(freecash_list[i]<0):
        count_freecash-=20
        pepoints-=1

    # print(count_freecash)

    ##Indicator 15: Net sales from operations

    count_revenuefromopqt=0
    revenueqt_list=[]
    # print(indicator_data['NET SALES/INCOME FROM OPERATIONS'])
    for i in range(len(indicator_data['NET SALES/INCOME FROM OPERATIONS'])-1,0,-1):
      if(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1]-indicator_data['NET SALES/INCOME FROM OPERATIONS'][i]>0):
        revenueqt_list.append(round(((indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1]-indicator_data['NET SALES/INCOME FROM OPERATIONS'][i])/indicator_data['NET SALES/INCOME FROM OPERATIONS'][i])*100,2))
        count_revenuefromopqt=count_revenuefromopqt+15
        pepoints=pepoints+1
        # print(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1] , "-" , indicator_data['NET SALES/INCOME FROM OPERATIONS'][i],"=", round(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1]-indicator_data['NET SALES/INCOME FROM OPERATIONS'][i],2))
      else:
        revenueqt_list.append(round(((indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1]-indicator_data['NET SALES/INCOME FROM OPERATIONS'][i])/indicator_data['NET SALES/INCOME FROM OPERATIONS'][i])*100,2))
        count_revenuefromopqt=count_revenuefromopqt-15
        pepoints=pepoints-1
        # print(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1],"-",indicator_data['NET SALES/INCOME FROM OPERATIONS'][i],"=",round(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1]-indicator_data['NET SALES/INCOME FROM OPERATIONS'][i],2))

    revenueqt_list=revenueqt_list[::-1]

    for i in range(len(indicator_data['NET SALES/INCOME FROM OPERATIONS'])-1,-1,-1):
        if(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i]<0):
          count_revenuefromopqt-=15
          pepoints=pepoints-1

      ##Indicator 16: Net profit/loss
    count_profitqt=0
    profitqt_list=[]
    # print(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'])
    for i in range(len(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'])-1,0,-1):
      if(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1]-indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i]>0):
        profitqt_list.append(round(((indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1]-indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i])/indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i])*100,2))
        count_profitqt=count_profitqt+10
        pepoints=pepoints+1
        # print(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1] , "-" , indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i],"=", round(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1]-indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i],2))
      else:
        profitqt_list.append(round(((indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1]-indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i])/indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i])*100,2))
        count_profitqt=count_profitqt-10
        pepoints=pepoints-1
        # print(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1],"-",indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i],"=",round(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1]-indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i],2))

    profitqt_list=profitqt_list[::-1]

    for i in range(len(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'])-1,-1,-1):
        if(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i]<0):
          count_profitqt-=5
          pepoints=pepoints-1


    
    ##Indicator 13: Pledged shares
    for i in stock_data:
      for j in i:
        j=str(j)
        if(stock_name in j):
          # print(j.index(i))
          stock_position=stock_data.index(i)
          # print(j)
          break

    pledged_shares=stock_data[stock_position][15]
    # print(pledged_shares)
    stock_name=stock_data[stock_position][5]
    count_pshares=1
    if(pledged_shares>0):
      pepoints-=1
      count_pshares=count_pshares*-10
    else:
      pepoints+=1
      count_pshares=count_pshares*10


    ##Entities: Alpha & Beta
    alpha=round(stock_data[stock_position][9],2)
    # print("Alpha",alpha)
    beta=round(stock_data[stock_position][10],2)
    # print("Beta",beta)
    divy=data['Dividend Yield']
    # print("Dividend Yield",divy)

    cagr=stock_data[stock_position][8]
    # print("CAGR:", cagr)

    # pepoints

    ##Indicator 14: PE Ratio
    st_pe=data['TTM PE']
    se_pe=data['Sector PE']
    # print("Stock PE", st_pe)
    # print("Sector PE",se_pe)
    count_pe=1
    if(data['TTM PE']=="--"):
        count_pe=pepoints*12
    elif(data['TTM PE']<data['Sector PE']):
      count_pe=pepoints*15
    else:
      count_pe=pepoints*10

    # print(count_pe)



    #Predicting Target Price 
    if(stock_name=='Dixon Technologies (India) Ltd'):
      flag=0
      target_price=None
      entry_price=None
      # int(indicator_data['ENTERPRISE VALUE (CR.)'])
      # print(indicator_data['EV/EBITDA (X)'])
      # print()

      ebitda_list=[]
      for i in range(len(indicator_data['ENTERPRISE VALUE (CR.)'])-2,-1,-1):
              if(indicator_data['ENTERPRISE VALUE (CR.)'][i]==0):

                flag=1
                break

              # print(indicator_data['ENTERPRISE VALUE (CR.)'][i] , "/" , indicator_data['EV/EBITDA (X)'][i],"=", round((indicator_data['ENTERPRISE VALUE (CR.)'][i]/indicator_data['EV/EBITDA (X)'][i]),2))
              ebitda_list.append(round(indicator_data['ENTERPRISE VALUE (CR.)'][i]/indicator_data['EV/EBITDA (X)'][i],2))
      if(flag==0):

        # print()
        ebitda_list=ebitda_list[::-1]

        # print(ebitda_list)
        growth_ebitda=[]
        for i in range(len(ebitda_list)-1,0,-1):
          # print(ebitda_list[i-1],"-",ebitda_list[i],"=",round(ebitda_list[i-1]-ebitda_list[i],2), "   ",round((ebitda_list[i-1]-ebitda_list[i])/ebitda_list[i]*100,2))
          growth_ebitda.append(round((ebitda_list[i-1]-ebitda_list[i])/ebitda_list[i]*100,2))

        # print()
        growth_ebitda=growth_ebitda[::-1]

        # print(growth_ebitda)
        # print()
        grow=0
        for i in range(len(growth_ebitda)-1):
          grow=grow+growth_ebitda[i]

        growth=round(grow/3,2)
        # print("Growth for last three years:", growth)
        # print()
        # print(ebitda_list[0])
        pred_ebitda=round(((100+growth)*ebitda_list[0])/100,2)

        # print("Predicted Ebitda:",pred_ebitda)


        # print()
        forecasted_ev= round(pred_ebitda*indicator_data['EV/EBITDA (X)'][0],2)

        # print()
        forecasted_ev=forecasted_ev-indicator_data['LONG TERM BORROWINGS'][0]
        forecasted_ev

        # print("Forecasted EV:",forecasted_ev)
      
        target_price=round(forecasted_ev/shareholding,2)
        # print("Target Price:", target_price)

        entry_price=round(target_price*0.75,2)
        # print("Good Buy Price:",entry_price)

      
    else:
    
    
      flag=0
      target_price=None
      entry_price=None
      # int(indicator_data['ENTERPRISE VALUE (CR.)'])
      # print(indicator_data['EV/EBITDA (X)'])

      ebitda_list=[]
      for i in range(len(indicator_data['ENTERPRISE VALUE (CR.)'])-1,-1,-1):
              if(indicator_data['ENTERPRISE VALUE (CR.)'][i]==0):

                flag=1
                break

              # print(indicator_data['ENTERPRISE VALUE (CR.)'][i] , "/" , indicator_data['EV/EBITDA (X)'][i],"=", round((indicator_data['ENTERPRISE VALUE (CR.)'][i]/indicator_data['EV/EBITDA (X)'][i]),2))
              ebitda_list.append(round(indicator_data['ENTERPRISE VALUE (CR.)'][i]/indicator_data['EV/EBITDA (X)'][i],2))
      if(flag==0):

        ebitda_list=ebitda_list[::-1]

        # print(ebitda_list)
        growth_ebitda=[]
        for i in range(len(ebitda_list)-1,0,-1):
          # print(ebitda_list[i-1],"-",ebitda_list[i],"=",round(ebitda_list[i-1]-ebitda_list[i],2), "   ",round((ebitda_list[i-1]-ebitda_list[i])/ebitda_list[i]*100,2))
          growth_ebitda.append(round((ebitda_list[i-1]-ebitda_list[i])/ebitda_list[i]*100,2))

        growth_ebitda=growth_ebitda[::-1]

        # print(growth_ebitda)
        grow=0
        for i in range(len(growth_ebitda)-1):
          grow=grow+growth_ebitda[i]

        growth=round(grow/3,2)
        # print("Growth for last three years:", growth)
        # print(ebitda_list[0])
        pred_ebitda=round(((100+growth)*ebitda_list[0])/100,2)

        # print("Predicted Ebitda:",pred_ebitda)


        forecasted_ev= round(pred_ebitda*indicator_data['EV/EBITDA (X)'][0],2)

        forecasted_ev=forecasted_ev-indicator_data['LONG TERM BORROWINGS'][0]
        forecasted_ev

        # print("Forecasted EV:",forecasted_ev)
        target_price=round(forecasted_ev/shareholding,2)
        # print("Target Price:", target_price)

        entry_price=round(target_price*0.75,2)
        # print("Good Buy Price:",entry_price)

    points=bonus+count_currentratio+count_debt+count_ebit+count_ito+count_profitloss+count_rec+count_reserves+count_revenuefromop+count_roce+count_netcashflow+count_pe+count_freecash+count_pshares+count_revenuefromopqt+count_profitqt
    final_list=[]
    per_elec="7%"
    industry="Electronics"



    final_list.append(stock_name)
    final_list.append(cap)
    final_list.append(roce_ind)
    final_list.append(points)
    final_list.append(per_elec)
    final_list.append(industry)
    
    return final_list

  table=[]
  url_list=[]
        
  url_list=[[["VOLTAS"],['https://www.moneycontrol.com/india/stockpricequote/diversified/voltas/V'],['https://www.moneycontrol.com/financials/voltas/balance-sheetVI/V#V','https://www.moneycontrol.com/financials/voltas/profit-lossVI/V#V','https://www.moneycontrol.com/financials/voltas/results/quarterly-results/V#V','https://www.moneycontrol.com/financials/voltas/cash-flowVI/V#V','https://www.moneycontrol.com/financials/voltas/ratiosVI/V#V']],
            [['CROMPTON'],['https://www.moneycontrol.com/india/stockpricequote/electricals/cromptongreavesconsumerelectrical/CGC01'],['https://www.moneycontrol.com/financials/cromptongreavesconsumerelectrical/balance-sheetVI/CGC01#CGC01','https://www.moneycontrol.com/financials/cromptongreavesconsumerelectrical/profit-lossVI/CGC01#CGC01','https://www.moneycontrol.com/financials/cromptongreavesconsumerelectrical/results/quarterly-results/CGC01#CGC01','https://www.moneycontrol.com/financials/cromptongreavesconsumerelectrical/cash-flowVI/CGC01#CGC01','https://www.moneycontrol.com/financials/cromptongreavesconsumerelectrical/ratiosVI/CGC01#CGC01']],
            [['WHIRLPOOL'],['https://www.moneycontrol.com/india/stockpricequote/consumergoodswhitegoods/whirlpoolindia/WI'],['https://www.moneycontrol.com/financials/whirlpoolindia/balance-sheetVI/WI#WI','https://www.moneycontrol.com/financials/whirlpoolindia/profit-lossVI/WI#WI','https://www.moneycontrol.com/financials/whirlpoolindia/results/quarterly-results/WI#WI','https://www.moneycontrol.com/financials/whirlpoolindia/ratiosVI/WI#WI','https://www.moneycontrol.com/financials/whirlpoolindia/cash-flowVI/WI#WI']],
            [['DIXON'],['https://www.moneycontrol.com/india/stockpricequote/electricals/dixontechnologies/DT07'],['https://www.moneycontrol.com/financials/dixontechnologies/balance-sheetVI/DT07#DT07','https://www.moneycontrol.com/financials/dixontechnologies/profit-lossVI/DT07#DT07','https://www.moneycontrol.com/financials/dixontechnologies/results/quarterly-results/DT07#DT07','https://www.moneycontrol.com/financials/dixontechnologies/cash-flowVI/DT07#DT07','https://www.moneycontrol.com/financials/dixontechnologies/ratiosVI/DT07#DT07']],
            [['BAJAJELEC'],['https://www.moneycontrol.com/india/stockpricequote/domesticappliances/bajajelectricals/BE'],['https://www.moneycontrol.com/financials/bajajelectricals/balance-sheetVI/BE#BE','https://www.moneycontrol.com/financials/bajajelectricals/profit-lossVI/BE#BE','https://www.moneycontrol.com/financials/bajajelectricals/results/quarterly-results/BE#BE','https://www.moneycontrol.com/financials/bajajelectricals/cash-flowVI/BE#BE','https://www.moneycontrol.com/financials/bajajelectricals/ratiosVI/BE#BE']]]

  for i in range(len(url_list)):
    list_input=[]
    for j in url_list[i]:
      list_input.append(j)
    stockname=list_input[0][0]
    url1=list_input[1][0]
    url2=list_input[2]
    # print(stockname,url1,url2)
    final_list=elec(stockname,url1,url2)
    table.append(final_list)
  df=pd.DataFrame(table,columns=['stock_name','cap','roce_ind','points','per_elec','industry'])
  df.sort_values(by='points', ascending=False,inplace=True)
  stock=[]



  df_final=df[['stock_name','cap','roce_ind','per_elec','industry']]
  
  stock= df_final[:1].values.tolist()
  
  portfolio.append(stock) 

  def itcon(stockname,url1,url2):


    stock_name=stockname
    url = url1

    # Make a GET request to fetch the raw HTML content
    html_content = requests.get(url).text

    # Parse HTML code for the entire site
    soup = BeautifulSoup(html_content, "lxml")
    # print(soup)

    mc = soup.find_all("div", attrs={"class": "oview_table"})
    # print("Number of tables on site: ",len(mc))

    data = dict()
    for tb in mc[:4]:
        body = tb.find_all("tr")
        for i in body:
            vals = i.find_all("td")
            title = vals[0].text.strip()
            try:
                value = float(vals[1].text.replace(',',''))
            except ValueError:
                value = vals[1].text.replace(',','')
            data[title] = value
    # print(data)



    excel_data=pd.read_csv(r"C:\Users\mohil\OneDrive\Desktop\STOCKS_new.csv")
    excel_data.drop(columns=['Name (largecap alpha.csv)', 'Ticker (largecap alpha.csv)'],inplace=True)
    # excel_data.head(10)

    avg_price=round((data['Open']+data['Previous Close'])/2,2)
    shareholding=round((data['Mkt Cap (Rs. Cr.)']/avg_price),2)
    shareholding

    parameters_dict = dict()
    def scrape_indicators(urls):
        for url in urls:
            html_content = requests.get(url).text

            # Parse HTML code for the entire site
            soup = BeautifulSoup(html_content, "lxml")
            stonks = soup.find_all("div", attrs={"id": "standalone-new"})

            body = stonks[0].find_all("tr")

            indicator_dict = dict()

            for record in body:
                indicator = record.find_all("td")[0].text.upper()
                temp_indicator_values = []
                try:
                    for table_data in (record.find_all('td')[1:-1]):
                        temp_indicator_values.append(
                            float(table_data.text.replace(',', '')))
                except ValueError:
                    continue
                indicator_dict[indicator] = temp_indicator_values

            parameters_dict.update(indicator_dict)

        yield(url, parameters_dict)


    # urls = ["https://www.moneycontrol.com/financials/itc/balance-sheetVI/ITC#ITC","https://www.moneycontrol.com/financials/itc/profit-lossVI/ITC#ITC",
            # "https://www.moneycontrol.com/financials/itc/cash-flowVI/ITC#ITC", " https://www.moneycontrol.com/financials/itc/ratiosVI/ITC#ITC"]

    # urls = ["https://www.moneycontrol.com/financials/vodafoneidealimited/balance-sheetVI/IC8#IC8","https://www.moneycontrol.com/financials/vodafoneidealimited/profit-lossVI/IC8#IC8",
            # "https://www.moneycontrol.com/financials/vodafoneidealimited/cash-flowVI/IC8#IC8", "https://www.moneycontrol.com/financials/vodafoneidealimited/ratiosVI/IC8#IC8"]
        
    urls=url2
    # urls = ["https://www.moneycontrol.com/financials/godfreyphillipsindia/balance-sheetVI/GPI#GPI","https://www.moneycontrol.com/financials/godfreyphillipsindia/profit-lossVI/GPI#GPI","https://www.moneycontrol.com/financials/godfreyphillipsindia/cash-flowVI/GPI#GPI","https://www.moneycontrol.com/financials/godfreyphillipsindia/ratiosVI/GPI#GPI"]


    for request_url, indicator_data in scrape_indicators(urls):
        # print(request_url)
        # print(indicator_data)
        print()
        # print()

    pepoints=0


    if(data['Mkt Cap (Rs. Cr.)']<20000.00 and data['Mkt Cap (Rs. Cr.)']>5000.00):
      cap="Mid Cap"
    elif (data['Mkt Cap (Rs. Cr.)']>20000.00):
      cap="Large Cap"
    else:
      cap="Small Cap"
    
    ##Indicator 1: Reserves & Surplus
    # print(indicator_data['RESERVES AND SURPLUS'])
    rands_list=[]
    count_reserves=0
    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,0,-1):
      if(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i]>0):
        rands_list.append(round(((indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i])/indicator_data['RESERVES AND SURPLUS'][i])*100,2))
        # print(indicator_data['RESERVES AND SURPLUS'][i])
        count_reserves=count_reserves+20
        pepoints+=1
        # print(indicator_data['RESERVES AND SURPLUS'][i-1] , "-" , indicator_data['RESERVES AND SURPLUS'][i],"=", round(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i],2))
      else:
        rands_list.append(round(((indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i])/indicator_data['RESERVES AND SURPLUS'][i])*100,2))
        # print(indicator_data['RESERVES AND SURPLUS'][i])
        count_reserves=count_reserves-20
        pepoints-=1
        # print(indicator_data['RESERVES AND SURPLUS'][i-1],"-",indicator_data['RESERVES AND SURPLUS'][i],"=", round(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i],2))

    rands_list=rands_list[::-1]

    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,-1,-1):
        if(indicator_data['RESERVES AND SURPLUS'][i]<0):
          count_reserves-=20
          pepoints-=1

    # print(count_reserves)
    # print(rands_list)

    ##Indicator 2: Revenue From Operations Gross
    count_revenuefromop=0
    revenue_list=[]
    # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])
    for i in range(len(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])-1,0,-1):
      if(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i]>0):
        revenue_list.append(round(((indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])/indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])*100,2))
        count_revenuefromop=count_revenuefromop+10
        # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1] , "-" , indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],"=", round(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],2))
      else:
        revenue_list.append(round(((indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])/indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])*100,2))
        count_revenuefromop=count_revenuefromop-10
        # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1],"-",indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],"=",round(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],2))

    revenue_list=revenue_list[::-1]

    for i in range(len(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])-1,-1,-1):
        if(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i]<0):
          count_revenuefromop-=15


    # print(count_revenuefromop)
    # print(revenue_list)





    ##Indicator 3: Profit/Loss for the period
    count_profitloss=0
    profit_list=[]
    # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'])
    for i in range(len(indicator_data['PROFIT/LOSS FOR THE PERIOD'])-1,0,-1):
      if(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i]>0):
        profit_list.append(round(((indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])/indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])*100,2))
        count_profitloss=count_profitloss+10
        # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1] , "-" , indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],"=", round(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],2))
      else:
        profit_list.append(round(((indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])/indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])*100,2))
        count_profitloss=count_profitloss-10
        # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1],"-",indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],"=",round(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],2))

    profit_list=profit_list[::-1]

    for i in range(len(indicator_data['PROFIT/LOSS FOR THE PERIOD'])-1,-1,-1):
        if(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i]<0):
          count_profitloss-=15

    # print(count_profitloss)
    # print(profit_list)

    # print(pepoints)

    ##Indicator 4: ROCE

    count_roce=0
    # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])
    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,0,-1):
      if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]>-1):
        count_roce+=10
        # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1] , "-" , indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],"=", round(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],2))
      else:
        count_roce-=10
        # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1],"-",indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],"=",round(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],2))

    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,-1,-1):
        if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]<10):
          count_roce-=15
          pepoints-=1
        else:
          if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]>10):
            count_roce+=15
            pepoints+=1


    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,-1,-1):
        if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]<0):
          count_roce-=25

    roce_ind=indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][0]

    # print(count_roce)

    # print(pepoints)

    ##Indicator 5: Inventory Turnover Ratio
    count_ito=0
    # print(indicator_data['INVENTORY TURNOVER RATIO (X)'])
    for i in range(len(indicator_data['INVENTORY TURNOVER RATIO (X)'])-1,0,-1):
      if(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i]>0):
        count_ito+=20
        pepoints+=1
        # print(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1] , "-" , indicator_data['INVENTORY TURNOVER RATIO (X)'][i],"=", round(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i],2))
      else:
        count_ito-=10
        pepoints-=1
        # print(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1],"-",indicator_data['INVENTORY TURNOVER RATIO (X)'][i],"=",round(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i],2))
    # print(count_ito)

    # pepoints

    ##Indicator 6: Reserves & Surplus/Equity Share Capital
    # print(indicator_data['RESERVES AND SURPLUS'])
    # print(indicator_data['TOTAL SHARE CAPITAL'])
    # print()
    rsesc_list=[]
    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,-1,-1):
            # print(indicator_data['RESERVES AND SURPLUS'][i])
            # print(indicator_data['RESERVES AND SURPLUS'][i] , "/" , indicator_data['TOTAL SHARE CAPITAL'][i],"=", round((indicator_data['RESERVES AND SURPLUS'][i]/indicator_data['TOTAL SHARE CAPITAL'][i]),2))
            rsesc_list.append(round(indicator_data['RESERVES AND SURPLUS'][i]/indicator_data['TOTAL SHARE CAPITAL'][i],2))

    # print()
    rsesc_list=rsesc_list[::-1]
    # print(rsesc_list)
    # print()
    count_rec=0
    for i in range(len(rsesc_list)-1,0,-1):
      if(rsesc_list[i-1]-rsesc_list[i]>0):
        count_rec+=20
        pepoints+=1
        # print(rsesc_list[i-1] , "-" , rsesc_list[i],"=", round(rsesc_list[i-1]-rsesc_list[i],2))
      else:
        count_rec-=10
        pepoints-=1
        # print(rsesc_list[i-1],"-",rsesc_list[i],"=",round(rsesc_list[i-1]-rsesc_list[i],2))


    for i in range(len(rsesc_list)-1,-1,-1):
        if(rsesc_list[i]<10):
          count_rec-=15

    for i in range(len(rsesc_list)-1,-1,-1):
        if(rsesc_list[i]<0):
          count_rec-=20


    # print(rsesc_list)
    # print(count_rec)



    # pepoints





    ## Indicator 7: Trade Receivables in Current Assets
    # print(indicator_data['TOTAL CURRENT ASSETS'])
    # print(indicator_data['TRADE RECEIVABLES'])

    trade_list=[]
    bonus=0
    for i in range(len(indicator_data['TOTAL CURRENT ASSETS'])-1,-1,-1):
              # print(indicator_data['TOTAL CURRENT ASSETS'][i] , "/" , indicator_data['TRADE RECEIVABLES'][i],"=", round((indicator_data['TOTAL CURRENT ASSETS'][i]/indicator_data['TRADE RECEIVABLES'][i]),2))
              if(indicator_data['TRADE RECEIVABLES'][i]==0):
                bonus+=10
              else:
                if(round((indicator_data['TOTAL CURRENT ASSETS'][i]/indicator_data['TRADE RECEIVABLES'][i]),2)<50.00):
                  bonus+=10
                else:
                  bonus-=5
    # print(bonus)

    # print(pepoints)

    ## Indicator 8: Earnings Before Interest Tax

    indicator_data['PBIT MARGIN (%)']
    count_ebit=0
    # print(indicator_data['PBIT MARGIN (%)'])
    for i in range(len(indicator_data['PBIT MARGIN (%)'])-1,0,-1):
      if(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i]>0):
        count_ebit+=10
        pepoints+=1
        # print(indicator_data['PBIT MARGIN (%)'][i-1] , "-" , indicator_data['PBIT MARGIN (%)'][i],"=", round(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i],2))
      else:
        count_ebit-=5
        pepoints+=1
        # print(indicator_data['PBIT MARGIN (%)'][i-1],"-",indicator_data['PBIT MARGIN (%)'][i],"=",round(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i],2))

    for i in range(len(indicator_data['PBIT MARGIN (%)'])-1,-1,-1):
        if(indicator_data['PBIT MARGIN (%)'][i]<0):
          count_ebit-=20


    # print(count_ebit)

    # print(pepoints)

    ## Indicator 9: Debt To Equity Ratio

    count_debt=0
    # print(indicator_data["TOTAL DEBT/EQUITY (X)"])

    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,0,-1):
      if(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i]>0):
        count_debt+=10
        # print(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1] , "-" , indicator_data['TOTAL DEBT/EQUITY (X)'][i],"=", round(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i],2))
      elif (indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i]==0):
            count_debt+=10
      else:
        count_debt-=5
        # print(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1],"-",indicator_data['TOTAL DEBT/EQUITY (X)'][i],"=",round(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i],2))
      
    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,-1,-1):
        if(indicator_data['TOTAL DEBT/EQUITY (X)'][i]>2):
          count_debt-=15
          pepoints-=1
        else:
          count_debt+=15
          pepoints+=1

    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,-1,-1):
        if(indicator_data['TOTAL DEBT/EQUITY (X)'][i]<0):
          count_debt-=20


    # print(count_debt)

    # pepoints

    ## Indicator 10: Current Ratio
    indicator_data['CURRENT RATIO (X)']

    count_currentratio=0
    # print(indicator_data["CURRENT RATIO (X)"])

    for i in range(len(indicator_data['CURRENT RATIO (X)'])-1,0,-1):
      if(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i]>0):
        count_currentratio+=10
        # print(indicator_data['CURRENT RATIO (X)'][i-1] , "-" , indicator_data['CURRENT RATIO (X)'][i],"=", round(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i],2))
      elif ((indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i])==0):
            count_currentratio+=10
      else:
        count_currentratio-=5
        # print(indicator_data['CURRENT RATIO (X)'][i-1],"-",indicator_data['CURRENT RATIO (X)'][i],"=",round(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i],2))

    for i in range(len(indicator_data['CURRENT RATIO (X)'])-1,-1,-1):
        if(indicator_data['CURRENT RATIO (X)'][i]<2):
          # print(indicator_data['CURRENT RATIO (X)'][i])
          count_currentratio-=10
          pepoints=pepoints-0.5
        elif (indicator_data['CURRENT RATIO (X)'][i]<1):
          count_currentratio-=20
          pepoints=pepoints-1
        else:
          count_currentratio+=10
          pepoints+=1


    # print(count_currentratio)

    # pepoints

    ##Indicator 11: Net Cashflow From Operating Activities
    count_netcashflow=0
    cashflow_list=[]
    # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])
    for i in range(len(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])-1,0,-1):
      if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]==0):
        indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]=indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]
      if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]>0):
        cashflow_list.append(round(((indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])/indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])*100,2))
        count_netcashflow=count_netcashflow+10
        pepoints+=1
        # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1] , "-" , indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],"=", round(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],2))
      else:
        cashflow_list.append(round(((indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])/indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])*100,2))
        count_netcashflow=count_netcashflow-10
        pepoints-=1
        # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1],"-",indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],"=",round(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],2))

    cashflow_list=cashflow_list[::-1]

    for i in range(len(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])-1,-1,-1):
        if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]<0):
          count_netcashflow-=15

    # print(count_netcashflow)
    # print(cashflow_list)

    ##Indicator 12: Free cash Flow
    stock_position=None
    stock_data=excel_data.values.tolist()
    stock_data
    for i in stock_data:
      for j in i:
        j=str(j)
        if(stock_name in j):
          # print(j.index(i))
          stock_position=stock_data.index(i)
          # print(j)
          break
          
    # print(stock_position)

    freecash_list=[]
    for i in range(5):
      freecash_list.append(stock_data[stock_position][i])
    # print(freecash_list)

    count_freecash=0
    for i in range(1,len(freecash_list)):
      if(freecash_list[i]-freecash_list[i-1]>0):
        # print(freecash_list[i],"-",freecash_list[i-1],"=",freecash_list[i]-freecash_list[i-1])
        count_freecash+=20
        pepoints+=1
      else:
        # print(freecash_list[i],"-",freecash_list[i-1],"=",freecash_list[i]-freecash_list[i-1])
        count_freecash-=10
        pepoints-=1

    for i in range(0,len(freecash_list)):
      if(freecash_list[i]<0):
        count_freecash-=20
        pepoints-=1

    # print(count_freecash)

    ##Indicator 15: Net sales from operations

    count_revenuefromopqt=0
    revenueqt_list=[]
    # print(indicator_data['NET SALES/INCOME FROM OPERATIONS'])
    for i in range(len(indicator_data['NET SALES/INCOME FROM OPERATIONS'])-1,0,-1):
      if(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1]-indicator_data['NET SALES/INCOME FROM OPERATIONS'][i]>0):
        revenueqt_list.append(round(((indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1]-indicator_data['NET SALES/INCOME FROM OPERATIONS'][i])/indicator_data['NET SALES/INCOME FROM OPERATIONS'][i])*100,2))
        count_revenuefromopqt=count_revenuefromopqt+15
        pepoints=pepoints+1
        # print(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1] , "-" , indicator_data['NET SALES/INCOME FROM OPERATIONS'][i],"=", round(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1]-indicator_data['NET SALES/INCOME FROM OPERATIONS'][i],2))
      else:
        revenueqt_list.append(round(((indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1]-indicator_data['NET SALES/INCOME FROM OPERATIONS'][i])/indicator_data['NET SALES/INCOME FROM OPERATIONS'][i])*100,2))
        count_revenuefromopqt=count_revenuefromopqt-15
        pepoints=pepoints-1
        # print(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1],"-",indicator_data['NET SALES/INCOME FROM OPERATIONS'][i],"=",round(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1]-indicator_data['NET SALES/INCOME FROM OPERATIONS'][i],2))

    revenueqt_list=revenueqt_list[::-1]

    for i in range(len(indicator_data['NET SALES/INCOME FROM OPERATIONS'])-1,-1,-1):
        if(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i]<0):
          count_revenuefromopqt-=15
          pepoints=pepoints-1

      ##Indicator 16: Net profit/loss
    count_profitqt=0
    profitqt_list=[]
    # print(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'])
    for i in range(len(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'])-1,0,-1):
      if(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1]-indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i]>0):
        profitqt_list.append(round(((indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1]-indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i])/indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i])*100,2))
        count_profitqt=count_profitqt+10
        pepoints=pepoints+1
        # print(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1] , "-" , indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i],"=", round(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1]-indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i],2))
      else:
        profitqt_list.append(round(((indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1]-indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i])/indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i])*100,2))
        count_profitqt=count_profitqt-10
        pepoints=pepoints-1
        # print(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1],"-",indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i],"=",round(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1]-indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i],2))

    profitqt_list=profitqt_list[::-1]

    for i in range(len(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'])-1,-1,-1):
        if(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i]<0):
          count_profitqt-=5
          pepoints=pepoints-1


    ##Indicator 17: Fixed asset turnover ratio
    fa_list=[]
    for i in range(len(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])-1,-1,-1):
            # print(indicator_data['RESERVES AND SURPLUS'][i])
            # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i] , "/" , indicator_data['FIXED ASSETS'][i],"=", round((indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i]/indicator_data['FIXED ASSETS'][i]),2))
            fa_list.append(round(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i]/indicator_data['FIXED ASSETS'][i],2))

    # print()
    fa_list=fa_list[::-1]
    # print(fa_list)
    # print()
    count_fa=0
    for i in range(len(fa_list)-1,0,-1):
      if(fa_list[i-1]-fa_list[i]>-0.15):
        count_fa+=10
        pepoints+=1
        # print(fa_list[i-1] , "-" , fa_list[i],"=", round(fa_list[i-1]-fa_list[i],2))
      else:
        count_fa-=10
        pepoints-=1
        # print(fa_list[i-1],"-",fa_list[i],"=",round(fa_list[i-1]-fa_list[i],2))








    ##Indicator 13: Pledged shares
    for i in stock_data:
      for j in i:
        j=str(j)
        if(stock_name in j):
          # print(j.index(i))
          stock_position=stock_data.index(i)
          # print(j)
          break

    pledged_shares=stock_data[stock_position][15]
    # print(pledged_shares)
    stock_name=stock_data[stock_position][5]
    count_pshares=1
    if(pledged_shares>0):
      pepoints-=1
      count_pshares=count_pshares*-10
    else:
      pepoints+=1
      count_pshares=count_pshares*10


    ##Entities: Alpha & Beta
    alpha=round(stock_data[stock_position][9],2)
    # print("Alpha",alpha)
    beta=round(stock_data[stock_position][10],2)
    # print("Beta",beta)
    divy=data['Dividend Yield']
    # print("Dividend Yield",divy)

    cagr=stock_data[stock_position][8]
    # print("CAGR:", cagr)

    # pepoints

    ##Indicator 14: PE Ratio
    st_pe=data['TTM PE']
    se_pe=data['Sector PE']
    # print("Stock PE", st_pe)
    # print("Sector PE",se_pe)
    count_pe=1
    if(data['TTM PE']=="--"):
        count_pe=pepoints*12
    elif(data['TTM PE']<data['Sector PE']):
      count_pe=pepoints*15
    else:
      count_pe=pepoints*10

    # print(count_pe)



    #Predicting Target Price 
    flag=0
    target_price=None
    entry_price=None
    # int(indicator_data['ENTERPRISE VALUE (CR.)'])
    # print(indicator_data['EV/EBITDA (X)'])
    # print()

    ebitda_list=[]
    for i in range(len(indicator_data['ENTERPRISE VALUE (CR.)'])-1,-1,-1):
            if(indicator_data['ENTERPRISE VALUE (CR.)'][i]==0):

              flag=1
              break

            # print(indicator_data['ENTERPRISE VALUE (CR.)'][i] , "/" , indicator_data['EV/EBITDA (X)'][i],"=", round((indicator_data['ENTERPRISE VALUE (CR.)'][i]/indicator_data['EV/EBITDA (X)'][i]),2))
            ebitda_list.append(round(indicator_data['ENTERPRISE VALUE (CR.)'][i]/indicator_data['EV/EBITDA (X)'][i],2))
    if(flag==0):

    
      ebitda_list=ebitda_list[::-1]

      # print(ebitda_list)
      growth_ebitda=[]
      for i in range(len(ebitda_list)-1,0,-1):
        # print(ebitda_list[i-1],"-",ebitda_list[i],"=",round(ebitda_list[i-1]-ebitda_list[i],2), "   ",round((ebitda_list[i-1]-ebitda_list[i])/ebitda_list[i]*100,2))
        growth_ebitda.append(round((ebitda_list[i-1]-ebitda_list[i])/ebitda_list[i]*100,2))

      # print()
      growth_ebitda=growth_ebitda[::-1]

      # print(growth_ebitda)
      # print()
      grow=0
      for i in range(len(growth_ebitda)-1):
        grow=grow+growth_ebitda[i]

      growth=round(grow/3,2)
      # print("Growth for last three years:", growth)
      # print()
      # print(ebitda_list[0])
      pred_ebitda=round(((100+growth)*ebitda_list[0])/100,2)

      # print("Predicted Ebitda:",pred_ebitda)


      # print()
      forecasted_ev= round(pred_ebitda*indicator_data['EV/EBITDA (X)'][0],2)

      # print()
      forecasted_ev=forecasted_ev-indicator_data['LONG TERM BORROWINGS'][0]
      forecasted_ev

      # print("Forecasted EV:",forecasted_ev)
      # print()
      target_price=round(forecasted_ev/shareholding,2)
      # print("Target Price:", target_price)

      entry_price=round(target_price*0.75,2)
      # print("Good Buy Price:",entry_price)

    points=bonus+count_currentratio+count_debt+count_ebit+count_ito+count_profitloss+count_rec+count_reserves+count_revenuefromop+count_roce+count_netcashflow+count_pe+count_freecash+count_pshares+count_revenuefromopqt+count_profitqt
    final_list=[]
    per_re="8.5%"
    industry="Departmental Stores"

    final_list.append(stock_name)
    final_list.append(cap)
    final_list.append(roce_ind)
    final_list.append(points)
    final_list.append(per_re)
    final_list.append(industry)
    return final_list

  table=[]
  url_list=[]
        
  url_list=[[["DMART"],['https://www.moneycontrol.com/india/stockpricequote/retail/avenuesupermarts/AS19'],['https://www.moneycontrol.com/financials/avenuesupermarts/balance-sheetVI/AS19#AS19','https://www.moneycontrol.com/financials/avenuesupermarts/profit-lossVI/AS19#AS19','https://www.moneycontrol.com/financials/avenuesupermarts/results/quarterly-results/AS19#AS19','https://www.moneycontrol.com/financials/avenuesupermarts/cash-flowVI/AS19#AS19','https://www.moneycontrol.com/financials/avenuesupermarts/ratiosVI/AS19#AS19']],
            
            [["VMART"],['https://www.moneycontrol.com/india/stockpricequote/retail/vmartretail/VR03'],['https://www.moneycontrol.com/financials/v-martretail/balance-sheetVI/VR03#VR03','https://www.moneycontrol.com/financials/v-martretail/profit-lossVI/VR03#VR03','https://www.moneycontrol.com/financials/v-martretail/results/quarterly-results/VR03#VR03','https://www.moneycontrol.com/financials/v-martretail/cash-flowVI/VR03#VR03','https://www.moneycontrol.com/financials/v-martretail/ratiosVI/VR03#VR03']],
            [['SHOPERSTOP'],['https://www.moneycontrol.com/india/stockpricequote/retail/shoppersstop/SS51'],['https://www.moneycontrol.com/financials/shoppersstop/balance-sheetVI/SS51#SS51','https://www.moneycontrol.com/financials/shoppersstop/profit-lossVI/SS51#SS51','https://www.moneycontrol.com/financials/shoppersstop/results/quarterly-results/SS51#SS51','https://www.moneycontrol.com/financials/shoppersstop/cash-flowVI/SS51#SS51','https://www.moneycontrol.com/financials/shoppersstop/ratiosVI/SS51#SS51']],
            [['FRETAIL'],['https://www.moneycontrol.com/india/stockpricequote/retail/futureretail/FR'],['https://www.moneycontrol.com/financials/futureretail/balance-sheetVI/FR#FR','https://www.moneycontrol.com/financials/futureretail/profit-lossVI/FR#FR','https://www.moneycontrol.com/financials/futureretail/results/quarterly-results/FR#FR','https://www.moneycontrol.com/financials/futureretail/cash-flowVI/FR#FR','https://www.moneycontrol.com/financials/futureretail/ratiosVI/FR#FR']]]

            

  for i in range(len(url_list)):
    list_input=[]
    for j in url_list[i]:
      list_input.append(j)
    stockname=list_input[0][0]
    url1=list_input[1][0]
    url2=list_input[2]
    # print(stockname,url1,url2)
    final_list=itcon(stockname,url1,url2)
    table.append(final_list)
  df=pd.DataFrame(table,columns=['stock_name','cap','roce_ind','points','per_re','industry'])
  df.sort_values(by='points', ascending=False,inplace=True)
  stock=[]

  df_final=df[['stock_name','cap','roce_ind','per_re','industry']]
  
  stock= df_final[:2].values.tolist()
  
  portfolio.append(stock) 

  
  def rest(stockname,url1,url2):


    stock_name=stockname
    url = url1

    # Make a GET request to fetch the raw HTML content
    html_content = requests.get(url).text

    # Parse HTML code for the entire site
    soup = BeautifulSoup(html_content, "lxml")
    # print(soup)

    mc = soup.find_all("div", attrs={"class": "oview_table"})
    # print("Number of tables on site: ",len(mc))

    data = dict()
    for tb in mc[:4]:
        body = tb.find_all("tr")
        for i in body:
            vals = i.find_all("td")
            title = vals[0].text.strip()
            try:
                value = float(vals[1].text.replace(',',''))
            except ValueError:
                value = vals[1].text.replace(',','')
            data[title] = value
    # print(data)



    excel_data=pd.read_csv(r"C:\Users\mohil\OneDrive\Desktop\STOCKS_new.csv")
    excel_data.drop(columns=['Name (largecap alpha.csv)', 'Ticker (largecap alpha.csv)'],inplace=True)
    # excel_data.head(10)

    avg_price=round((data['Open']+data['Previous Close'])/2,2)
    shareholding=round((data['Mkt Cap (Rs. Cr.)']/avg_price),2)
    shareholding

    parameters_dict = dict()
    def scrape_indicators(urls):
        for url in urls:
            html_content = requests.get(url).text

            # Parse HTML code for the entire site
            soup = BeautifulSoup(html_content, "lxml")
            stonks = soup.find_all("div", attrs={"id": "standalone-new"})

            body = stonks[0].find_all("tr")

            indicator_dict = dict()

            for record in body:
                indicator = record.find_all("td")[0].text.upper()
                temp_indicator_values = []
                try:
                    for table_data in (record.find_all('td')[1:-1]):
                        temp_indicator_values.append(
                            float(table_data.text.replace(',', '')))
                except ValueError:
                    continue
                indicator_dict[indicator] = temp_indicator_values

            parameters_dict.update(indicator_dict)

        yield(url, parameters_dict)


      
    urls=url2

    for request_url, indicator_data in scrape_indicators(urls):
        # print(request_url)
        # print(indicator_data)
        print("")
        #print()

    pepoints=0


    if(data['Mkt Cap (Rs. Cr.)']<20000.00 and data['Mkt Cap (Rs. Cr.)']>5000.00):
      cap="Mid Cap"
    elif (data['Mkt Cap (Rs. Cr.)']>20000.00):
      cap="Large Cap"
    else:
      cap="Small Cap"
    
    ##Indicator 1: Reserves & Surplus
    # print(indicator_data['RESERVES AND SURPLUS'])
    rands_list=[]
    count_reserves=0
    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,0,-1):
      if(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i]>0):
        rands_list.append(round(((indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i])/indicator_data['RESERVES AND SURPLUS'][i])*100,2))
        # print(indicator_data['RESERVES AND SURPLUS'][i])
        count_reserves=count_reserves+20
        pepoints+=1
        # print(indicator_data['RESERVES AND SURPLUS'][i-1] , "-" , indicator_data['RESERVES AND SURPLUS'][i],"=", round(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i],2))
      else:
        rands_list.append(round(((indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i])/indicator_data['RESERVES AND SURPLUS'][i])*100,2))
        # print(indicator_data['RESERVES AND SURPLUS'][i])
        count_reserves=count_reserves-20
        pepoints-=1
        # print(indicator_data['RESERVES AND SURPLUS'][i-1],"-",indicator_data['RESERVES AND SURPLUS'][i],"=", round(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i],2))

    rands_list=rands_list[::-1]

    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,-1,-1):
        if(indicator_data['RESERVES AND SURPLUS'][i]<0):
          count_reserves-=20
          pepoints-=1

    # print(count_reserves)
    # print(rands_list)

    ##Indicator 2: Revenue From Operations Gross
    count_revenuefromop=0
    revenue_list=[]
    # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])
    for i in range(len(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])-1,0,-1):
      if(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i]>0):
        revenue_list.append(round(((indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])/indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])*100,2))
        count_revenuefromop=count_revenuefromop+10
        # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1] , "-" , indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],"=", round(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],2))
      else:
        revenue_list.append(round(((indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])/indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])*100,2))
        count_revenuefromop=count_revenuefromop-10
        # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1],"-",indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],"=",round(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],2))

    revenue_list=revenue_list[::-1]

    for i in range(len(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])-1,-1,-1):
        if(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i]<0):
          count_revenuefromop-=15


    # print(count_revenuefromop)
    # print(revenue_list)





    ##Indicator 3: Profit/Loss for the period
    count_profitloss=0
    profit_list=[]
    # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'])
    for i in range(len(indicator_data['PROFIT/LOSS FOR THE PERIOD'])-1,0,-1):
      if(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i]>0):
        profit_list.append(round(((indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])/indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])*100,2))
        count_profitloss=count_profitloss+10
        # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1] , "-" , indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],"=", round(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],2))
      else:
        profit_list.append(round(((indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])/indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])*100,2))
        count_profitloss=count_profitloss-10
        # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1],"-",indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],"=",round(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],2))

    profit_list=profit_list[::-1]

    for i in range(len(indicator_data['PROFIT/LOSS FOR THE PERIOD'])-1,-1,-1):
        if(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i]<0):
          count_profitloss-=15

    # print(count_profitloss)
    # print(profit_list)

    # print(pepoints)

    ##Indicator 4: ROCE

    count_roce=0
    # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])
    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,0,-1):
      if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]>-1):
        count_roce+=10
        # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1] , "-" , indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],"=", round(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],2))
      else:
        count_roce-=10
        # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1],"-",indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],"=",round(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],2))

    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,-1,-1):
        if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]<10):
          count_roce-=15
          pepoints-=1
        else:
          if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]>10):
            count_roce+=15
            pepoints+=1


    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,-1,-1):
        if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]<0):
          count_roce-=25

    roce_ind=indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][0]

    # print(count_roce)

    # print(pepoints)

    ##Indicator 5: Inventory Turnover Ratio
    count_ito=0
    # print(indicator_data['INVENTORY TURNOVER RATIO (X)'])
    for i in range(len(indicator_data['INVENTORY TURNOVER RATIO (X)'])-1,0,-1):
      if(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i]>0):
        count_ito+=20
        pepoints+=1
        # print(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1] , "-" , indicator_data['INVENTORY TURNOVER RATIO (X)'][i],"=", round(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i],2))
      else:
        count_ito-=10
        pepoints-=1
        # print(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1],"-",indicator_data['INVENTORY TURNOVER RATIO (X)'][i],"=",round(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i],2))
    # print(count_ito)

    # pepoints

    ##Indicator 6: Reserves & Surplus/Equity Share Capital
    # print(indicator_data['RESERVES AND SURPLUS'])
    # print(indicator_data['TOTAL SHARE CAPITAL'])
    # print()
    rsesc_list=[]
    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,-1,-1):
            # print(indicator_data['RESERVES AND SURPLUS'][i])
            # print(indicator_data['RESERVES AND SURPLUS'][i] , "/" , indicator_data['TOTAL SHARE CAPITAL'][i],"=", round((indicator_data['RESERVES AND SURPLUS'][i]/indicator_data['TOTAL SHARE CAPITAL'][i]),2))
            rsesc_list.append(round(indicator_data['RESERVES AND SURPLUS'][i]/indicator_data['TOTAL SHARE CAPITAL'][i],2))

    # print()
    rsesc_list=rsesc_list[::-1]
    # print(rsesc_list)
    # print()
    count_rec=0
    for i in range(len(rsesc_list)-1,0,-1):
      if(rsesc_list[i-1]-rsesc_list[i]>0):
        count_rec+=20
        pepoints+=1
        # print(rsesc_list[i-1] , "-" , rsesc_list[i],"=", round(rsesc_list[i-1]-rsesc_list[i],2))
      else:
        count_rec-=10
        pepoints-=1
        # print(rsesc_list[i-1],"-",rsesc_list[i],"=",round(rsesc_list[i-1]-rsesc_list[i],2))


    for i in range(len(rsesc_list)-1,-1,-1):
        if(rsesc_list[i]<10):
          count_rec-=15

    for i in range(len(rsesc_list)-1,-1,-1):
        if(rsesc_list[i]<0):
          count_rec-=20


    # print(rsesc_list)
    # print(count_rec)



    # pepoints





    ## Indicator 7: Trade Receivables in Current Assets
    # print(indicator_data['TOTAL CURRENT ASSETS'])
    # print(indicator_data['TRADE RECEIVABLES'])

    trade_list=[]
    bonus=0
    for i in range(len(indicator_data['TOTAL CURRENT ASSETS'])-1,-1,-1):
              # print(indicator_data['TOTAL CURRENT ASSETS'][i] , "/" , indicator_data['TRADE RECEIVABLES'][i],"=", round((indicator_data['TOTAL CURRENT ASSETS'][i]/indicator_data['TRADE RECEIVABLES'][i]),2))
              if(round((indicator_data['TOTAL CURRENT ASSETS'][i]/indicator_data['TRADE RECEIVABLES'][i]),2)<50.00):
                bonus+=10
              else:
                bonus-=5
    # print(bonus)

    # print(pepoints)

    ## Indicator 8: Earnings Before Interest Tax

    indicator_data['PBIT MARGIN (%)']
    count_ebit=0
    # print(indicator_data['PBIT MARGIN (%)'])
    for i in range(len(indicator_data['PBIT MARGIN (%)'])-1,0,-1):
      if(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i]>0):
        count_ebit+=10
        pepoints+=1
        # print(indicator_data['PBIT MARGIN (%)'][i-1] , "-" , indicator_data['PBIT MARGIN (%)'][i],"=", round(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i],2))
      else:
        count_ebit-=5
        pepoints+=1
        # print(indicator_data['PBIT MARGIN (%)'][i-1],"-",indicator_data['PBIT MARGIN (%)'][i],"=",round(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i],2))

    for i in range(len(indicator_data['PBIT MARGIN (%)'])-1,-1,-1):
        if(indicator_data['PBIT MARGIN (%)'][i]<0):
          count_ebit-=20


    # print(count_ebit)

    # print(pepoints)

    ## Indicator 9: Debt To Equity Ratio

    count_debt=0
    # print(indicator_data["TOTAL DEBT/EQUITY (X)"])

    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,0,-1):
      if(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i]>0):
        count_debt+=10
        # print(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1] , "-" , indicator_data['TOTAL DEBT/EQUITY (X)'][i],"=", round(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i],2))
      elif (indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i]==0):
            count_debt+=10
      else:
        count_debt-=5
        # print(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1],"-",indicator_data['TOTAL DEBT/EQUITY (X)'][i],"=",round(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i],2))
      
    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,-1,-1):
        if(indicator_data['TOTAL DEBT/EQUITY (X)'][i]>2):
          count_debt-=15
          pepoints-=1
        else:
          count_debt+=15
          pepoints+=1

    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,-1,-1):
        if(indicator_data['TOTAL DEBT/EQUITY (X)'][i]<0):
          count_debt-=20


    # print(count_debt)

    # pepoints

    ## Indicator 10: Current Ratio
    indicator_data['CURRENT RATIO (X)']

    count_currentratio=0
    # print(indicator_data["CURRENT RATIO (X)"])

    for i in range(len(indicator_data['CURRENT RATIO (X)'])-1,0,-1):
      if(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i]>0):
        count_currentratio+=10
        # print(indicator_data['CURRENT RATIO (X)'][i-1] , "-" , indicator_data['CURRENT RATIO (X)'][i],"=", round(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i],2))
      elif ((indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i])==0):
            count_currentratio+=10
      else:
        count_currentratio-=5
        # print(indicator_data['CURRENT RATIO (X)'][i-1],"-",indicator_data['CURRENT RATIO (X)'][i],"=",round(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i],2))

    for i in range(len(indicator_data['CURRENT RATIO (X)'])-1,-1,-1):
        if(indicator_data['CURRENT RATIO (X)'][i]<2):
          # print(indicator_data['CURRENT RATIO (X)'][i])
          count_currentratio-=10
          pepoints=pepoints-0.5
        elif (indicator_data['CURRENT RATIO (X)'][i]<1):
          count_currentratio-=20
          pepoints=pepoints-1
        else:
          count_currentratio+=10
          pepoints+=1


    # print(count_currentratio)

    # pepoints

    ##Indicator 11: Net Cashflow From Operating Activities
    count_netcashflow=0
    cashflow_list=[]
    # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])
    for i in range(len(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])-1,0,-1):
      if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]==0):
        indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]=indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]
      if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]>0):
        cashflow_list.append(round(((indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])/indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])*100,2))
        count_netcashflow=count_netcashflow+10
        pepoints+=1
        # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1] , "-" , indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],"=", round(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],2))
      else:
        cashflow_list.append(round(((indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])/indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])*100,2))
        count_netcashflow=count_netcashflow-10
        pepoints-=1
        # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1],"-",indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],"=",round(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],2))

    cashflow_list=cashflow_list[::-1]

    for i in range(len(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])-1,-1,-1):
        if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]<0):
          count_netcashflow-=15

    # print(count_netcashflow)
    # print(cashflow_list)

    ##Indicator 12: Free cash Flow
    stock_position=None
    stock_data=excel_data.values.tolist()
    stock_data
    for i in stock_data:
      for j in i:
        j=str(j)
        if(stock_name in j):
          # print(j.index(i))
          stock_position=stock_data.index(i)
          # print(j)
          break
          
    # print(stock_position)

    freecash_list=[]
    for i in range(5):
      freecash_list.append(stock_data[stock_position][i])
    # print(freecash_list)

    count_freecash=0
    for i in range(1,len(freecash_list)):
      if(freecash_list[i]-freecash_list[i-1]>0):
        # print(freecash_list[i],"-",freecash_list[i-1],"=",freecash_list[i]-freecash_list[i-1])
        count_freecash+=20
        pepoints+=1
      else:
        # print(freecash_list[i],"-",freecash_list[i-1],"=",freecash_list[i]-freecash_list[i-1])
        count_freecash-=10
        pepoints-=1

    for i in range(0,len(freecash_list)):
      if(freecash_list[i]<0):
        count_freecash-=20
        pepoints-=1

    # print(count_freecash)

    ##Indicator 15: Net sales from operations

    count_revenuefromopqt=0
    revenueqt_list=[]
    # print(indicator_data['NET SALES/INCOME FROM OPERATIONS'])
    for i in range(len(indicator_data['NET SALES/INCOME FROM OPERATIONS'])-1,0,-1):
      if(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1]-indicator_data['NET SALES/INCOME FROM OPERATIONS'][i]>0):
        revenueqt_list.append(round(((indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1]-indicator_data['NET SALES/INCOME FROM OPERATIONS'][i])/indicator_data['NET SALES/INCOME FROM OPERATIONS'][i])*100,2))
        count_revenuefromopqt=count_revenuefromopqt+15
        pepoints=pepoints+1
        # print(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1] , "-" , indicator_data['NET SALES/INCOME FROM OPERATIONS'][i],"=", round(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1]-indicator_data['NET SALES/INCOME FROM OPERATIONS'][i],2))
      else:
        revenueqt_list.append(round(((indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1]-indicator_data['NET SALES/INCOME FROM OPERATIONS'][i])/indicator_data['NET SALES/INCOME FROM OPERATIONS'][i])*100,2))
        count_revenuefromopqt=count_revenuefromopqt-15
        pepoints=pepoints-1
        # print(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1],"-",indicator_data['NET SALES/INCOME FROM OPERATIONS'][i],"=",round(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1]-indicator_data['NET SALES/INCOME FROM OPERATIONS'][i],2))

    revenueqt_list=revenueqt_list[::-1]

    for i in range(len(indicator_data['NET SALES/INCOME FROM OPERATIONS'])-1,-1,-1):
        if(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i]<0):
          count_revenuefromopqt-=15
          pepoints=pepoints-1

      ##Indicator 16: Net profit/loss
    count_profitqt=0
    profitqt_list=[]
    # print(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'])
    for i in range(len(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'])-1,0,-1):
      if(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1]-indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i]>0):
        profitqt_list.append(round(((indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1]-indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i])/indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i])*100,2))
        count_profitqt=count_profitqt+10
        pepoints=pepoints+1
        # print(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1] , "-" , indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i],"=", round(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1]-indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i],2))
      else:
        profitqt_list.append(round(((indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1]-indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i])/indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i])*100,2))
        count_profitqt=count_profitqt-10
        pepoints=pepoints-1
        # print(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1],"-",indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i],"=",round(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1]-indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i],2))

    profitqt_list=profitqt_list[::-1]

    for i in range(len(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'])-1,-1,-1):
        if(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i]<0):
          count_profitqt-=5
          pepoints=pepoints-1


    
    ##Indicator 13: Pledged shares
    for i in stock_data:
      for j in i:
        j=str(j)
        if(stock_name in j):
          # print(j.index(i))
          stock_position=stock_data.index(i)
          # print(j)
          break

    pledged_shares=stock_data[stock_position][15]
    # print(pledged_shares)
    stock_name=stock_data[stock_position][5]
    count_pshares=1
    if(pledged_shares>0):
      pepoints-=1
      count_pshares=count_pshares*-10
    else:
      pepoints+=1
      count_pshares=count_pshares*10


    ##Entities: Alpha & Beta
    alpha=round(stock_data[stock_position][9],2)
    # print("Alpha",alpha)
    beta=round(stock_data[stock_position][10],2)
    # print("Beta",beta)
    divy=data['Dividend Yield']
    # print("Dividend Yield",divy)

    cagr=stock_data[stock_position][8]
    # print("CAGR:", cagr)

    # pepoints

    ##Indicator 14: PE Ratio
    st_pe=data['TTM PE']
    se_pe=data['Sector PE']
    # print("Stock PE", st_pe)
    # print("Sector PE",se_pe)
    count_pe=1
    if(data['TTM PE']=="--"):
        count_pe=pepoints*12
    elif(data['TTM PE']<data['Sector PE']):
      count_pe=pepoints*15
    else:
      count_pe=pepoints*10

    # print(count_pe)



    #Predicting Target Price 
    flag=0
    target_price=None
    entry_price=None
    # int(indicator_data['ENTERPRISE VALUE (CR.)'])
    # print(indicator_data['EV/EBITDA (X)'])
    # print()

    ebitda_list=[]
    for i in range(len(indicator_data['ENTERPRISE VALUE (CR.)'])-1,-1,-1):
            if(indicator_data['ENTERPRISE VALUE (CR.)'][i]==0):

              flag=1
              break

            # print(indicator_data['ENTERPRISE VALUE (CR.)'][i] , "/" , indicator_data['EV/EBITDA (X)'][i],"=", round((indicator_data['ENTERPRISE VALUE (CR.)'][i]/indicator_data['EV/EBITDA (X)'][i]),2))
            ebitda_list.append(round(indicator_data['ENTERPRISE VALUE (CR.)'][i]/indicator_data['EV/EBITDA (X)'][i],2))
    if(flag==0):

      # print()
      ebitda_list=ebitda_list[::-1]

      # print(ebitda_list)
      growth_ebitda=[]
      for i in range(len(ebitda_list)-1,0,-1):
        # print(ebitda_list[i-1],"-",ebitda_list[i],"=",round(ebitda_list[i-1]-ebitda_list[i],2), "   ",round((ebitda_list[i-1]-ebitda_list[i])/ebitda_list[i]*100,2))
        growth_ebitda.append(round((ebitda_list[i-1]-ebitda_list[i])/ebitda_list[i]*100,2))

      # print()
      growth_ebitda=growth_ebitda[::-1]

      # print(growth_ebitda)
      # print()
      grow=0
      for i in range(len(growth_ebitda)-1):
        grow=grow+growth_ebitda[i]

      growth=round(grow/3,2)
      # print("Growth for last three years:", growth)
      # print()
      # print(ebitda_list[0])
      pred_ebitda=round(((100+growth)*ebitda_list[0])/100,2)

      # print("Predicted Ebitda:",pred_ebitda)


      # print()
      forecasted_ev= round(pred_ebitda*indicator_data['EV/EBITDA (X)'][0],2)

      # print()
      forecasted_ev=forecasted_ev-indicator_data['LONG TERM BORROWINGS'][0]
      forecasted_ev

      # print("Forecasted EV:",forecasted_ev)
      # print()
      target_price=round(forecasted_ev/shareholding,2)
      # print("Target Price:", target_price)

      entry_price=round(target_price*0.75,2)
      # print("Good Buy Price:",entry_price)

    points=bonus+count_currentratio+count_debt+count_ebit+count_ito+count_profitloss+count_rec+count_reserves+count_revenuefromop+count_roce+count_netcashflow+count_pe+count_freecash+count_pshares+count_revenuefromopqt+count_profitqt
    final_list=[]
    per_rest="6%"
    industry="Restaurants & Cafes"


    final_list.append(stock_name)
    final_list.append(cap)
    final_list.append(roce_ind)
    final_list.append(points)
    final_list.append(per_rest)
    final_list.append(industry)
    return final_list

  table=[]
  url_list=[]
        
  url_list=[[["JUBLFOOD"],['https://www.moneycontrol.com/india/stockpricequote/miscellaneous/jubilantfoodworks/JF04'],['https://www.moneycontrol.com/financials/jubilantfoodworks/balance-sheetVI/JF04#JF04','https://www.moneycontrol.com/financials/jubilantfoodworks/profit-lossVI/JF04#JF04','https://www.moneycontrol.com/financials/jubilantfoodworks/results/quarterly-results/JF04#JF04','https://www.moneycontrol.com/financials/jubilantfoodworks/cash-flowVI/JF04#JF04',"https://www.moneycontrol.com/financials/jubilantfoodworks/ratiosVI/JF04#JF04"]],
            
            
            [['BURGERKING'],['https://www.moneycontrol.com/india/stockpricequote/consumerfood/burgerkingindia/BKI01'],['https://www.moneycontrol.com/financials/burgerkingindia/balance-sheetVI/BKI01#BKI01','https://www.moneycontrol.com/financials/burgerkingindia/profit-lossVI/BKI01#BKI01','https://www.moneycontrol.com/financials/burgerkingindia/results/quarterly-results/BKI01#BKI01','https://www.moneycontrol.com/financials/burgerkingindia/cash-flowVI/BKI01#BKI01','https://www.moneycontrol.com/financials/burgerkingindia/ratiosVI/BKI01#BKI01']],
            [['BARBEQUE'],['https://www.moneycontrol.com/india/stockpricequote/consumerfood/barbequenationhospitality/BNH'],['https://www.moneycontrol.com/financials/barbequenationhospitality/balance-sheetVI/BNH#BNH','https://www.moneycontrol.com/financials/barbequenationhospitality/profit-lossVI/BNH#BNH','https://www.moneycontrol.com/financials/barbequenationhospitality/results/quarterly-results/BNH#BNH','https://www.moneycontrol.com/financials/barbequenationhospitality/cash-flowVI/BNH#BNH','https://www.moneycontrol.com/financials/barbequenationhospitality/ratiosVI/BNH#BNH']],
            [['SPECIALITY'],['https://www.moneycontrol.com/india/stockpricequote/hotels/specialityrestaurants/SR06'],['https://www.moneycontrol.com/financials/specialityrestaurants/balance-sheetVI/SR06#SR06','https://www.moneycontrol.com/financials/specialityrestaurants/profit-lossVI/SR06#SR06','https://www.moneycontrol.com/financials/specialityrestaurants/results/quarterly-results/SR06#SR06','https://www.moneycontrol.com/financials/specialityrestaurants/cash-flowVI/SR06#SR06','https://www.moneycontrol.com/financials/specialityrestaurants/ratiosVI/SR06#SR06']]]
            
  # print(len(url_list))
  # print(len(url_list))

  for i in range(len(url_list)):
    list_input=[]
    for j in url_list[i]:
      list_input.append(j)
    stockname=list_input[0][0]
    url1=list_input[1][0]
    url2=list_input[2]
    # print(stockname,url1,url2)
    final_list=rest(stockname,url1,url2)
    table.append(final_list)
  df=pd.DataFrame(table,columns=['stock_name','cap','roce_ind','points','per_rest','industry'])
  df.sort_values(by='points', ascending=False,inplace=True)
  stock=[]

  df_final=df[['stock_name','cap','roce_ind','per_rest','industry']]
  
  stock= df_final[:1].values.tolist()
  
  portfolio.append(stock) 

  def textile(stockname,url1,url2):


    stock_name=stockname
    url = url1

    # Make a GET request to fetch the raw HTML content
    html_content = requests.get(url).text

    # Parse HTML code for the entire site
    soup = BeautifulSoup(html_content, "lxml")
    # print(soup)

    mc = soup.find_all("div", attrs={"class": "oview_table"})
    # print("Number of tables on site: ",len(mc))

    data = dict()
    for tb in mc[:4]:
        body = tb.find_all("tr")
        for i in body:
            vals = i.find_all("td")
            title = vals[0].text.strip()
            try:
                value = float(vals[1].text.replace(',',''))
            except ValueError:
                value = vals[1].text.replace(',','')
            data[title] = value
    # print(data)



    excel_data=pd.read_csv(r"C:\Users\mohil\OneDrive\Desktop\STOCKS_new.csv")
    excel_data.drop(columns=['Name (largecap alpha.csv)', 'Ticker (largecap alpha.csv)'],inplace=True)
    # excel_data.head(10)

    avg_price=round((data['Open']+data['Previous Close'])/2,2)
    shareholding=round((data['Mkt Cap (Rs. Cr.)']/avg_price),2)
    shareholding

    parameters_dict = dict()
    def scrape_indicators(urls):
        for url in urls:
            html_content = requests.get(url).text

            # Parse HTML code for the entire site
            soup = BeautifulSoup(html_content, "lxml")
            stonks = soup.find_all("div", attrs={"id": "standalone-new"})

            body = stonks[0].find_all("tr")

            indicator_dict = dict()

            for record in body:
                indicator = record.find_all("td")[0].text.upper()
                temp_indicator_values = []
                try:
                    for table_data in (record.find_all('td')[1:-1]):
                        temp_indicator_values.append(
                            float(table_data.text.replace(',', '')))
                except ValueError:
                    continue
                indicator_dict[indicator] = temp_indicator_values

            parameters_dict.update(indicator_dict)

        yield(url, parameters_dict)


        
    urls=url2


    for request_url, indicator_data in scrape_indicators(urls):
        # print(request_url)
        # print(indicator_data)
        print()
        # print()

    if(data['Mkt Cap (Rs. Cr.)']<20000.00 and data['Mkt Cap (Rs. Cr.)']>5000.00):
      cap="Mid Cap"
    elif (data['Mkt Cap (Rs. Cr.)']>20000.00):
      cap="Large Cap"
    else:
      cap="Small Cap"
    

    pepoints=0



    ##Indicator 1: Reserves & Surplus
    # print(indicator_data['RESERVES AND SURPLUS'])
    rands_list=[]
    count_reserves=0
    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,0,-1):
      if(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i]>0):
        rands_list.append(round(((indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i])/indicator_data['RESERVES AND SURPLUS'][i])*100,2))
        # print(indicator_data['RESERVES AND SURPLUS'][i])
        count_reserves=count_reserves+20
        pepoints+=1
        # print(indicator_data['RESERVES AND SURPLUS'][i-1] , "-" , indicator_data['RESERVES AND SURPLUS'][i],"=", round(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i],2))
      else:
        rands_list.append(round(((indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i])/indicator_data['RESERVES AND SURPLUS'][i])*100,2))
        # print(indicator_data['RESERVES AND SURPLUS'][i])
        count_reserves=count_reserves-20
        pepoints-=1
        # print(indicator_data['RESERVES AND SURPLUS'][i-1],"-",indicator_data['RESERVES AND SURPLUS'][i],"=", round(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i],2))

    rands_list=rands_list[::-1]

    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,-1,-1):
        if(indicator_data['RESERVES AND SURPLUS'][i]<0):
          count_reserves-=20
          pepoints-=1

    # print(count_reserves)
    # print(rands_list)

    ##Indicator 2: Revenue From Operations Gross
    count_revenuefromop=0
    revenue_list=[]
    # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])
    for i in range(len(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])-1,0,-1):
      if(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i]>0):
        revenue_list.append(round(((indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])/indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])*100,2))
        count_revenuefromop=count_revenuefromop+10
        # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1] , "-" , indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],"=", round(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],2))
      else:
        revenue_list.append(round(((indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])/indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])*100,2))
        count_revenuefromop=count_revenuefromop-10
        # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1],"-",indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],"=",round(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],2))

    revenue_list=revenue_list[::-1]

    for i in range(len(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])-1,-1,-1):
        if(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i]<0):
          count_revenuefromop-=15


    # print(count_revenuefromop)
    # print(revenue_list)





    ##Indicator 3: Profit/Loss for the period
    count_profitloss=0
    profit_list=[]
    # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'])
    for i in range(len(indicator_data['PROFIT/LOSS FOR THE PERIOD'])-1,0,-1):
      if(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i]>0):
        profit_list.append(round(((indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])/indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])*100,2))
        count_profitloss=count_profitloss+10
        # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1] , "-" , indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],"=", round(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],2))
      else:
        profit_list.append(round(((indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])/indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])*100,2))
        count_profitloss=count_profitloss-10
        # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1],"-",indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],"=",round(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],2))

    profit_list=profit_list[::-1]

    for i in range(len(indicator_data['PROFIT/LOSS FOR THE PERIOD'])-1,-1,-1):
        if(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i]<0):
          count_profitloss-=15

    # print(count_profitloss)
    # print(profit_list)

    # print(pepoints)

    ##Indicator 4: ROCE

    count_roce=0
    # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])
    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,0,-1):
      if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]>-1):
        count_roce+=10
        # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1] , "-" , indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],"=", round(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],2))
      else:
        count_roce-=10
        # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1],"-",indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],"=",round(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],2))

    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,-1,-1):
        if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]<10):
          count_roce-=15
          pepoints-=1
        else:
          if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]>10):
            count_roce+=15
            pepoints+=1


    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,-1,-1):
        if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]<0):
          count_roce-=25

    roce_ind=indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][0]


    # print(count_roce)

    # print(pepoints)

    ##Indicator 5: Inventory Turnover Ratio
    count_ito=0
    # print(indicator_data['INVENTORY TURNOVER RATIO (X)'])
    for i in range(len(indicator_data['INVENTORY TURNOVER RATIO (X)'])-1,0,-1):
      if(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i]>0):
        count_ito+=20
        pepoints+=1
        # print(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1] , "-" , indicator_data['INVENTORY TURNOVER RATIO (X)'][i],"=", round(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i],2))
      else:
        count_ito-=10
        pepoints-=1
        # print(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1],"-",indicator_data['INVENTORY TURNOVER RATIO (X)'][i],"=",round(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i],2))
    # print(count_ito)

    # pepoints

    ##Indicator 6: Reserves & Surplus/Equity Share Capital
    # print(indicator_data['RESERVES AND SURPLUS'])
    # print(indicator_data['TOTAL SHARE CAPITAL'])
    # print()
    rsesc_list=[]
    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,-1,-1):
            # print(indicator_data['RESERVES AND SURPLUS'][i])
            # print(indicator_data['RESERVES AND SURPLUS'][i] , "/" , indicator_data['TOTAL SHARE CAPITAL'][i],"=", round((indicator_data['RESERVES AND SURPLUS'][i]/indicator_data['TOTAL SHARE CAPITAL'][i]),2))
            rsesc_list.append(round(indicator_data['RESERVES AND SURPLUS'][i]/indicator_data['TOTAL SHARE CAPITAL'][i],2))

    # print()
    rsesc_list=rsesc_list[::-1]
    # print(rsesc_list)
    # print()
    count_rec=0
    for i in range(len(rsesc_list)-1,0,-1):
      if(rsesc_list[i-1]-rsesc_list[i]>0):
        count_rec+=20
        pepoints+=1
        # print(rsesc_list[i-1] , "-" , rsesc_list[i],"=", round(rsesc_list[i-1]-rsesc_list[i],2))
      else:
        count_rec-=10
        pepoints-=1
        # print(rsesc_list[i-1],"-",rsesc_list[i],"=",round(rsesc_list[i-1]-rsesc_list[i],2))


    for i in range(len(rsesc_list)-1,-1,-1):
        if(rsesc_list[i]<10):
          count_rec-=15

    for i in range(len(rsesc_list)-1,-1,-1):
        if(rsesc_list[i]<0):
          count_rec-=20


    # print(rsesc_list)
    # print(count_rec)



    # pepoints





    ## Indicator 7: Trade Receivables in Current Assets
    # print(indicator_data['TOTAL CURRENT ASSETS'])
    # print(indicator_data['TRADE RECEIVABLES'])

    trade_list=[]
    bonus=0
    for i in range(len(indicator_data['TOTAL CURRENT ASSETS'])-1,-1,-1):
              # print(indicator_data['TOTAL CURRENT ASSETS'][i] , "/" , indicator_data['TRADE RECEIVABLES'][i],"=", round((indicator_data['TOTAL CURRENT ASSETS'][i]/indicator_data['TRADE RECEIVABLES'][i]),2))
              if(round((indicator_data['TOTAL CURRENT ASSETS'][i]/indicator_data['TRADE RECEIVABLES'][i]),2)<50.00):
                bonus+=10
              else:
                bonus-=5
    # print(bonus)

    # print(pepoints)

    ## Indicator 8: Earnings Before Interest Tax

    indicator_data['PBIT MARGIN (%)']
    count_ebit=0
    # print(indicator_data['PBIT MARGIN (%)'])
    for i in range(len(indicator_data['PBIT MARGIN (%)'])-1,0,-1):
      if(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i]>0):
        count_ebit+=10
        pepoints+=1
        # print(indicator_data['PBIT MARGIN (%)'][i-1] , "-" , indicator_data['PBIT MARGIN (%)'][i],"=", round(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i],2))
      else:
        count_ebit-=5
        pepoints+=1
        # print(indicator_data['PBIT MARGIN (%)'][i-1],"-",indicator_data['PBIT MARGIN (%)'][i],"=",round(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i],2))

    for i in range(len(indicator_data['PBIT MARGIN (%)'])-1,-1,-1):
        if(indicator_data['PBIT MARGIN (%)'][i]<0):
          count_ebit-=20


    # print(count_ebit)

    # print(pepoints)

    ## Indicator 9: Debt To Equity Ratio

    count_debt=0
    # print(indicator_data["TOTAL DEBT/EQUITY (X)"])

    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,0,-1):
      if(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i]>0):
        count_debt+=10
        # print(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1] , "-" , indicator_data['TOTAL DEBT/EQUITY (X)'][i],"=", round(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i],2))
      elif (indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i]==0):
            count_debt+=10
      else:
        count_debt-=5
        # print(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1],"-",indicator_data['TOTAL DEBT/EQUITY (X)'][i],"=",round(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i],2))
      
    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,-1,-1):
        if(indicator_data['TOTAL DEBT/EQUITY (X)'][i]>2):
          count_debt-=15
          pepoints-=1
        else:
          count_debt+=15
          pepoints+=1

    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,-1,-1):
        if(indicator_data['TOTAL DEBT/EQUITY (X)'][i]<0):
          count_debt-=20


    # print(count_debt)

    # pepoints

    ## Indicator 10: Current Ratio
    indicator_data['CURRENT RATIO (X)']

    count_currentratio=0
    # print(indicator_data["CURRENT RATIO (X)"])

    for i in range(len(indicator_data['CURRENT RATIO (X)'])-1,0,-1):
      if(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i]>0):
        count_currentratio+=10
        # print(indicator_data['CURRENT RATIO (X)'][i-1] , "-" , indicator_data['CURRENT RATIO (X)'][i],"=", round(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i],2))
      elif ((indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i])==0):
            count_currentratio+=10
      else:
        count_currentratio-=5
        # print(indicator_data['CURRENT RATIO (X)'][i-1],"-",indicator_data['CURRENT RATIO (X)'][i],"=",round(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i],2))

    for i in range(len(indicator_data['CURRENT RATIO (X)'])-1,-1,-1):
        if(indicator_data['CURRENT RATIO (X)'][i]<2):
          # print(indicator_data['CURRENT RATIO (X)'][i])
          count_currentratio-=10
          pepoints=pepoints-0.5
        elif (indicator_data['CURRENT RATIO (X)'][i]<1):
          count_currentratio-=20
          pepoints=pepoints-1
        else:
          count_currentratio+=10
          pepoints+=1


    # print(count_currentratio)

    # pepoints

    ##Indicator 11: Net Cashflow From Operating Activities
    count_netcashflow=0
    cashflow_list=[]
    # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])
    for i in range(len(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])-1,0,-1):
      if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]==0):
        indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]=indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]
      if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]>0):
        cashflow_list.append(round(((indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])/indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])*100,2))
        count_netcashflow=count_netcashflow+10
        pepoints+=1
        # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1] , "-" , indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],"=", round(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],2))
      else:
        cashflow_list.append(round(((indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])/indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])*100,2))
        count_netcashflow=count_netcashflow-10
        pepoints-=1
        # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1],"-",indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],"=",round(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],2))

    cashflow_list=cashflow_list[::-1]

    for i in range(len(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])-1,-1,-1):
        if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]<0):
          count_netcashflow-=15

    # print(count_netcashflow)
    # print(cashflow_list)

    ##Indicator 12: Free cash Flow
    stock_position=None
    stock_data=excel_data.values.tolist()
    stock_data
    for i in stock_data:
      for j in i:
        j=str(j)
        if(stock_name in j):
          # print(j.index(i))
          stock_position=stock_data.index(i)
          # print(j)
          break
          
    # print(stock_position)

    freecash_list=[]
    for i in range(5):
      freecash_list.append(stock_data[stock_position][i])
    # print(freecash_list)

    count_freecash=0
    for i in range(1,len(freecash_list)):
      if(freecash_list[i]-freecash_list[i-1]>0):
        # print(freecash_list[i],"-",freecash_list[i-1],"=",freecash_list[i]-freecash_list[i-1])
        count_freecash+=20
        pepoints+=1
      else:
        # print(freecash_list[i],"-",freecash_list[i-1],"=",freecash_list[i]-freecash_list[i-1])
        count_freecash-=10
        pepoints-=1

    for i in range(0,len(freecash_list)):
      if(freecash_list[i]<0):
        count_freecash-=20
        pepoints-=1

    # print(count_freecash)

    ##Indicator 13: Pledged shares
    for i in stock_data:
      for j in i:
        j=str(j)
        if(stock_name in j):
          # print(j.index(i))
          stock_position=stock_data.index(i)
          # print(j)
          break

    pledged_shares=stock_data[stock_position][15]
    # print(pledged_shares)
    stock_name=stock_data[stock_position][5]
    count_pshares=1
    if(pledged_shares>0):
      pepoints-=1
      count_pshares=count_pshares*-10
    else:
      pepoints+=1
      count_pshares=count_pshares*10


    ##Entities: Alpha & Beta
    alpha=round(stock_data[stock_position][9],2)
    # print("Alpha",alpha)
    beta=round(stock_data[stock_position][10],2)
    # print("Beta",beta)
    divy=data['Dividend Yield']
    # print("Dividend Yield",divy)

    cagr=stock_data[stock_position][8]
    # print("CAGR:", cagr)

    # pepoints

    ##Indicator 14: PE Ratio
    st_pe=data['TTM PE']
    se_pe=data['Sector PE']
    # print("Stock PE", st_pe)
    # print("Sector PE",se_pe)
    count_pe=1
    if(data['TTM PE']=="--"):
        count_pe=pepoints*12
    elif(data['TTM PE']<data['Sector PE']):
      count_pe=pepoints*15
    else:
      count_pe=pepoints*10

    # print(count_pe)



    #Predicting Target Price 
    flag=0
    target_price=None
    entry_price=None
    # int(indicator_data['ENTERPRISE VALUE (CR.)'])
    # print(indicator_data['EV/EBITDA (X)'])
    # print()

    ebitda_list=[]
    for i in range(len(indicator_data['ENTERPRISE VALUE (CR.)'])-1,-1,-1):
            if(indicator_data['ENTERPRISE VALUE (CR.)'][i]==0):

              flag=1
              break

            # print(indicator_data['ENTERPRISE VALUE (CR.)'][i] , "/" , indicator_data['EV/EBITDA (X)'][i],"=", round((indicator_data['ENTERPRISE VALUE (CR.)'][i]/indicator_data['EV/EBITDA (X)'][i]),2))
            ebitda_list.append(round(indicator_data['ENTERPRISE VALUE (CR.)'][i]/indicator_data['EV/EBITDA (X)'][i],2))
    if(flag==0):

      # print()
      ebitda_list=ebitda_list[::-1]

      # print(ebitda_list)
      growth_ebitda=[]
      for i in range(len(ebitda_list)-1,0,-1):
        # print(ebitda_list[i-1],"-",ebitda_list[i],"=",round(ebitda_list[i-1]-ebitda_list[i],2), "   ",round((ebitda_list[i-1]-ebitda_list[i])/ebitda_list[i]*100,2))
        growth_ebitda.append(round((ebitda_list[i-1]-ebitda_list[i])/ebitda_list[i]*100,2))

      # print()
      growth_ebitda=growth_ebitda[::-1]

      # print(growth_ebitda)
      # print()
      grow=0
      for i in range(len(growth_ebitda)-1):
        grow=grow+growth_ebitda[i]

      growth=round(grow/3,2)
      # print("Growth for last three years:", growth)
      # print()
      # print(ebitda_list[0])
      pred_ebitda=round(((100+growth)*ebitda_list[0])/100,2)

      # print("Predicted Ebitda:",pred_ebitda)


      # print()
      forecasted_ev= round(pred_ebitda*indicator_data['EV/EBITDA (X)'][0],2)

      # print()
      forecasted_ev=forecasted_ev-indicator_data['LONG TERM BORROWINGS'][0]
      forecasted_ev

      # print("Forecasted EV:",forecasted_ev)
      # print()
      target_price=round(forecasted_ev/shareholding,2)
      # print("Target Price:", target_price)

      entry_price=round(target_price*0.75,2)
      # print("Good Buy Price:",entry_price)

    points=bonus+count_currentratio+count_debt+count_ebit+count_ito+count_profitloss+count_rec+count_reserves+count_revenuefromop+count_roce+count_netcashflow+count_pe+count_freecash+count_pshares
    final_list=[]
    per_text="6%"
    industry="Textiles"




    final_list.append(stock_name)
    final_list.append(cap)
    final_list.append(roce_ind)
    final_list.append(points)
    final_list.append(per_text)
    final_list.append(industry)

    
    
    
    return final_list
  table=[]
  url_list=[]
  url_list=[[["KPRMILL"],['https://www.moneycontrol.com/india/stockpricequote/textilesreadymadeapparels/kprmill/M15'],['https://www.moneycontrol.com/financials/kprmill/balance-sheetVI/M15#M15','https://www.moneycontrol.com/financials/kprmill/profit-lossVI/M15#M15','https://www.moneycontrol.com/financials/kprmill/cash-flowVI/M15#M15','https://www.moneycontrol.com/financials/kprmill/ratiosVI/M15#M15']],
        [["TRIDENT"],['https://www.moneycontrol.com/india/stockpricequote/textilesspinningcottonblended/trident/AI01'],['https://www.moneycontrol.com/financials/trident/balance-sheetVI/AI01#AI01','https://www.moneycontrol.com/financials/trident/profit-lossVI/AI01#AI01','https://www.moneycontrol.com/financials/trident/cash-flowVI/AI01#AI01','https://www.moneycontrol.com/financials/trident/ratiosVI/AI01#AI01']],
        [["ALOKINDS"],['https://www.moneycontrol.com/india/stockpricequote/textilesweaving/alokindustries/AI54'],['https://www.moneycontrol.com/financials/alokindustries/balance-sheetVI/AI54#AI54','https://www.moneycontrol.com/financials/alokindustries/profit-lossVI/AI54#AI54','https://www.moneycontrol.com/financials/alokindustries/cash-flowVI/AI54#AI54','https://www.moneycontrol.com/financials/alokindustries/ratiosVI/AI54#AI54']],
        [["VTL"],['https://www.moneycontrol.com/india/stockpricequote/textilesspinningcottonblended/vardhmantextiles/VT10'],['https://www.moneycontrol.com/financials/vardhmantextiles/balance-sheetVI/VT10#VT10','https://www.moneycontrol.com/financials/vardhmantextiles/profit-lossVI/VT10#VT10','https://www.moneycontrol.com/financials/vardhmantextiles/cash-flowVI/VT10#VT10','https://www.moneycontrol.com/financials/vardhmantextiles/ratiosVI/VT10#VT10']],
        [["SRF"],['https://www.moneycontrol.com/india/stockpricequote/diversified/srf/SRF'],['https://www.moneycontrol.com/financials/srf/balance-sheetVI/SRF#SRF','https://www.moneycontrol.com/financials/srf/profit-lossVI/SRF#SRF','https://www.moneycontrol.com/financials/srf/cash-flowVI/SRF#SRF','https://www.moneycontrol.com/financials/srf/ratiosVI/SRF#SRF']]]
  # print(len(url_list))
  # print(len(url_list))

  for i in range(len(url_list)):
    list_input=[]
    for j in url_list[i]:
      list_input.append(j)
    stockname=list_input[0][0]
    url1=list_input[1][0]
    url2=list_input[2]
    # print(stockname,url1,url2)
    final_list=textile(stockname,url1,url2)
    table.append(final_list)

  df=pd.DataFrame(table,columns=['stock_name','cap','roce_ind','points','per_text','industry'])
  df.sort_values(by='points', ascending=False,inplace=True)
  stock=[]

  df_final=df[['stock_name','cap','roce_ind','per_text','industry']]
  
  stock= df_final[:1].values.tolist()
  
  portfolio.append(stock) 

  def alchohol(stockname,url1,url2):


      stock_name=stockname
      url = url1

      # Make a GET request to fetch the raw HTML content
      html_content = requests.get(url).text

      # Parse HTML code for the entire site
      soup = BeautifulSoup(html_content, "lxml")
      # print(soup)

      mc = soup.find_all("div", attrs={"class": "oview_table"})
      # print("Number of tables on site: ",len(mc))

      data = dict()
      for tb in mc[:4]:
          body = tb.find_all("tr")
          for i in body:
              vals = i.find_all("td")
              title = vals[0].text.strip()
              try:
                  value = float(vals[1].text.replace(',',''))
              except ValueError:
                  value = vals[1].text.replace(',','')
              data[title] = value
      # print(data)



      excel_data=pd.read_csv(r"C:\Users\mohil\OneDrive\Desktop\STOCKS_new.csv")
      excel_data.drop(columns=['Name (largecap alpha.csv)', 'Ticker (largecap alpha.csv)'],inplace=True)
      # excel_data.head(10)

      avg_price=round((data['Open']+data['Previous Close'])/2,2)
      shareholding=round((data['Mkt Cap (Rs. Cr.)']/avg_price),2)
      shareholding

      parameters_dict = dict()
      def scrape_indicators(urls):
          for url in urls:
              html_content = requests.get(url).text

              # Parse HTML code for the entire site
              soup = BeautifulSoup(html_content, "lxml")
              stonks = soup.find_all("div", attrs={"id": "standalone-new"})

              body = stonks[0].find_all("tr")

              indicator_dict = dict()

              for record in body:
                  indicator = record.find_all("td")[0].text.upper()
                  temp_indicator_values = []
                  try:
                      for table_data in (record.find_all('td')[1:-1]):
                          temp_indicator_values.append(
                              float(table_data.text.replace(',', '')))
                  except ValueError:
                      continue
                  indicator_dict[indicator] = temp_indicator_values

              parameters_dict.update(indicator_dict)

          yield(url, parameters_dict)



          
      urls=url2
      # urls = ["https://www.moneycontrol.com/financials/godfreyphillipsindia/balance-sheetVI/GPI#GPI","https://www.moneycontrol.com/financials/godfreyphillipsindia/profit-lossVI/GPI#GPI","https://www.moneycontrol.com/financials/godfreyphillipsindia/cash-flowVI/GPI#GPI","https://www.moneycontrol.com/financials/godfreyphillipsindia/ratiosVI/GPI#GPI"]


      for request_url, indicator_data in scrape_indicators(urls):
          # print(request_url)
          # print(indicator_data)
          print()
          # print()

      pepoints=0


      if(data['Mkt Cap (Rs. Cr.)']<20000.00 and data['Mkt Cap (Rs. Cr.)']>5000.00):
        cap="Mid Cap"
      elif (data['Mkt Cap (Rs. Cr.)']>20000.00):
        cap="Large Cap"
      else:
        cap="Small Cap"
      
      ##Indicator 1: Reserves & Surplus
      # print(indicator_data['RESERVES AND SURPLUS'])
      rands_list=[]
      count_reserves=0
      for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,0,-1):
        if(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i]>0):
          rands_list.append(round(((indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i])/indicator_data['RESERVES AND SURPLUS'][i])*100,2))
          # print(indicator_data['RESERVES AND SURPLUS'][i])
          count_reserves=count_reserves+20
          pepoints+=1
          # print(indicator_data['RESERVES AND SURPLUS'][i-1] , "-" , indicator_data['RESERVES AND SURPLUS'][i],"=", round(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i],2))
        else:
          rands_list.append(round(((indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i])/indicator_data['RESERVES AND SURPLUS'][i])*100,2))
          # print(indicator_data['RESERVES AND SURPLUS'][i])
          count_reserves=count_reserves-20
          pepoints-=1
          # print(indicator_data['RESERVES AND SURPLUS'][i-1],"-",indicator_data['RESERVES AND SURPLUS'][i],"=", round(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i],2))

      rands_list=rands_list[::-1]

      for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,-1,-1):
          if(indicator_data['RESERVES AND SURPLUS'][i]<0):
            count_reserves-=20
            pepoints-=1

      # print(count_reserves)
      # print(rands_list)

      ##Indicator 2: Revenue From Operations Gross
      count_revenuefromop=0
      revenue_list=[]
      # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])
      for i in range(len(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])-1,0,-1):
        if(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i]>0):
          revenue_list.append(round(((indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])/indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])*100,2))
          count_revenuefromop=count_revenuefromop+10
          # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1] , "-" , indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],"=", round(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],2))
        else:
          revenue_list.append(round(((indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])/indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])*100,2))
          count_revenuefromop=count_revenuefromop-10
          # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1],"-",indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],"=",round(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],2))

      revenue_list=revenue_list[::-1]

      for i in range(len(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])-1,-1,-1):
          if(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i]<0):
            count_revenuefromop-=15


      # print(count_revenuefromop)
      # print(revenue_list)





      ##Indicator 3: Profit/Loss for the period
      count_profitloss=0
      profit_list=[]
      # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'])
      for i in range(len(indicator_data['PROFIT/LOSS FOR THE PERIOD'])-1,0,-1):
        if(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i]>0):
          profit_list.append(round(((indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])/indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])*100,2))
          count_profitloss=count_profitloss+10
          # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1] , "-" , indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],"=", round(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],2))
        else:
          profit_list.append(round(((indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])/indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])*100,2))
          count_profitloss=count_profitloss-10
          # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1],"-",indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],"=",round(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],2))

      profit_list=profit_list[::-1]

      for i in range(len(indicator_data['PROFIT/LOSS FOR THE PERIOD'])-1,-1,-1):
          if(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i]<0):
            count_profitloss-=15

      # print(count_profitloss)
      # print(profit_list)

      # print(pepoints)

      ##Indicator 4: ROCE

      count_roce=0
      # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])
      for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,0,-1):
        if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]>-1):
          count_roce+=10
          # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1] , "-" , indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],"=", round(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],2))
        else:
          count_roce-=10
          # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1],"-",indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],"=",round(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],2))

      for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,-1,-1):
          if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]<10):
            count_roce-=15
            pepoints-=1
          else:
            if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]>10):
              count_roce+=15
              pepoints+=1


      for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,-1,-1):
          if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]<0):
            count_roce-=25

      roce_ind=indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][0]

      # print(count_roce)

      # print(pepoints)

      ##Indicator 5: Inventory Turnover Ratio
      count_ito=0
      # print(indicator_data['INVENTORY TURNOVER RATIO (X)'])
      for i in range(len(indicator_data['INVENTORY TURNOVER RATIO (X)'])-1,0,-1):
        if(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i]>0):
          count_ito+=20
          pepoints+=1
          # print(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1] , "-" , indicator_data['INVENTORY TURNOVER RATIO (X)'][i],"=", round(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i],2))
        else:
          count_ito-=10
          pepoints-=1
          # print(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1],"-",indicator_data['INVENTORY TURNOVER RATIO (X)'][i],"=",round(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i],2))
      # print(count_ito)

      # pepoints

      ##Indicator 6: Reserves & Surplus/Equity Share Capital
      # print(indicator_data['RESERVES AND SURPLUS'])
      # print(indicator_data['TOTAL SHARE CAPITAL'])
      # print()
      rsesc_list=[]
      for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,-1,-1):
              # print(indicator_data['RESERVES AND SURPLUS'][i])
              # print(indicator_data['RESERVES AND SURPLUS'][i] , "/" , indicator_data['TOTAL SHARE CAPITAL'][i],"=", round((indicator_data['RESERVES AND SURPLUS'][i]/indicator_data['TOTAL SHARE CAPITAL'][i]),2))
              rsesc_list.append(round(indicator_data['RESERVES AND SURPLUS'][i]/indicator_data['TOTAL SHARE CAPITAL'][i],2))

      # print()
      rsesc_list=rsesc_list[::-1]
      # print(rsesc_list)
      # print()
      count_rec=0
      for i in range(len(rsesc_list)-1,0,-1):
        if(rsesc_list[i-1]-rsesc_list[i]>0):
          count_rec+=20
          pepoints+=1
          # print(rsesc_list[i-1] , "-" , rsesc_list[i],"=", round(rsesc_list[i-1]-rsesc_list[i],2))
        else:
          count_rec-=10
          pepoints-=1
          # print(rsesc_list[i-1],"-",rsesc_list[i],"=",round(rsesc_list[i-1]-rsesc_list[i],2))


      for i in range(len(rsesc_list)-1,-1,-1):
          if(rsesc_list[i]<10):
            count_rec-=15

      for i in range(len(rsesc_list)-1,-1,-1):
          if(rsesc_list[i]<0):
            count_rec-=20


      # print(rsesc_list)
      # print(count_rec)



      # pepoints





      ## Indicator 7: Trade Receivables in Current Assets
      # print(indicator_data['TOTAL CURRENT ASSETS'])
      # print(indicator_data['TRADE RECEIVABLES'])

      trade_list=[]
      bonus=0
      for i in range(len(indicator_data['TOTAL CURRENT ASSETS'])-1,-1,-1):
                # print(indicator_data['TOTAL CURRENT ASSETS'][i] , "/" , indicator_data['TRADE RECEIVABLES'][i],"=", round((indicator_data['TOTAL CURRENT ASSETS'][i]/indicator_data['TRADE RECEIVABLES'][i]),2))
                if(round((indicator_data['TOTAL CURRENT ASSETS'][i]/indicator_data['TRADE RECEIVABLES'][i]),2)<50.00):
                  bonus+=10
                else:
                  bonus-=5
      # print(bonus)

      # print(pepoints)

      ## Indicator 8: Earnings Before Interest Tax

      indicator_data['PBIT MARGIN (%)']
      count_ebit=0
      # print(indicator_data['PBIT MARGIN (%)'])
      for i in range(len(indicator_data['PBIT MARGIN (%)'])-1,0,-1):
        if(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i]>0):
          count_ebit+=10
          pepoints+=1
          # print(indicator_data['PBIT MARGIN (%)'][i-1] , "-" , indicator_data['PBIT MARGIN (%)'][i],"=", round(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i],2))
        else:
          count_ebit-=5
          pepoints+=1
          # print(indicator_data['PBIT MARGIN (%)'][i-1],"-",indicator_data['PBIT MARGIN (%)'][i],"=",round(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i],2))

      for i in range(len(indicator_data['PBIT MARGIN (%)'])-1,-1,-1):
          if(indicator_data['PBIT MARGIN (%)'][i]<0):
            count_ebit-=20


      # print(count_ebit)

      # print(pepoints)

      ## Indicator 9: Debt To Equity Ratio

      count_debt=0
      # print(indicator_data["TOTAL DEBT/EQUITY (X)"])

      for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,0,-1):
        if(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i]>0):
          count_debt+=10
          # print(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1] , "-" , indicator_data['TOTAL DEBT/EQUITY (X)'][i],"=", round(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i],2))
        elif (indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i]==0):
              count_debt+=10
        else:
          count_debt-=5
          # print(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1],"-",indicator_data['TOTAL DEBT/EQUITY (X)'][i],"=",round(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i],2))
        
      for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,-1,-1):
          if(indicator_data['TOTAL DEBT/EQUITY (X)'][i]>2):
            count_debt-=15
            pepoints-=1
          else:
            count_debt+=15
            pepoints+=1

      for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,-1,-1):
          if(indicator_data['TOTAL DEBT/EQUITY (X)'][i]<0):
            count_debt-=20


      # print(count_debt)

      # pepoints

      ## Indicator 10: Current Ratio
      indicator_data['CURRENT RATIO (X)']

      count_currentratio=0
      # print(indicator_data["CURRENT RATIO (X)"])

      for i in range(len(indicator_data['CURRENT RATIO (X)'])-1,0,-1):
        if(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i]>0):
          count_currentratio+=10
          # print(indicator_data['CURRENT RATIO (X)'][i-1] , "-" , indicator_data['CURRENT RATIO (X)'][i],"=", round(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i],2))
        elif ((indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i])==0):
              count_currentratio+=10
        else:
          count_currentratio-=5
          # print(indicator_data['CURRENT RATIO (X)'][i-1],"-",indicator_data['CURRENT RATIO (X)'][i],"=",round(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i],2))

      for i in range(len(indicator_data['CURRENT RATIO (X)'])-1,-1,-1):
          if(indicator_data['CURRENT RATIO (X)'][i]<2):
            # print(indicator_data['CURRENT RATIO (X)'][i])
            count_currentratio-=10
            pepoints=pepoints-0.5
          elif (indicator_data['CURRENT RATIO (X)'][i]<1):
            count_currentratio-=20
            pepoints=pepoints-1
          else:
            count_currentratio+=10
            pepoints+=1


      # print(count_currentratio)

      # pepoints

      ##Indicator 11: Net Cashflow From Operating Activities
      count_netcashflow=0
      cashflow_list=[]
      # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])
      for i in range(len(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])-1,0,-1):
        if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]==0):
          indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]=indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]
        if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]>0):
          cashflow_list.append(round(((indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])/indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])*100,2))
          count_netcashflow=count_netcashflow+10
          pepoints+=1
          # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1] , "-" , indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],"=", round(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],2))
        else:
          cashflow_list.append(round(((indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])/indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])*100,2))
          count_netcashflow=count_netcashflow-10
          pepoints-=1
          # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1],"-",indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],"=",round(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],2))

      cashflow_list=cashflow_list[::-1]

      for i in range(len(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])-1,-1,-1):
          if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]<0):
            count_netcashflow-=15

      # print(count_netcashflow)
      # print(cashflow_list)

      ##Indicator 12: Free cash Flow
      stock_position=None
      stock_data=excel_data.values.tolist()
      stock_data
      for i in stock_data:
        for j in i:
          j=str(j)
          if(stock_name in j):
            # print(j.index(i))
            stock_position=stock_data.index(i)
            # print(j)
            break
            
      # print(stock_position)

      freecash_list=[]
      for i in range(5):
        freecash_list.append(stock_data[stock_position][i])
      # print(freecash_list)

      count_freecash=0
      for i in range(1,len(freecash_list)):
        if(freecash_list[i]-freecash_list[i-1]>0):
          # print(freecash_list[i],"-",freecash_list[i-1],"=",freecash_list[i]-freecash_list[i-1])
          count_freecash+=20
          pepoints+=1
        else:
          # print(freecash_list[i],"-",freecash_list[i-1],"=",freecash_list[i]-freecash_list[i-1])
          count_freecash-=10
          pepoints-=1

      for i in range(0,len(freecash_list)):
        if(freecash_list[i]<0):
          count_freecash-=20
          pepoints-=1

      # print(count_freecash)

      ##Indicator 15: Net sales from operations

      count_revenuefromopqt=0
      revenueqt_list=[]
      # print(indicator_data['NET SALES/INCOME FROM OPERATIONS'])
      for i in range(len(indicator_data['NET SALES/INCOME FROM OPERATIONS'])-1,0,-1):
        if(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1]-indicator_data['NET SALES/INCOME FROM OPERATIONS'][i]>0):
          revenueqt_list.append(round(((indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1]-indicator_data['NET SALES/INCOME FROM OPERATIONS'][i])/indicator_data['NET SALES/INCOME FROM OPERATIONS'][i])*100,2))
          count_revenuefromopqt=count_revenuefromopqt+15
          pepoints=pepoints+1
          # print(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1] , "-" , indicator_data['NET SALES/INCOME FROM OPERATIONS'][i],"=", round(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1]-indicator_data['NET SALES/INCOME FROM OPERATIONS'][i],2))
        else:
          revenueqt_list.append(round(((indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1]-indicator_data['NET SALES/INCOME FROM OPERATIONS'][i])/indicator_data['NET SALES/INCOME FROM OPERATIONS'][i])*100,2))
          count_revenuefromopqt=count_revenuefromopqt-15
          pepoints=pepoints-1
          # print(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1],"-",indicator_data['NET SALES/INCOME FROM OPERATIONS'][i],"=",round(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1]-indicator_data['NET SALES/INCOME FROM OPERATIONS'][i],2))

      revenueqt_list=revenueqt_list[::-1]

      for i in range(len(indicator_data['NET SALES/INCOME FROM OPERATIONS'])-1,-1,-1):
          if(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i]<0):
            count_revenuefromopqt-=15
            pepoints=pepoints-1

        ##Indicator 16: Net profit/loss
      count_profitqt=0
      profitqt_list=[]
      # print(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'])
      for i in range(len(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'])-1,0,-1):
        if(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1]-indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i]>0):
          profitqt_list.append(round(((indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1]-indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i])/indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i])*100,2))
          count_profitqt=count_profitqt+10
          pepoints=pepoints+1
          # print(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1] , "-" , indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i],"=", round(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1]-indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i],2))
        else:
          profitqt_list.append(round(((indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1]-indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i])/indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i])*100,2))
          count_profitqt=count_profitqt-10
          pepoints=pepoints-1
          # print(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1],"-",indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i],"=",round(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1]-indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i],2))

      profitqt_list=profitqt_list[::-1]

      for i in range(len(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'])-1,-1,-1):
          if(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i]<0):
            count_profitqt-=5
            pepoints=pepoints-1


      
      ##Indicator 13: Pledged shares
      for i in stock_data:
        for j in i:
          j=str(j)
          if(stock_name in j):
            # print(j.index(i))
            stock_position=stock_data.index(i)
            # print(j)
            break

      pledged_shares=stock_data[stock_position][15]
      # print(pledged_shares)
      stock_name=stock_data[stock_position][5]
      count_pshares=1
      if(pledged_shares>0):
        pepoints-=1
        count_pshares=count_pshares*-10
      else:
        pepoints+=1
        count_pshares=count_pshares*10


      ##Entities: Alpha & Beta
      alpha=round(stock_data[stock_position][9],2)
      # print("Alpha",alpha)
      beta=round(stock_data[stock_position][10],2)
      # print("Beta",beta)
      divy=data['Dividend Yield']
      # print("Dividend Yield",divy)

      cagr=stock_data[stock_position][8]
      # print("CAGR:", cagr)

      # pepoints

      ##Indicator 14: PE Ratio
      st_pe=data['TTM PE']
      se_pe=data['Sector PE']
      # print("Stock PE", st_pe)
      # print("Sector PE",se_pe)
      count_pe=1
      if(data['TTM PE']=="--"):
          count_pe=pepoints*12
      elif(data['TTM PE']<data['Sector PE']):
        count_pe=pepoints*15
      else:
        count_pe=pepoints*10

      # print(count_pe)



      #Predicting Target Price 
      flag=0
      target_price=None
      entry_price=None
      # int(indicator_data['ENTERPRISE VALUE (CR.)'])
      # print(indicator_data['EV/EBITDA (X)'])
      # print()

      ebitda_list=[]
      for i in range(len(indicator_data['ENTERPRISE VALUE (CR.)'])-1,-1,-1):
              if(indicator_data['ENTERPRISE VALUE (CR.)'][i]==0):

                flag=1
                break

              # print(indicator_data['ENTERPRISE VALUE (CR.)'][i] , "/" , indicator_data['EV/EBITDA (X)'][i],"=", round((indicator_data['ENTERPRISE VALUE (CR.)'][i]/indicator_data['EV/EBITDA (X)'][i]),2))
              ebitda_list.append(round(indicator_data['ENTERPRISE VALUE (CR.)'][i]/indicator_data['EV/EBITDA (X)'][i],2))
      if(flag==0):

        # print()
        ebitda_list=ebitda_list[::-1]

        # print(ebitda_list)
        growth_ebitda=[]
        for i in range(len(ebitda_list)-1,0,-1):
          # print(ebitda_list[i-1],"-",ebitda_list[i],"=",round(ebitda_list[i-1]-ebitda_list[i],2), "   ",round((ebitda_list[i-1]-ebitda_list[i])/ebitda_list[i]*100,2))
          growth_ebitda.append(round((ebitda_list[i-1]-ebitda_list[i])/ebitda_list[i]*100,2))

        # print()
        growth_ebitda=growth_ebitda[::-1]

        # print(growth_ebitda)
        # print()
        grow=0
        for i in range(len(growth_ebitda)-1):
          grow=grow+growth_ebitda[i]

        growth=round(grow/3,2)
        # print("Growth for last three years:", growth)
        # print()
        # print(ebitda_list[0])
        pred_ebitda=round(((100+growth)*ebitda_list[0])/100,2)

        # print("Predicted Ebitda:",pred_ebitda)


        # print()
        forecasted_ev= round(pred_ebitda*indicator_data['EV/EBITDA (X)'][0],2)

        # print()
        forecasted_ev=forecasted_ev-indicator_data['LONG TERM BORROWINGS'][0]
        forecasted_ev

        # print("Forecasted EV:",forecasted_ev)
        # print()
        target_price=round(forecasted_ev/shareholding,2)
        # print("Target Price:", target_price)

        entry_price=round(target_price*0.75,2)
        # print("Good Buy Price:",entry_price)

      points=bonus+count_currentratio+count_debt+count_ebit+count_ito+count_profitloss+count_rec+count_reserves+count_revenuefromop+count_roce+count_netcashflow+count_pe+count_freecash+count_pshares+count_revenuefromopqt+count_profitqt
      final_list=[]
      per_alc="6%"
      industry="Alcoholic Beverages"


      final_list.append(stock_name)
      final_list.append(cap)
      final_list.append(roce_ind)
      final_list.append(points)
      final_list.append(per_alc)
      final_list.append(industry)


      return final_list

  table=[]
  url_list=[]
        
  url_list=[[["MCDOWELL-N"],['https://www.moneycontrol.com/india/stockpricequote/breweriesdistilleries/unitedspirits/US'],['https://www.moneycontrol.com/financials/unitedspirits/balance-sheetVI/US#US','https://www.moneycontrol.com/financials/unitedspirits/profit-lossVI/US#US','https://www.moneycontrol.com/financials/unitedspirits/results/quarterly-results/US#US','https://www.moneycontrol.com/financials/unitedspirits/cash-flowVI/US#US','https://www.moneycontrol.com/financials/unitedspirits/ratiosVI/US#US']],
            [["UBL"],['https://www.moneycontrol.com/india/stockpricequote/breweriesdistilleries/unitedbreweries/UB02'],['https://www.moneycontrol.com/financials/unitedbreweries/balance-sheetVI/UB02#UB02','https://www.moneycontrol.com/financials/unitedbreweries/profit-lossVI/UB02#UB02','https://www.moneycontrol.com/financials/unitedbreweries/results/quarterly-results/UB02#UB02','https://www.moneycontrol.com/financials/unitedbreweries/cash-flowVI/UB02#UB02','https://www.moneycontrol.com/financials/unitedbreweries/ratiosVI/UB02#UB02']],
            [['RADICO'],['https://www.moneycontrol.com/india/stockpricequote/breweriesdistilleries/radicokhaitan/RK01'],['https://www.moneycontrol.com/financials/radicokhaitan/balance-sheetVI/RK01#RK01','https://www.moneycontrol.com/financials/radicokhaitan/profit-lossVI/RK01#RK01','https://www.moneycontrol.com/financials/radicokhaitan/results/quarterly-results/RK01#RK01','https://www.moneycontrol.com/financials/radicokhaitan/cash-flowVI/RK01#RK01','https://www.moneycontrol.com/financials/radicokhaitan/ratiosVI/RK01#RK01']],
            [['GLOBUSSPR'],['https://www.moneycontrol.com/india/stockpricequote/breweriesdistilleries/globusspirits/GS'],['https://www.moneycontrol.com/financials/globusspirits/balance-sheetVI/GS#GS','https://www.moneycontrol.com/financials/globusspirits/profit-lossVI/GS#GS','https://www.moneycontrol.com/financials/globusspirits/results/quarterly-results/GS#GS','https://www.moneycontrol.com/financials/globusspirits/cash-flowVI/GS#GS','https://www.moneycontrol.com/financials/globusspirits/ratiosVI/GS#GS']],
            [['GMBREW'],['https://www.moneycontrol.com/india/stockpricequote/breweriesdistilleries/gmbreweries/GMB'],['https://www.moneycontrol.com/financials/gmbreweries/balance-sheetVI/GMB#GMB','https://www.moneycontrol.com/financials/gmbreweries/profit-lossVI/GMB#GMB','https://www.moneycontrol.com/financials/gmbreweries/results/quarterly-results/GMB#GMB','https://www.moneycontrol.com/financials/gmbreweries/cash-flowVI/GMB#GMB','https://www.moneycontrol.com/financials/gmbreweries/ratiosVI/GMB#GMB']],
            [['ASALCBR'],['https://www.moneycontrol.com/india/stockpricequote/breweriesdistilleries/associatedalcoholbreweries/AAB'],['https://www.moneycontrol.com/financials/associatedalcoholbreweries/balance-sheetVI/AAB#AAB','https://www.moneycontrol.com/financials/associatedalcoholbreweries/profit-lossVI/AAB#AAB','https://www.moneycontrol.com/financials/associatedalcoholbreweries/results/quarterly-results/AAB#AAB','https://www.moneycontrol.com/financials/associatedalcoholbreweries/cash-flowVI/AAB#AAB','https://www.moneycontrol.com/financials/associatedalcoholbreweries/ratiosVI/AAB#AAB']]]


  for i in range(len(url_list)):
    list_input=[]
    for j in url_list[i]:
      list_input.append(j)
    stockname=list_input[0][0]
    url1=list_input[1][0]
    url2=list_input[2]
    # print(stockname,url1,url2)
    final_list=alchohol(stockname,url1,url2)
    table.append(final_list)
  df=pd.DataFrame(table,columns=['stock_name','cap','roce_ind','points','per_alc','industry'])
  df.sort_values(by='points', ascending=False,inplace=True)
  stock=[]
  df_final=df[['stock_name','cap','roce_ind','per_alc','industry']]
  
  stock= df_final[:1].values.tolist()
  
  portfolio.append(stock) 

  with open("allweather_stock.txt","w") as fmcgdata:
    stock_json=json.dumps(portfolio)
    fmcgdata.write(stock_json)  

    
  return portfolio


import datetime
from datetime import datetime


def function_allweather():
  currentDay = datetime.now().day
  currentMonth = datetime.now().month

  if(currentMonth in [11,2,5,8] and currentDay==20):
    result=allweather()
    return result
  else:
    try:
      data_file = open("allweather_stock.txt","r")
      list_stock = data_file.read()
      list_stock = json.loads(list_stock)

    except FileNotFoundError:
      
      list_stock = allweather()
    return list_stock


