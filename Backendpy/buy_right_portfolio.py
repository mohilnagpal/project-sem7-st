# -*- coding: utf-8 -*-
"""Buy_right_portfolio.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bl-oU3d4WM250elDEw0Yb94w-TF9XW9W
"""

from bs4 import BeautifulSoup
import requests
import pandas as pd 
import json
def buyright():
  def agropro(stockname,url1,url2):


    stock_name=stockname
    url = url1

    # Make a GET request to fetch the raw HTML content
    html_content = requests.get(url).text

    # Parse HTML code for the entire site
    soup = BeautifulSoup(html_content, "lxml")
    # print(soup)

    mc = soup.find_all("div", attrs={"class": "oview_table"})
    # print("Number of tables on site: ",len(mc))

    data = dict()
    for tb in mc[:4]:
        body = tb.find_all("tr")
        for i in body:
            vals = i.find_all("td")
            title = vals[0].text.strip()
            try:
                value = float(vals[1].text.replace(',',''))
            except ValueError:
                value = vals[1].text.replace(',','')
            data[title] = value
    # print(data)



    excel_data=pd.read_csv(r"C:\Users\mohil\OneDrive\Desktop\STOCKS_new.csv")
    excel_data.drop(columns=['Name (largecap alpha.csv)', 'Ticker (largecap alpha.csv)'],inplace=True)
    # excel_data.head(10)

    avg_price=round((data['Open']+data['Previous Close'])/2,2)
    shareholding=round((data['Mkt Cap (Rs. Cr.)']/avg_price),2)
    shareholding

    parameters_dict = dict()
    def scrape_indicators(urls):
        for url in urls:
            html_content = requests.get(url).text

            # Parse HTML code for the entire site
            soup = BeautifulSoup(html_content, "lxml")
            stonks = soup.find_all("div", attrs={"id": "standalone-new"})

            body = stonks[0].find_all("tr")

            indicator_dict = dict()

            for record in body:
                indicator = record.find_all("td")[0].text.upper()
                temp_indicator_values = []
                try:
                    for table_data in (record.find_all('td')[1:-1]):
                        temp_indicator_values.append(
                            float(table_data.text.replace(',', '')))
                except ValueError:
                    continue
                indicator_dict[indicator] = temp_indicator_values

            parameters_dict.update(indicator_dict)

        yield(url, parameters_dict)


        
    urls=url2


    for request_url, indicator_data in scrape_indicators(urls):
        # print(request_url)
        # print(indicator_data)
        print()
        print()

    pepoints=0


    if(data['Mkt Cap (Rs. Cr.)']<20000.00 and data['Mkt Cap (Rs. Cr.)']>5000.00):
      cap="Mid Cap"
    elif (data['Mkt Cap (Rs. Cr.)']>20000.00):
      cap="Large Cap"
    else:
      cap="Small Cap"
    
    ##Indicator 1: Reserves & Surplus
    # print(indicator_data['RESERVES AND SURPLUS'])
    rands_list=[]
    count_reserves=0
    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,0,-1):
      if(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i]>0):
        rands_list.append(round(((indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i])/indicator_data['RESERVES AND SURPLUS'][i])*100,2))
        # print(indicator_data['RESERVES AND SURPLUS'][i])
        count_reserves=count_reserves+20
        pepoints+=1
        # print(indicator_data['RESERVES AND SURPLUS'][i-1] , "-" , indicator_data['RESERVES AND SURPLUS'][i],"=", round(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i],2))
      else:
        rands_list.append(round(((indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i])/indicator_data['RESERVES AND SURPLUS'][i])*100,2))
        # print(indicator_data['RESERVES AND SURPLUS'][i])
        count_reserves=count_reserves-20
        pepoints-=1
        # print(indicator_data['RESERVES AND SURPLUS'][i-1],"-",indicator_data['RESERVES AND SURPLUS'][i],"=", round(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i],2))

    rands_list=rands_list[::-1]

    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,-1,-1):
        if(indicator_data['RESERVES AND SURPLUS'][i]<0):
          count_reserves-=20
          pepoints-=1

    # print(count_reserves)
    # print(rands_list)

    ##Indicator 2: Revenue From Operations Gross
    count_revenuefromop=0
    revenue_list=[]
    # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])
    for i in range(len(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])-1,0,-1):
      if(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i]>0):
        revenue_list.append(round(((indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])/indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])*100,2))
        count_revenuefromop=count_revenuefromop+10
        # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1] , "-" , indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],"=", round(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],2))
      else:
        revenue_list.append(round(((indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])/indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])*100,2))
        count_revenuefromop=count_revenuefromop-10
        # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1],"-",indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],"=",round(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],2))

    revenue_list=revenue_list[::-1]

    for i in range(len(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])-1,-1,-1):
        if(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i]<0):
          count_revenuefromop-=15


    # print(count_revenuefromop)
    # print(revenue_list)





    ##Indicator 3: Profit/Loss for the period
    count_profitloss=0
    profit_list=[]
    # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'])
    for i in range(len(indicator_data['PROFIT/LOSS FOR THE PERIOD'])-1,0,-1):
      if(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i]>0):
        profit_list.append(round(((indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])/indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])*100,2))
        count_profitloss=count_profitloss+10
        # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1] , "-" , indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],"=", round(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],2))
      else:
        profit_list.append(round(((indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])/indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])*100,2))
        count_profitloss=count_profitloss-10
        # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1],"-",indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],"=",round(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],2))

    profit_list=profit_list[::-1]

    for i in range(len(indicator_data['PROFIT/LOSS FOR THE PERIOD'])-1,-1,-1):
        if(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i]<0):
          count_profitloss-=15

    # print(count_profitloss)
    # print(profit_list)

    # print(pepoints)

    ##Indicator 4: ROCE

    count_roce=0
    # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])
    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,0,-1):
      if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]>-1):
        count_roce+=10
        # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1] , "-" , indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],"=", round(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],2))
      else:
        count_roce-=10
        # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1],"-",indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],"=",round(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],2))

    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,-1,-1):
        if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]<10):
          count_roce-=15
          pepoints-=1
        else:
          if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]>10):
            count_roce+=15
            pepoints+=1


    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,-1,-1):
        if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]<0):
          count_roce-=25

    roce_ind=indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][0]

    # print(count_roce)

    # print(pepoints)

    ##Indicator 5: Inventory Turnover Ratio
    count_ito=0
    # print(indicator_data['INVENTORY TURNOVER RATIO (X)'])
    for i in range(len(indicator_data['INVENTORY TURNOVER RATIO (X)'])-1,0,-1):
      if(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i]>0):
        count_ito+=20
        pepoints+=1
        # print(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1] , "-" , indicator_data['INVENTORY TURNOVER RATIO (X)'][i],"=", round(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i],2))
      else:
        count_ito-=10
        pepoints-=1
        # print(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1],"-",indicator_data['INVENTORY TURNOVER RATIO (X)'][i],"=",round(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i],2))
    # print(count_ito)

    # pepoints

    ##Indicator 6: Reserves & Surplus/Equity Share Capital
    # print(indicator_data['RESERVES AND SURPLUS'])
    # print(indicator_data['TOTAL SHARE CAPITAL'])
    print()
    rsesc_list=[]
    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,-1,-1):
            # print(indicator_data['RESERVES AND SURPLUS'][i])
            # print(indicator_data['RESERVES AND SURPLUS'][i] , "/" , indicator_data['TOTAL SHARE CAPITAL'][i],"=", round((indicator_data['RESERVES AND SURPLUS'][i]/indicator_data['TOTAL SHARE CAPITAL'][i]),2))
            rsesc_list.append(round(indicator_data['RESERVES AND SURPLUS'][i]/indicator_data['TOTAL SHARE CAPITAL'][i],2))

    print()
    rsesc_list=rsesc_list[::-1]
    # print(rsesc_list)
    print()
    count_rec=0
    for i in range(len(rsesc_list)-1,0,-1):
      if(rsesc_list[i-1]-rsesc_list[i]>0):
        count_rec+=20
        pepoints+=1
        # print(rsesc_list[i-1] , "-" , rsesc_list[i],"=", round(rsesc_list[i-1]-rsesc_list[i],2))
      else:
        count_rec-=10
        pepoints-=1
        # print(rsesc_list[i-1],"-",rsesc_list[i],"=",round(rsesc_list[i-1]-rsesc_list[i],2))


    for i in range(len(rsesc_list)-1,-1,-1):
        if(rsesc_list[i]<10):
          count_rec-=15

    for i in range(len(rsesc_list)-1,-1,-1):
        if(rsesc_list[i]<0):
          count_rec-=20


    # print(rsesc_list)
    # print(count_rec)



    # pepoints





    ## Indicator 7: Trade Receivables in Current Assets
    # print(indicator_data['TOTAL CURRENT ASSETS'])
    # print(indicator_data['TRADE RECEIVABLES'])

    trade_list=[]
    bonus=0
    for i in range(len(indicator_data['TOTAL CURRENT ASSETS'])-1,-1,-1):
              # print(indicator_data['TOTAL CURRENT ASSETS'][i] , "/" , indicator_data['TRADE RECEIVABLES'][i],"=", round((indicator_data['TOTAL CURRENT ASSETS'][i]/indicator_data['TRADE RECEIVABLES'][i]),2))
              if(round((indicator_data['TOTAL CURRENT ASSETS'][i]/indicator_data['TRADE RECEIVABLES'][i]),2)<50.00):
                bonus+=10
              else:
                bonus-=5
    # print(bonus)

    # print(pepoints)

    ## Indicator 8: Earnings Before Interest Tax

    indicator_data['PBIT MARGIN (%)']
    count_ebit=0
    # print(indicator_data['PBIT MARGIN (%)'])
    for i in range(len(indicator_data['PBIT MARGIN (%)'])-1,0,-1):
      if(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i]>0):
        count_ebit+=10
        pepoints+=1
        # print(indicator_data['PBIT MARGIN (%)'][i-1] , "-" , indicator_data['PBIT MARGIN (%)'][i],"=", round(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i],2))
      else:
        count_ebit-=5
        pepoints+=1
        # print(indicator_data['PBIT MARGIN (%)'][i-1],"-",indicator_data['PBIT MARGIN (%)'][i],"=",round(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i],2))

    for i in range(len(indicator_data['PBIT MARGIN (%)'])-1,-1,-1):
        if(indicator_data['PBIT MARGIN (%)'][i]<0):
          count_ebit-=20


    # print(count_ebit)

    # print(pepoints)

    ## Indicator 9: Debt To Equity Ratio

    count_debt=0
    # print(indicator_data["TOTAL DEBT/EQUITY (X)"])

    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,0,-1):
      if(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i]>0):
        count_debt+=10
        # print(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1] , "-" , indicator_data['TOTAL DEBT/EQUITY (X)'][i],"=", round(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i],2))
      elif (indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i]==0):
            count_debt+=10
      else:
        count_debt-=5
        # print(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1],"-",indicator_data['TOTAL DEBT/EQUITY (X)'][i],"=",round(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i],2))
      
    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,-1,-1):
        if(indicator_data['TOTAL DEBT/EQUITY (X)'][i]>2):
          count_debt-=15
          pepoints-=1
        else:
          count_debt+=15
          pepoints+=1

    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,-1,-1):
        if(indicator_data['TOTAL DEBT/EQUITY (X)'][i]<0):
          count_debt-=20


    # print(count_debt)

    # pepoints

    ## Indicator 10: Current Ratio
    indicator_data['CURRENT RATIO (X)']

    count_currentratio=0
    # print(indicator_data["CURRENT RATIO (X)"])

    for i in range(len(indicator_data['CURRENT RATIO (X)'])-1,0,-1):
      if(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i]>0):
        count_currentratio+=10
        # print(indicator_data['CURRENT RATIO (X)'][i-1] , "-" , indicator_data['CURRENT RATIO (X)'][i],"=", round(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i],2))
      elif ((indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i])==0):
            count_currentratio+=10
      else:
        count_currentratio-=5
        # print(indicator_data['CURRENT RATIO (X)'][i-1],"-",indicator_data['CURRENT RATIO (X)'][i],"=",round(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i],2))

    for i in range(len(indicator_data['CURRENT RATIO (X)'])-1,-1,-1):
        if(indicator_data['CURRENT RATIO (X)'][i]<2):
          # print(indicator_data['CURRENT RATIO (X)'][i])
          count_currentratio-=10
          pepoints=pepoints-0.5
        elif (indicator_data['CURRENT RATIO (X)'][i]<1):
          count_currentratio-=20
          pepoints=pepoints-1
        else:
          count_currentratio+=10
          pepoints+=1


    # print(count_currentratio)

    # pepoints

    ##Indicator 11: Net Cashflow From Operating Activities
    count_netcashflow=0
    cashflow_list=[]
    # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])
    for i in range(len(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])-1,0,-1):
      if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]==0):
        indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]=indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]
      if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]>0):
        cashflow_list.append(round(((indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])/indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])*100,2))
        count_netcashflow=count_netcashflow+10
        pepoints+=1
        # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1] , "-" , indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],"=", round(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],2))
      else:
        cashflow_list.append(round(((indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])/indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])*100,2))
        count_netcashflow=count_netcashflow-10
        pepoints-=1
        # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1],"-",indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],"=",round(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],2))

    cashflow_list=cashflow_list[::-1]

    for i in range(len(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])-1,-1,-1):
        if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]<0):
          count_netcashflow-=15

    # print(count_netcashflow)
    # print(cashflow_list)

    ##Indicator 12: Free cash Flow
    stock_position=None
    stock_data=excel_data.values.tolist()
    stock_data
    for i in stock_data:
      for j in i:
        j=str(j)
        if(stock_name in j):
          # print(j.index(i))
          stock_position=stock_data.index(i)
          # print(j)
          break
          
    # print(stock_position)

    freecash_list=[]
    for i in range(5):
      freecash_list.append(stock_data[stock_position][i])
    # print(freecash_list)

    count_freecash=0
    for i in range(1,len(freecash_list)):
      if(freecash_list[i]-freecash_list[i-1]>0):
        # print(freecash_list[i],"-",freecash_list[i-1],"=",freecash_list[i]-freecash_list[i-1])
        count_freecash+=20
        pepoints+=1
      else:
        # print(freecash_list[i],"-",freecash_list[i-1],"=",freecash_list[i]-freecash_list[i-1])
        count_freecash-=10
        pepoints-=1

    for i in range(0,len(freecash_list)):
      if(freecash_list[i]<0):
        count_freecash-=20
        pepoints-=1

    # print(count_freecash)

    ##Indicator 15: Net sales from operations

    count_revenuefromopqt=0
    revenueqt_list=[]
    # print(indicator_data['NET SALES/INCOME FROM OPERATIONS'])
    for i in range(len(indicator_data['NET SALES/INCOME FROM OPERATIONS'])-1,0,-1):
      if(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1]-indicator_data['NET SALES/INCOME FROM OPERATIONS'][i]>0):
        revenueqt_list.append(round(((indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1]-indicator_data['NET SALES/INCOME FROM OPERATIONS'][i])/indicator_data['NET SALES/INCOME FROM OPERATIONS'][i])*100,2))
        count_revenuefromopqt=count_revenuefromopqt+15
        pepoints=pepoints+1
        # print(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1] , "-" , indicator_data['NET SALES/INCOME FROM OPERATIONS'][i],"=", round(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1]-indicator_data['NET SALES/INCOME FROM OPERATIONS'][i],2))
      else:
        revenueqt_list.append(round(((indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1]-indicator_data['NET SALES/INCOME FROM OPERATIONS'][i])/indicator_data['NET SALES/INCOME FROM OPERATIONS'][i])*100,2))
        count_revenuefromopqt=count_revenuefromopqt-15
        pepoints=pepoints-1
        # print(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1],"-",indicator_data['NET SALES/INCOME FROM OPERATIONS'][i],"=",round(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1]-indicator_data['NET SALES/INCOME FROM OPERATIONS'][i],2))

    revenueqt_list=revenueqt_list[::-1]

    for i in range(len(indicator_data['NET SALES/INCOME FROM OPERATIONS'])-1,-1,-1):
        if(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i]<0):
          count_revenuefromopqt-=15
          pepoints=pepoints-1

      ##Indicator 16: Net profit/loss
    count_profitqt=0
    profitqt_list=[]
    # print(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'])
    for i in range(len(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'])-1,0,-1):
      if(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1]-indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i]>0):
        profitqt_list.append(round(((indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1]-indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i])/indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i])*100,2))
        count_profitqt=count_profitqt+10
        pepoints=pepoints+1
        # print(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1] , "-" , indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i],"=", round(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1]-indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i],2))
      else:
        profitqt_list.append(round(((indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1]-indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i])/indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i])*100,2))
        count_profitqt=count_profitqt-10
        pepoints=pepoints-1
        # print(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1],"-",indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i],"=",round(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1]-indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i],2))

    profitqt_list=profitqt_list[::-1]

    for i in range(len(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'])-1,-1,-1):
        if(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i]<0):
          count_profitqt-=5
          pepoints=pepoints-1


    
    ##Indicator 13: Pledged shares
    for i in stock_data:
      for j in i:
        j=str(j)
        if(stock_name in j):
          # print(j.index(i))
          stock_position=stock_data.index(i)
          # print(j)
          break

    pledged_shares=stock_data[stock_position][15]
    # print(pledged_shares)
    stock_name=stock_data[stock_position][5]
    count_pshares=1
    if(pledged_shares>0):
      pepoints-=1
      count_pshares=count_pshares*-10
    else:
      pepoints+=1
      count_pshares=count_pshares*10


    ##Entities: Alpha & Beta
    alpha=round(stock_data[stock_position][9],2)
    # print("Alpha",alpha)
    beta=round(stock_data[stock_position][10],2)
    # print("Beta",beta)
    divy=data['Dividend Yield']
    # print("Dividend Yield",divy)

    cagr=stock_data[stock_position][8]
    # print("CAGR:", cagr)

    # pepoints

    ##Indicator 14: PE Ratio
    st_pe=data['TTM PE']
    se_pe=data['Sector PE']
    # print("Stock PE", st_pe)
    # print("Sector PE",se_pe)
    count_pe=1
    if(data['TTM PE']=="--"):
        count_pe=pepoints*12
    elif(data['TTM PE']<data['Sector PE']):
      count_pe=pepoints*15
    else:
      count_pe=pepoints*10

    # print(count_pe)



    #Predicting Target Price 
    flag=0
    target_price=None
    entry_price=None
    # int(indicator_data['ENTERPRISE VALUE (CR.)'])
    # print(indicator_data['EV/EBITDA (X)'])
    print()

    ebitda_list=[]
    for i in range(len(indicator_data['ENTERPRISE VALUE (CR.)'])-1,-1,-1):
            if(indicator_data['ENTERPRISE VALUE (CR.)'][i]==0):

              flag=1
              break

            # print(indicator_data['ENTERPRISE VALUE (CR.)'][i] , "/" , indicator_data['EV/EBITDA (X)'][i],"=", round((indicator_data['ENTERPRISE VALUE (CR.)'][i]/indicator_data['EV/EBITDA (X)'][i]),2))
            ebitda_list.append(round(indicator_data['ENTERPRISE VALUE (CR.)'][i]/indicator_data['EV/EBITDA (X)'][i],2))
    if(flag==0):

      print()
      ebitda_list=ebitda_list[::-1]

      # print(ebitda_list)
      growth_ebitda=[]
      for i in range(len(ebitda_list)-1,0,-1):
        # print(ebitda_list[i-1],"-",ebitda_list[i],"=",round(ebitda_list[i-1]-ebitda_list[i],2), "   ",round((ebitda_list[i-1]-ebitda_list[i])/ebitda_list[i]*100,2))
        growth_ebitda.append(round((ebitda_list[i-1]-ebitda_list[i])/ebitda_list[i]*100,2))

      print()
      growth_ebitda=growth_ebitda[::-1]

      # print(growth_ebitda)
      print()
      grow=0
      for i in range(len(growth_ebitda)-1):
        grow=grow+growth_ebitda[i]

      growth=round(grow/3,2)
      # print("Growth for last three years:", growth)
      print()
      # print(ebitda_list[0])
      pred_ebitda=round(((100+growth)*ebitda_list[0])/100,2)

      # print("Predicted Ebitda:",pred_ebitda)


      print()
      forecasted_ev= round(pred_ebitda*indicator_data['EV/EBITDA (X)'][0],2)

      print()
      forecasted_ev=forecasted_ev-indicator_data['LONG TERM BORROWINGS'][0]
      forecasted_ev

      # print("Forecasted EV:",forecasted_ev)
      print()
      target_price=round(forecasted_ev/shareholding,2)
      # print("Target Price:", target_price)

      entry_price=round(target_price*0.75,2)
      # print("Good Buy Price:",entry_price)

    points=bonus+count_currentratio+count_debt+count_ebit+count_ito+count_profitloss+count_rec+count_reserves+count_revenuefromop+count_roce+count_netcashflow+count_pe+count_freecash+count_pshares+count_revenuefromopqt+count_profitqt
    final_list=[]
    per_tea="6.5%"
    industry="Tea & Coffee"
    
    
    final_list.append(stock_name)
    final_list.append(cap)
    final_list.append(roce_ind)
    final_list.append(points)
    final_list.append(per_tea)
    final_list.append(industry)
    

    return final_list

  table=[]
  url_list=[]
        
  url_list=[[["TATACONSUM"],['https://www.moneycontrol.com/india/stockpricequote/plantationsteacoffee/tataconsumerproducts/TT'],['https://www.moneycontrol.com/financials/tataconsumerproducts/balance-sheetVI/TT#TT','https://www.moneycontrol.com/financials/tataconsumerproducts/profit-lossVI/TT#TT','https://www.moneycontrol.com/financials/tataconsumerproducts/results/quarterly-results/TT#TT','https://www.moneycontrol.com/financials/tataconsumerproducts/cash-flowVI/TT#TT','https://www.moneycontrol.com/financials/tataconsumerproducts/ratiosVI/TT#TT']],
            [["CCL Products India Ltd"],['https://www.moneycontrol.com/india/stockpricequote/plantationsteacoffee/cclproductsindia/CC10'],['https://www.moneycontrol.com/financials/cclproductsindia/balance-sheetVI/CC10#CC10','https://www.moneycontrol.com/financials/cclproductsindia/profit-lossVI/CC10#CC10','https://www.moneycontrol.com/financials/cclproductsindia/results/quarterly-results/CC10#CC10','https://www.moneycontrol.com/financials/cclproductsindia/cash-flowVI/CC10#CC10','https://www.moneycontrol.com/financials/cclproductsindia/ratiosVI/CC10#CC10']],
            [['TATACOFFEE'],['https://www.moneycontrol.com/india/stockpricequote/plantationsteacoffee/tatacoffee/TC14'],['https://www.moneycontrol.com/financials/tatacoffee/balance-sheetVI/TC14#TC14','https://www.moneycontrol.com/financials/tatacoffee/profit-lossVI/TC14#TC14','https://www.moneycontrol.com/financials/tatacoffee/results/quarterly-results/TC14#TC14','https://www.moneycontrol.com/financials/tatacoffee/cash-flowVI/TC14#TC14','https://www.moneycontrol.com/financials/tatacoffee/ratiosVI/TC14#TC14']],
            [['GODREJAGRO'],['https://www.moneycontrol.com/india/stockpricequote/personalcare/godrejconsumerproducts/GCP'],['https://www.moneycontrol.com/financials/godrejconsumerproducts/balance-sheetVI/GCP#GCP','https://www.moneycontrol.com/financials/godrejconsumerproducts/profit-lossVI/GCP#GCP','https://www.moneycontrol.com/financials/godrejconsumerproducts/results/quarterly-results/GCP#GCP','https://www.moneycontrol.com/financials/godrejconsumerproducts/cash-flowVI/GCP#GCP','https://www.moneycontrol.com/financials/godrejconsumerproducts/ratiosVI/GCP#GCP']],
            [['GAEL'],['https://www.moneycontrol.com/india/stockpricequote/gujambexports/gujaratambujaexports/GAE'],['https://www.moneycontrol.com/financials/gujaratambujaexports/balance-sheetVI/GAE#GAE','https://www.moneycontrol.com/financials/gujaratambujaexports/profit-lossVI/GAE#GAE','https://www.moneycontrol.com/financials/gujaratambujaexports/results/quarterly-results/GAE#GAE','https://www.moneycontrol.com/financials/gujaratambujaexports/cash-flowVI/GAE#GAE','https://www.moneycontrol.com/financials/gujaratambujaexports/ratiosVI/GAE#GAE']],
            [['HARRMALAYA'],['https://www.moneycontrol.com/india/stockpricequote/plantationsteacoffee/harrisonsmalyalam/HM02'],['https://www.moneycontrol.com/financials/harrisonsmalyalam/balance-sheetVI/HM02#HM02','https://www.moneycontrol.com/financials/harrisonsmalyalam/profit-lossVI/HM02#HM02','https://www.moneycontrol.com/financials/harrisonsmalyalam/results/quarterly-results/HM02#HM02','https://www.moneycontrol.com/financials/harrisonsmalyalam/cash-flowVI/HM02#HM02','https://www.moneycontrol.com/financials/harrisonsmalyalam/ratiosVI/HM02#HM02']],
            [['AVTNPL'],['https://www.moneycontrol.com/india/stockpricequote/edibleoilssolventextraction/avtnaturalproducts/AVT02'],['https://www.moneycontrol.com/financials/avtnaturalproducts/balance-sheetVI/AVT02#AVT02','https://www.moneycontrol.com/financials/avtnaturalproducts/profit-lossVI/AVT02#AVT02','https://www.moneycontrol.com/financials/avtnaturalproducts/results/quarterly-results/AVT02#AVT02','https://www.moneycontrol.com/financials/avtnaturalproducts/cash-flowVI/AVT02#AVT02','https://www.moneycontrol.com/financials/avtnaturalproducts/ratiosVI/AVT02#AVT02']]]

          
  for i in range(len(url_list)):
    list_input=[]
    for j in url_list[i]:
      list_input.append(j)
    stockname=list_input[0][0]
    url1=list_input[1][0]
    url2=list_input[2]
    print(stockname,url1,url2)
    final_list=agropro(stockname,url1,url2)
    table.append(final_list)
  df=pd.DataFrame(table,columns=['stock_name','cap','roce_ind','points','per_tea','industry'])
  df.sort_values(by='points', ascending=False,inplace=True)
  stock=[]
  portfolio=[]
  df_final=df[['stock_name','cap','roce_ind','per_tea','industry']]
    
  stock= df_final[:2].values.tolist()
    
  portfolio.append(stock) 

  def fert(stockname,url1,url2):


      stock_name=stockname
      url = url1

      # Make a GET request to fetch the raw HTML content
      html_content = requests.get(url).text

      # Parse HTML code for the entire site
      soup = BeautifulSoup(html_content, "lxml")
      # print(soup)

      mc = soup.find_all("div", attrs={"class": "oview_table"})
      # print("Number of tables on site: ",len(mc))

      data = dict()
      for tb in mc[:4]:
          body = tb.find_all("tr")
          for i in body:
              vals = i.find_all("td")
              title = vals[0].text.strip()
              try:
                  value = float(vals[1].text.replace(',',''))
              except ValueError:
                  value = vals[1].text.replace(',','')
              data[title] = value
      # print(data)



      excel_data=pd.read_csv(r"C:\Users\mohil\OneDrive\Desktop\STOCKS_new.csv")
      excel_data.drop(columns=['Name (largecap alpha.csv)', 'Ticker (largecap alpha.csv)'],inplace=True)
      # excel_data.head(10)

      avg_price=round((data['Open']+data['Previous Close'])/2,2)
      shareholding=round((data['Mkt Cap (Rs. Cr.)']/avg_price),2)
      shareholding

      parameters_dict = dict()
      def scrape_indicators(urls):
          for url in urls:
              html_content = requests.get(url).text

              # Parse HTML code for the entire site
              soup = BeautifulSoup(html_content, "lxml")
              stonks = soup.find_all("div", attrs={"id": "standalone-new"})

              body = stonks[0].find_all("tr")

              indicator_dict = dict()

              for record in body:
                  indicator = record.find_all("td")[0].text.upper()
                  temp_indicator_values = []
                  try:
                      for table_data in (record.find_all('td')[1:-1]):
                          temp_indicator_values.append(
                              float(table_data.text.replace(',', '')))
                  except ValueError:
                      continue
                  indicator_dict[indicator] = temp_indicator_values

              parameters_dict.update(indicator_dict)

          yield(url, parameters_dict)


      
          
      urls=url2
      # urls = ["https://www.moneycontrol.com/financials/godfreyphillipsindia/balance-sheetVI/GPI#GPI","https://www.moneycontrol.com/financials/godfreyphillipsindia/profit-lossVI/GPI#GPI","https://www.moneycontrol.com/financials/godfreyphillipsindia/cash-flowVI/GPI#GPI","https://www.moneycontrol.com/financials/godfreyphillipsindia/ratiosVI/GPI#GPI"]


      for request_url, indicator_data in scrape_indicators(urls):
          # print(request_url)
          # print(indicator_data)
          print()
          print()

      if(data['Mkt Cap (Rs. Cr.)']<20000.00 and data['Mkt Cap (Rs. Cr.)']>5000.00):
        cap="Mid Cap"
      elif (data['Mkt Cap (Rs. Cr.)']>20000.00):
        cap="Large Cap"
      else:
        cap="Small Cap"
      

      pepoints=0



      ##Indicator 1: Reserves & Surplus
      # print(indicator_data['RESERVES AND SURPLUS'])
      rands_list=[]
      count_reserves=0
      for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,0,-1):
        if(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i]>0):
          rands_list.append(round(((indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i])/indicator_data['RESERVES AND SURPLUS'][i])*100,2))
          # print(indicator_data['RESERVES AND SURPLUS'][i])
          count_reserves=count_reserves+20
          pepoints+=1
          # print(indicator_data['RESERVES AND SURPLUS'][i-1] , "-" , indicator_data['RESERVES AND SURPLUS'][i],"=", round(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i],2))
        else:
          rands_list.append(round(((indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i])/indicator_data['RESERVES AND SURPLUS'][i])*100,2))
          # print(indicator_data['RESERVES AND SURPLUS'][i])
          count_reserves=count_reserves-20
          pepoints-=1
          # print(indicator_data['RESERVES AND SURPLUS'][i-1],"-",indicator_data['RESERVES AND SURPLUS'][i],"=", round(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i],2))

      rands_list=rands_list[::-1]

      for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,-1,-1):
          if(indicator_data['RESERVES AND SURPLUS'][i]<0):
            count_reserves-=20
            pepoints-=1

      # print(count_reserves)
      # print(rands_list)

      ##Indicator 2: Revenue From Operations Gross
      count_revenuefromop=0
      revenue_list=[]
      # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])
      for i in range(len(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])-1,0,-1):
        if(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i]>0):
          revenue_list.append(round(((indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])/indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])*100,2))
          count_revenuefromop=count_revenuefromop+10
          # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1] , "-" , indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],"=", round(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],2))
        else:
          revenue_list.append(round(((indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])/indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])*100,2))
          count_revenuefromop=count_revenuefromop-10
          # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1],"-",indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],"=",round(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],2))

      revenue_list=revenue_list[::-1]

      for i in range(len(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])-1,-1,-1):
          if(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i]<0):
            count_revenuefromop-=15


      # print(count_revenuefromop)
      # print(revenue_list)





      ##Indicator 3: Profit/Loss for the period
      count_profitloss=0
      profit_list=[]
      # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'])
      for i in range(len(indicator_data['PROFIT/LOSS FOR THE PERIOD'])-1,0,-1):
        if(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i]>0):
          profit_list.append(round(((indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])/indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])*100,2))
          count_profitloss=count_profitloss+10
          # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1] , "-" , indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],"=", round(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],2))
        else:
          profit_list.append(round(((indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])/indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])*100,2))
          count_profitloss=count_profitloss-10
          # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1],"-",indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],"=",round(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],2))

      profit_list=profit_list[::-1]

      for i in range(len(indicator_data['PROFIT/LOSS FOR THE PERIOD'])-1,-1,-1):
          if(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i]<0):
            count_profitloss-=15

      # print(count_profitloss)
      # print(profit_list)

      # print(pepoints)

      ##Indicator 4: ROCE

      count_roce=0
      # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])
      for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,0,-1):
        if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]>-1):
          count_roce+=10
          # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1] , "-" , indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],"=", round(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],2))
        else:
          count_roce-=10
          # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1],"-",indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],"=",round(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],2))

      for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,-1,-1):
          if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]<10):
            count_roce-=15
            pepoints-=1
          else:
            if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]>10):
              count_roce+=15
              pepoints+=1


      for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,-1,-1):
          if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]<0):
            count_roce-=25

      roce_ind=indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][0]

      # print(count_roce)

      # print(pepoints)

      ##Indicator 5: Inventory Turnover Ratio
      count_ito=0
      # print(indicator_data['INVENTORY TURNOVER RATIO (X)'])
      for i in range(len(indicator_data['INVENTORY TURNOVER RATIO (X)'])-1,0,-1):
        if(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i]>0):
          count_ito+=20
          pepoints+=1
          # print(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1] , "-" , indicator_data['INVENTORY TURNOVER RATIO (X)'][i],"=", round(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i],2))
        else:
          count_ito-=10
          pepoints-=1
          # print(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1],"-",indicator_data['INVENTORY TURNOVER RATIO (X)'][i],"=",round(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i],2))
      # print(count_ito)

      # pepoints

      ##Indicator 6: Reserves & Surplus/Equity Share Capital
      # print(indicator_data['RESERVES AND SURPLUS'])
      # print(indicator_data['TOTAL SHARE CAPITAL'])
      print()
      rsesc_list=[]
      for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,-1,-1):
              # print(indicator_data['RESERVES AND SURPLUS'][i])
              # print(indicator_data['RESERVES AND SURPLUS'][i] , "/" , indicator_data['TOTAL SHARE CAPITAL'][i],"=", round((indicator_data['RESERVES AND SURPLUS'][i]/indicator_data['TOTAL SHARE CAPITAL'][i]),2))
              rsesc_list.append(round(indicator_data['RESERVES AND SURPLUS'][i]/indicator_data['TOTAL SHARE CAPITAL'][i],2))

      print()
      rsesc_list=rsesc_list[::-1]
      # print(rsesc_list)
      print()
      count_rec=0
      for i in range(len(rsesc_list)-1,0,-1):
        if(rsesc_list[i-1]-rsesc_list[i]>0):
          count_rec+=20
          pepoints+=1
          # print(rsesc_list[i-1] , "-" , rsesc_list[i],"=", round(rsesc_list[i-1]-rsesc_list[i],2))
        else:
          count_rec-=10
          pepoints-=1
          # print(rsesc_list[i-1],"-",rsesc_list[i],"=",round(rsesc_list[i-1]-rsesc_list[i],2))


      for i in range(len(rsesc_list)-1,-1,-1):
          if(rsesc_list[i]<10):
            count_rec-=15

      for i in range(len(rsesc_list)-1,-1,-1):
          if(rsesc_list[i]<0):
            count_rec-=20


      # print(rsesc_list)
      # print(count_rec)



      # pepoints





      ## Indicator 7: Trade Receivables in Current Assets
      # print(indicator_data['TOTAL CURRENT ASSETS'])
      # print(indicator_data['TRADE RECEIVABLES'])

      trade_list=[]
      bonus=0
      for i in range(len(indicator_data['TOTAL CURRENT ASSETS'])-1,-1,-1):
                # print(indicator_data['TOTAL CURRENT ASSETS'][i] , "/" , indicator_data['TRADE RECEIVABLES'][i],"=", round((indicator_data['TOTAL CURRENT ASSETS'][i]/indicator_data['TRADE RECEIVABLES'][i]),2))
                if(round((indicator_data['TOTAL CURRENT ASSETS'][i]/indicator_data['TRADE RECEIVABLES'][i]),2)<50.00):
                  bonus+=10
                else:
                  bonus-=5
      # print(bonus)

      # print(pepoints)

      ## Indicator 8: Earnings Before Interest Tax

      indicator_data['PBIT MARGIN (%)']
      count_ebit=0
      # print(indicator_data['PBIT MARGIN (%)'])
      for i in range(len(indicator_data['PBIT MARGIN (%)'])-1,0,-1):
        if(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i]>0):
          count_ebit+=10
          pepoints+=1
          # print(indicator_data['PBIT MARGIN (%)'][i-1] , "-" , indicator_data['PBIT MARGIN (%)'][i],"=", round(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i],2))
        else:
          count_ebit-=5
          pepoints+=1
          # print(indicator_data['PBIT MARGIN (%)'][i-1],"-",indicator_data['PBIT MARGIN (%)'][i],"=",round(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i],2))

      for i in range(len(indicator_data['PBIT MARGIN (%)'])-1,-1,-1):
          if(indicator_data['PBIT MARGIN (%)'][i]<0):
            count_ebit-=20


      # print(count_ebit)

      # print(pepoints)

      ## Indicator 9: Debt To Equity Ratio

      count_debt=0
      # print(indicator_data["TOTAL DEBT/EQUITY (X)"])

      for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,0,-1):
        if(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i]>0):
          count_debt+=10
          # print(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1] , "-" , indicator_data['TOTAL DEBT/EQUITY (X)'][i],"=", round(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i],2))
        elif (indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i]==0):
              count_debt+=10
        else:
          count_debt-=5
          # print(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1],"-",indicator_data['TOTAL DEBT/EQUITY (X)'][i],"=",round(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i],2))
        
      for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,-1,-1):
          if(indicator_data['TOTAL DEBT/EQUITY (X)'][i]>2):
            count_debt-=15
            pepoints-=1
          else:
            count_debt+=15
            pepoints+=1

      for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,-1,-1):
          if(indicator_data['TOTAL DEBT/EQUITY (X)'][i]<0):
            count_debt-=20


      # print(count_debt)

      # pepoints

      ## Indicator 10: Current Ratio
      indicator_data['CURRENT RATIO (X)']

      count_currentratio=0
      # print(indicator_data["CURRENT RATIO (X)"])

      for i in range(len(indicator_data['CURRENT RATIO (X)'])-1,0,-1):
        if(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i]>0):
          count_currentratio+=10
          # print(indicator_data['CURRENT RATIO (X)'][i-1] , "-" , indicator_data['CURRENT RATIO (X)'][i],"=", round(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i],2))
        elif ((indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i])==0):
              count_currentratio+=10
        else:
          count_currentratio-=5
          # print(indicator_data['CURRENT RATIO (X)'][i-1],"-",indicator_data['CURRENT RATIO (X)'][i],"=",round(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i],2))

      for i in range(len(indicator_data['CURRENT RATIO (X)'])-1,-1,-1):
          if(indicator_data['CURRENT RATIO (X)'][i]<2):
            # print(indicator_data['CURRENT RATIO (X)'][i])
            count_currentratio-=10
            pepoints=pepoints-0.5
          elif (indicator_data['CURRENT RATIO (X)'][i]<1):
            count_currentratio-=20
            pepoints=pepoints-1
          else:
            count_currentratio+=10
            pepoints+=1


      # print(count_currentratio)

      # pepoints

      ##Indicator 11: Net Cashflow From Operating Activities
      count_netcashflow=0
      cashflow_list=[]
      # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])
      for i in range(len(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])-1,0,-1):
        if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]==0):
          indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]=indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]
        if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]>0):
          cashflow_list.append(round(((indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])/indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])*100,2))
          count_netcashflow=count_netcashflow+10
          pepoints+=1
          # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1] , "-" , indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],"=", round(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],2))
        else:
          cashflow_list.append(round(((indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])/indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])*100,2))
          count_netcashflow=count_netcashflow-10
          pepoints-=1
          # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1],"-",indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],"=",round(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],2))

      cashflow_list=cashflow_list[::-1]

      for i in range(len(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])-1,-1,-1):
          if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]<0):
            count_netcashflow-=15

      # print(count_netcashflow)
      # print(cashflow_list)

      ##Indicator 12: Free cash Flow
      stock_position=None
      stock_data=excel_data.values.tolist()
      stock_data
      for i in stock_data:
        for j in i:
          j=str(j)
          if(stock_name in j):
            # print(j.index(i))
            stock_position=stock_data.index(i)
            # print(j)
            break
            
      # print(stock_position)

      freecash_list=[]
      for i in range(5):
        freecash_list.append(stock_data[stock_position][i])
      # print(freecash_list)

      count_freecash=0
      for i in range(1,len(freecash_list)):
        if(freecash_list[i]-freecash_list[i-1]>0):
          # print(freecash_list[i],"-",freecash_list[i-1],"=",freecash_list[i]-freecash_list[i-1])
          count_freecash+=20
          pepoints+=1
        else:
          # print(freecash_list[i],"-",freecash_list[i-1],"=",freecash_list[i]-freecash_list[i-1])
          count_freecash-=10
          pepoints-=1

      for i in range(0,len(freecash_list)):
        if(freecash_list[i]<0):
          count_freecash-=20
          pepoints-=1

      # print(count_freecash)

      ##Indicator 13: Pledged shares
      for i in stock_data:
        for j in i:
          j=str(j)
          if(stock_name in j):
            # print(j.index(i))
            stock_position=stock_data.index(i)
            # print(j)
            break

      pledged_shares=stock_data[stock_position][15]
      # print(pledged_shares)
      stock_name=stock_data[stock_position][5]
      count_pshares=1
      if(pledged_shares>0):
        pepoints-=1
        count_pshares=count_pshares*-10
      else:
        pepoints+=1
        count_pshares=count_pshares*10


      ##Entities: Alpha & Beta
      alpha=round(stock_data[stock_position][9],2)
      # print("Alpha",alpha)
      beta=round(stock_data[stock_position][10],2)
      # print("Beta",beta)
      divy=data['Dividend Yield']
      # print("Dividend Yield",divy)

      cagr=stock_data[stock_position][8]
      # print("CAGR:", cagr)

      # pepoints

      ##Indicator 14: PE Ratio
      st_pe=data['TTM PE']
      se_pe=data['Sector PE']
      # print("Stock PE", st_pe)
      # print("Sector PE",se_pe)
      count_pe=1
      if(data['TTM PE']=="--"):
          count_pe=pepoints*12
      elif(data['TTM PE']<data['Sector PE']):
        count_pe=pepoints*15
      else:
        count_pe=pepoints*10

      # print(count_pe)



      #Predicting Target Price 
      flag=0
      target_price=None
      entry_price=None
      # int(indicator_data['ENTERPRISE VALUE (CR.)'])
      # print(indicator_data['EV/EBITDA (X)'])
      print()

      ebitda_list=[]
      for i in range(len(indicator_data['ENTERPRISE VALUE (CR.)'])-1,-1,-1):
              if(indicator_data['ENTERPRISE VALUE (CR.)'][i]==0):

                flag=1
                break

              # print(indicator_data['ENTERPRISE VALUE (CR.)'][i] , "/" , indicator_data['EV/EBITDA (X)'][i],"=", round((indicator_data['ENTERPRISE VALUE (CR.)'][i]/indicator_data['EV/EBITDA (X)'][i]),2))
              ebitda_list.append(round(indicator_data['ENTERPRISE VALUE (CR.)'][i]/indicator_data['EV/EBITDA (X)'][i],2))
      if(flag==0):

        print()
        ebitda_list=ebitda_list[::-1]

        # print(ebitda_list)
        growth_ebitda=[]
        for i in range(len(ebitda_list)-1,0,-1):
          # print(ebitda_list[i-1],"-",ebitda_list[i],"=",round(ebitda_list[i-1]-ebitda_list[i],2), "   ",round((ebitda_list[i-1]-ebitda_list[i])/ebitda_list[i]*100,2))
          growth_ebitda.append(round((ebitda_list[i-1]-ebitda_list[i])/ebitda_list[i]*100,2))

        print()
        growth_ebitda=growth_ebitda[::-1]

        # print(growth_ebitda)
        print()
        grow=0
        for i in range(len(growth_ebitda)-1):
          grow=grow+growth_ebitda[i]

        growth=round(grow/3,2)
        # print("Growth for last three years:", growth)
        print()
        # print(ebitda_list[0])
        pred_ebitda=round(((100+growth)*ebitda_list[0])/100,2)

        # print("Predicted Ebitda:",pred_ebitda)


        print()
        forecasted_ev= round(pred_ebitda*indicator_data['EV/EBITDA (X)'][0],2)

        print()
        forecasted_ev=forecasted_ev-indicator_data['LONG TERM BORROWINGS'][0]
        forecasted_ev

        # print("Forecasted EV:",forecasted_ev)
        print()
        target_price=round(forecasted_ev/shareholding,2)
        # print("Target Price:", target_price)

        entry_price=round(target_price*0.75,2)
        # print("Good Buy Price:",entry_price)

      points=bonus+count_currentratio+count_debt+count_ebit+count_ito+count_profitloss+count_rec+count_reserves+count_revenuefromop+count_roce+count_netcashflow+count_pe+count_freecash+count_pshares
      final_list=[]
      per_fert="6.5%"
      industry="Fertilizers & Seeds"
      final_list.append(stock_name)
     
      final_list.append(cap)
      final_list.append(roce_ind)
      final_list.append(points)
      final_list.append(per_fert)
      final_list.append(industry)
      

      return final_list
  table=[]
  url_list=[]
        
  url_list=[[["UPL"],['https://www.moneycontrol.com/india/stockpricequote/chemicals/upl/UP04'],['https://www.moneycontrol.com/financials/upl/balance-sheetVI/UP04#UP04','https://www.moneycontrol.com/financials/upl/profit-lossVI/UP04#UP04','https://www.moneycontrol.com/financials/upl/cash-flowVI/UP04#UP04','https://www.moneycontrol.com/financials/upl/ratiosVI/UP04#UP04']],
            
            [["BAYERCROP"],['https://www.moneycontrol.com/india/stockpricequote/pesticidesagrochemicals/bayercropscience/BC12'],['https://www.moneycontrol.com/financials/bayercropscience/balance-sheetVI/BC12#BC12','https://www.moneycontrol.com/financials/bayercropscience/profit-lossVI/BC12#BC12','https://www.moneycontrol.com/financials/bayercropscience/cash-flowVI/BC12#BC12','https://www.moneycontrol.com/financials/bayercropscience/ratiosVI/BC12#BC12']],
            [['COROMANDEL'],['https://www.moneycontrol.com/india/stockpricequote/fertilisers/coromandelinternational/CI45'],['https://www.moneycontrol.com/financials/coromandelinternational/balance-sheetVI/CI45#CI45','https://www.moneycontrol.com/financials/coromandelinternational/profit-lossVI/CI45#CI45','https://www.moneycontrol.com/financials/coromandelinternational/cash-flowVI/CI45#CI45','https://www.moneycontrol.com/financials/coromandelinternational/ratiosVI/CI45#CI45']],
            [['CHAMBLFERT'],['https://www.moneycontrol.com/india/stockpricequote/fertilisers/chambalfertiliserschemicals/CFC'],['https://www.moneycontrol.com/financials/chambalfertiliserschemicals/balance-sheetVI/CFC#CFC','https://www.moneycontrol.com/financials/chambalfertiliserschemicals/profit-lossVI/CFC#CFC','https://www.moneycontrol.com/financials/chambalfertiliserschemicals/cash-flowVI/CFC#CFC','https://www.moneycontrol.com/financials/chambalfertiliserschemicals/ratiosVI/CFC#CFC']],
            [['GNFC'],['https://www.moneycontrol.com/india/stockpricequote/fertilisers/gujaratnarmadavalleyfertilizerschemicals/GNV'],['https://www.moneycontrol.com/financials/gujaratnarmadavalleyfertilizerschemicals/balance-sheetVI/GNV#GNV','https://www.moneycontrol.com/financials/gujaratnarmadavalleyfertilizerschemicals/profit-lossVI/GNV#GNV','https://www.moneycontrol.com/financials/gujaratnarmadavalleyfertilizerschemicals/cash-flowVI/GNV#GNV','https://www.moneycontrol.com/financials/gujaratnarmadavalleyfertilizerschemicals/ratiosVI/GNV#GNV']]]

  for i in range(len(url_list)):
    list_input=[]
    for j in url_list[i]:
      list_input.append(j)
    stockname=list_input[0][0]
    url1=list_input[1][0]
    url2=list_input[2]
    print(stockname,url1,url2)
    final_list=fert(stockname,url1,url2)
    table.append(final_list)
  df=pd.DataFrame(table,columns=['stock_name','cap','roce_ind','points','per_fert','industry'])
  df.sort_values(by='points', ascending=False,inplace=True)
  stock=[]  
  df_final=df[['stock_name','cap','roce_ind','per_fert','industry']]
    
  stock= df_final[:2].values.tolist()
    
  portfolio.append(stock) 

  def textile(stockname,url1,url2):


    stock_name=stockname
    url = url1

    # Make a GET request to fetch the raw HTML content
    html_content = requests.get(url).text

    # Parse HTML code for the entire site
    soup = BeautifulSoup(html_content, "lxml")
    # print(soup)

    mc = soup.find_all("div", attrs={"class": "oview_table"})
    # print("Number of tables on site: ",len(mc))

    data = dict()
    for tb in mc[:4]:
        body = tb.find_all("tr")
        for i in body:
            vals = i.find_all("td")
            title = vals[0].text.strip()
            try:
                value = float(vals[1].text.replace(',',''))
            except ValueError:
                value = vals[1].text.replace(',','')
            data[title] = value
    # print(data)



    excel_data=pd.read_csv(r"C:\Users\mohil\OneDrive\Desktop\STOCKS_new.csv")
    excel_data.drop(columns=['Name (largecap alpha.csv)', 'Ticker (largecap alpha.csv)'],inplace=True)
    # excel_data.head(10)

    avg_price=round((data['Open']+data['Previous Close'])/2,2)
    shareholding=round((data['Mkt Cap (Rs. Cr.)']/avg_price),2)
    shareholding

    parameters_dict = dict()
    def scrape_indicators(urls):
        for url in urls:
            html_content = requests.get(url).text

            # Parse HTML code for the entire site
            soup = BeautifulSoup(html_content, "lxml")
            stonks = soup.find_all("div", attrs={"id": "standalone-new"})

            body = stonks[0].find_all("tr")

            indicator_dict = dict()

            for record in body:
                indicator = record.find_all("td")[0].text.upper()
                temp_indicator_values = []
                try:
                    for table_data in (record.find_all('td')[1:-1]):
                        temp_indicator_values.append(
                            float(table_data.text.replace(',', '')))
                except ValueError:
                    continue
                indicator_dict[indicator] = temp_indicator_values

            parameters_dict.update(indicator_dict)

        yield(url, parameters_dict)


        
    urls=url2


    for request_url, indicator_data in scrape_indicators(urls):
        # print(request_url)
        # print(indicator_data)
        print()
        print()

    if(data['Mkt Cap (Rs. Cr.)']<20000.00 and data['Mkt Cap (Rs. Cr.)']>5000.00):
      cap="Mid Cap"
    elif (data['Mkt Cap (Rs. Cr.)']>20000.00):
      cap="Large Cap"
    else:
      cap="Small Cap"
    

    pepoints=0



    ##Indicator 1: Reserves & Surplus
    # print(indicator_data['RESERVES AND SURPLUS'])
    rands_list=[]
    count_reserves=0
    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,0,-1):
      if(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i]>0):
        rands_list.append(round(((indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i])/indicator_data['RESERVES AND SURPLUS'][i])*100,2))
        # print(indicator_data['RESERVES AND SURPLUS'][i])
        count_reserves=count_reserves+20
        pepoints+=1
        # print(indicator_data['RESERVES AND SURPLUS'][i-1] , "-" , indicator_data['RESERVES AND SURPLUS'][i],"=", round(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i],2))
      else:
        rands_list.append(round(((indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i])/indicator_data['RESERVES AND SURPLUS'][i])*100,2))
        # print(indicator_data['RESERVES AND SURPLUS'][i])
        count_reserves=count_reserves-20
        pepoints-=1
        # print(indicator_data['RESERVES AND SURPLUS'][i-1],"-",indicator_data['RESERVES AND SURPLUS'][i],"=", round(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i],2))

    rands_list=rands_list[::-1]

    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,-1,-1):
        if(indicator_data['RESERVES AND SURPLUS'][i]<0):
          count_reserves-=20
          pepoints-=1

    # print(count_reserves)
    # print(rands_list)

    ##Indicator 2: Revenue From Operations Gross
    count_revenuefromop=0
    revenue_list=[]
    # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])
    for i in range(len(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])-1,0,-1):
      if(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i]>0):
        revenue_list.append(round(((indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])/indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])*100,2))
        count_revenuefromop=count_revenuefromop+10
        # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1] , "-" , indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],"=", round(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],2))
      else:
        revenue_list.append(round(((indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])/indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])*100,2))
        count_revenuefromop=count_revenuefromop-10
        # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1],"-",indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],"=",round(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],2))

    revenue_list=revenue_list[::-1]

    for i in range(len(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])-1,-1,-1):
        if(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i]<0):
          count_revenuefromop-=15


    # print(count_revenuefromop)
    # print(revenue_list)





    ##Indicator 3: Profit/Loss for the period
    count_profitloss=0
    profit_list=[]
    # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'])
    for i in range(len(indicator_data['PROFIT/LOSS FOR THE PERIOD'])-1,0,-1):
      if(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i]>0):
        profit_list.append(round(((indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])/indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])*100,2))
        count_profitloss=count_profitloss+10
        # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1] , "-" , indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],"=", round(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],2))
      else:
        profit_list.append(round(((indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])/indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])*100,2))
        count_profitloss=count_profitloss-10
        # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1],"-",indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],"=",round(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],2))

    profit_list=profit_list[::-1]

    for i in range(len(indicator_data['PROFIT/LOSS FOR THE PERIOD'])-1,-1,-1):
        if(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i]<0):
          count_profitloss-=15

    # print(count_profitloss)
    # print(profit_list)

    # print(pepoints)

    ##Indicator 4: ROCE

    count_roce=0
    # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])
    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,0,-1):
      if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]>-1):
        count_roce+=10
        # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1] , "-" , indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],"=", round(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],2))
      else:
        count_roce-=10
        # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1],"-",indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],"=",round(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],2))

    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,-1,-1):
        if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]<10):
          count_roce-=15
          pepoints-=1
        else:
          if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]>10):
            count_roce+=15
            pepoints+=1


    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,-1,-1):
        if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]<0):
          count_roce-=25

    roce_ind=indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][0]


    # print(count_roce)

    # print(pepoints)

    ##Indicator 5: Inventory Turnover Ratio
    count_ito=0
    # print(indicator_data['INVENTORY TURNOVER RATIO (X)'])
    for i in range(len(indicator_data['INVENTORY TURNOVER RATIO (X)'])-1,0,-1):
      if(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i]>0):
        count_ito+=20
        pepoints+=1
        # print(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1] , "-" , indicator_data['INVENTORY TURNOVER RATIO (X)'][i],"=", round(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i],2))
      else:
        count_ito-=10
        pepoints-=1
        # print(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1],"-",indicator_data['INVENTORY TURNOVER RATIO (X)'][i],"=",round(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i],2))
    # print(count_ito)

    # pepoints

    ##Indicator 6: Reserves & Surplus/Equity Share Capital
    # print(indicator_data['RESERVES AND SURPLUS'])
    # print(indicator_data['TOTAL SHARE CAPITAL'])
    print()
    rsesc_list=[]
    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,-1,-1):
            # print(indicator_data['RESERVES AND SURPLUS'][i])
            # print(indicator_data['RESERVES AND SURPLUS'][i] , "/" , indicator_data['TOTAL SHARE CAPITAL'][i],"=", round((indicator_data['RESERVES AND SURPLUS'][i]/indicator_data['TOTAL SHARE CAPITAL'][i]),2))
            rsesc_list.append(round(indicator_data['RESERVES AND SURPLUS'][i]/indicator_data['TOTAL SHARE CAPITAL'][i],2))

    print()
    rsesc_list=rsesc_list[::-1]
    # print(rsesc_list)
    print()
    count_rec=0
    for i in range(len(rsesc_list)-1,0,-1):
      if(rsesc_list[i-1]-rsesc_list[i]>0):
        count_rec+=20
        pepoints+=1
        # print(rsesc_list[i-1] , "-" , rsesc_list[i],"=", round(rsesc_list[i-1]-rsesc_list[i],2))
      else:
        count_rec-=10
        pepoints-=1
        # print(rsesc_list[i-1],"-",rsesc_list[i],"=",round(rsesc_list[i-1]-rsesc_list[i],2))


    for i in range(len(rsesc_list)-1,-1,-1):
        if(rsesc_list[i]<10):
          count_rec-=15

    for i in range(len(rsesc_list)-1,-1,-1):
        if(rsesc_list[i]<0):
          count_rec-=20


    # print(rsesc_list)
    # print(count_rec)



    # pepoints





    ## Indicator 7: Trade Receivables in Current Assets
    # print(indicator_data['TOTAL CURRENT ASSETS'])
    # print(indicator_data['TRADE RECEIVABLES'])

    trade_list=[]
    bonus=0
    for i in range(len(indicator_data['TOTAL CURRENT ASSETS'])-1,-1,-1):
              # print(indicator_data['TOTAL CURRENT ASSETS'][i] , "/" , indicator_data['TRADE RECEIVABLES'][i],"=", round((indicator_data['TOTAL CURRENT ASSETS'][i]/indicator_data['TRADE RECEIVABLES'][i]),2))
              if(round((indicator_data['TOTAL CURRENT ASSETS'][i]/indicator_data['TRADE RECEIVABLES'][i]),2)<50.00):
                bonus+=10
              else:
                bonus-=5
    # print(bonus)

    # print(pepoints)

    ## Indicator 8: Earnings Before Interest Tax

    indicator_data['PBIT MARGIN (%)']
    count_ebit=0
    # print(indicator_data['PBIT MARGIN (%)'])
    for i in range(len(indicator_data['PBIT MARGIN (%)'])-1,0,-1):
      if(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i]>0):
        count_ebit+=10
        pepoints+=1
        # print(indicator_data['PBIT MARGIN (%)'][i-1] , "-" , indicator_data['PBIT MARGIN (%)'][i],"=", round(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i],2))
      else:
        count_ebit-=5
        pepoints+=1
        # print(indicator_data['PBIT MARGIN (%)'][i-1],"-",indicator_data['PBIT MARGIN (%)'][i],"=",round(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i],2))

    for i in range(len(indicator_data['PBIT MARGIN (%)'])-1,-1,-1):
        if(indicator_data['PBIT MARGIN (%)'][i]<0):
          count_ebit-=20


    # print(count_ebit)

    # print(pepoints)

    ## Indicator 9: Debt To Equity Ratio

    count_debt=0
    # print(indicator_data["TOTAL DEBT/EQUITY (X)"])

    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,0,-1):
      if(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i]>0):
        count_debt+=10
        # print(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1] , "-" , indicator_data['TOTAL DEBT/EQUITY (X)'][i],"=", round(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i],2))
      elif (indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i]==0):
            count_debt+=10
      else:
        count_debt-=5
        # print(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1],"-",indicator_data['TOTAL DEBT/EQUITY (X)'][i],"=",round(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i],2))
      
    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,-1,-1):
        if(indicator_data['TOTAL DEBT/EQUITY (X)'][i]>2):
          count_debt-=15
          pepoints-=1
        else:
          count_debt+=15
          pepoints+=1

    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,-1,-1):
        if(indicator_data['TOTAL DEBT/EQUITY (X)'][i]<0):
          count_debt-=20


    # print(count_debt)

    # pepoints

    ## Indicator 10: Current Ratio
    indicator_data['CURRENT RATIO (X)']

    count_currentratio=0
    # print(indicator_data["CURRENT RATIO (X)"])

    for i in range(len(indicator_data['CURRENT RATIO (X)'])-1,0,-1):
      if(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i]>0):
        count_currentratio+=10
        # print(indicator_data['CURRENT RATIO (X)'][i-1] , "-" , indicator_data['CURRENT RATIO (X)'][i],"=", round(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i],2))
      elif ((indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i])==0):
            count_currentratio+=10
      else:
        count_currentratio-=5
        # print(indicator_data['CURRENT RATIO (X)'][i-1],"-",indicator_data['CURRENT RATIO (X)'][i],"=",round(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i],2))

    for i in range(len(indicator_data['CURRENT RATIO (X)'])-1,-1,-1):
        if(indicator_data['CURRENT RATIO (X)'][i]<2):
          # print(indicator_data['CURRENT RATIO (X)'][i])
          count_currentratio-=10
          pepoints=pepoints-0.5
        elif (indicator_data['CURRENT RATIO (X)'][i]<1):
          count_currentratio-=20
          pepoints=pepoints-1
        else:
          count_currentratio+=10
          pepoints+=1


    # print(count_currentratio)

    # pepoints

    ##Indicator 11: Net Cashflow From Operating Activities
    count_netcashflow=0
    cashflow_list=[]
    # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])
    for i in range(len(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])-1,0,-1):
      if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]==0):
        indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]=indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]
      if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]>0):
        cashflow_list.append(round(((indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])/indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])*100,2))
        count_netcashflow=count_netcashflow+10
        pepoints+=1
        # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1] , "-" , indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],"=", round(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],2))
      else:
        cashflow_list.append(round(((indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])/indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])*100,2))
        count_netcashflow=count_netcashflow-10
        pepoints-=1
        # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1],"-",indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],"=",round(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],2))

    cashflow_list=cashflow_list[::-1]

    for i in range(len(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])-1,-1,-1):
        if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]<0):
          count_netcashflow-=15

    # print(count_netcashflow)
    # print(cashflow_list)

    ##Indicator 12: Free cash Flow
    stock_position=None
    stock_data=excel_data.values.tolist()
    stock_data
    for i in stock_data:
      for j in i:
        j=str(j)
        if(stock_name in j):
          # print(j.index(i))
          stock_position=stock_data.index(i)
          # print(j)
          break
          
    # print(stock_position)

    freecash_list=[]
    for i in range(5):
      freecash_list.append(stock_data[stock_position][i])
    # print(freecash_list)

    count_freecash=0
    for i in range(1,len(freecash_list)):
      if(freecash_list[i]-freecash_list[i-1]>0):
        # print(freecash_list[i],"-",freecash_list[i-1],"=",freecash_list[i]-freecash_list[i-1])
        count_freecash+=20
        pepoints+=1
      else:
        # print(freecash_list[i],"-",freecash_list[i-1],"=",freecash_list[i]-freecash_list[i-1])
        count_freecash-=10
        pepoints-=1

    for i in range(0,len(freecash_list)):
      if(freecash_list[i]<0):
        count_freecash-=20
        pepoints-=1

    # print(count_freecash)

    ##Indicator 13: Pledged shares
    for i in stock_data:
      for j in i:
        j=str(j)
        if(stock_name in j):
          # print(j.index(i))
          stock_position=stock_data.index(i)
          # print(j)
          break

    pledged_shares=stock_data[stock_position][15]
    # print(pledged_shares)
    stock_name=stock_data[stock_position][5]
    count_pshares=1
    if(pledged_shares>0):
      pepoints-=1
      count_pshares=count_pshares*-10
    else:
      pepoints+=1
      count_pshares=count_pshares*10


    ##Entities: Alpha & Beta
    alpha=round(stock_data[stock_position][9],2)
    # print("Alpha",alpha)
    beta=round(stock_data[stock_position][10],2)
    # print("Beta",beta)
    divy=data['Dividend Yield']
    # print("Dividend Yield",divy)

    cagr=stock_data[stock_position][8]
    # print("CAGR:", cagr)

    # pepoints

    ##Indicator 14: PE Ratio
    st_pe=data['TTM PE']
    se_pe=data['Sector PE']
    # print("Stock PE", st_pe)
    # print("Sector PE",se_pe)
    count_pe=1
    if(data['TTM PE']=="--"):
        count_pe=pepoints*12
    elif(data['TTM PE']<data['Sector PE']):
      count_pe=pepoints*15
    else:
      count_pe=pepoints*10

    # print(count_pe)



    #Predicting Target Price 
    flag=0
    target_price=None
    entry_price=None
    # int(indicator_data['ENTERPRISE VALUE (CR.)'])
    # print(indicator_data['EV/EBITDA (X)'])
    print()

    ebitda_list=[]
    for i in range(len(indicator_data['ENTERPRISE VALUE (CR.)'])-1,-1,-1):
            if(indicator_data['ENTERPRISE VALUE (CR.)'][i]==0):

              flag=1
              break

            # print(indicator_data['ENTERPRISE VALUE (CR.)'][i] , "/" , indicator_data['EV/EBITDA (X)'][i],"=", round((indicator_data['ENTERPRISE VALUE (CR.)'][i]/indicator_data['EV/EBITDA (X)'][i]),2))
            ebitda_list.append(round(indicator_data['ENTERPRISE VALUE (CR.)'][i]/indicator_data['EV/EBITDA (X)'][i],2))
    if(flag==0):

      print()
      ebitda_list=ebitda_list[::-1]

      # print(ebitda_list)
      growth_ebitda=[]
      for i in range(len(ebitda_list)-1,0,-1):
        # print(ebitda_list[i-1],"-",ebitda_list[i],"=",round(ebitda_list[i-1]-ebitda_list[i],2), "   ",round((ebitda_list[i-1]-ebitda_list[i])/ebitda_list[i]*100,2))
        growth_ebitda.append(round((ebitda_list[i-1]-ebitda_list[i])/ebitda_list[i]*100,2))

      print()
      growth_ebitda=growth_ebitda[::-1]

      # print(growth_ebitda)
      print()
      grow=0
      for i in range(len(growth_ebitda)-1):
        grow=grow+growth_ebitda[i]

      growth=round(grow/3,2)
      # print("Growth for last three years:", growth)
      print()
      # print(ebitda_list[0])
      pred_ebitda=round(((100+growth)*ebitda_list[0])/100,2)

      # print("Predicted Ebitda:",pred_ebitda)


      print()
      forecasted_ev= round(pred_ebitda*indicator_data['EV/EBITDA (X)'][0],2)

      print()
      forecasted_ev=forecasted_ev-indicator_data['LONG TERM BORROWINGS'][0]
      forecasted_ev

      # print("Forecasted EV:",forecasted_ev)
      print()
      target_price=round(forecasted_ev/shareholding,2)
      # print("Target Price:", target_price)

      entry_price=round(target_price*0.75,2)
      # print("Good Buy Price:",entry_price)

    points=bonus+count_currentratio+count_debt+count_ebit+count_ito+count_profitloss+count_rec+count_reserves+count_revenuefromop+count_roce+count_netcashflow+count_pe+count_freecash+count_pshares
    final_list=[]
    per_text="9%"
    industry="Textiles"
    
    final_list.append(stock_name)
    
    final_list.append(cap)
    final_list.append(roce_ind)
    final_list.append(points)
    final_list.append(per_text)
    final_list.append(industry)
    
    
    return final_list
  table=[]
  url_list=[]
  url_list=[[["KPRMILL"],['https://www.moneycontrol.com/india/stockpricequote/textilesreadymadeapparels/kprmill/M15'],['https://www.moneycontrol.com/financials/kprmill/balance-sheetVI/M15#M15','https://www.moneycontrol.com/financials/kprmill/profit-lossVI/M15#M15','https://www.moneycontrol.com/financials/kprmill/cash-flowVI/M15#M15','https://www.moneycontrol.com/financials/kprmill/ratiosVI/M15#M15']],
        [["TRIDENT"],['https://www.moneycontrol.com/india/stockpricequote/textilesspinningcottonblended/trident/AI01'],['https://www.moneycontrol.com/financials/trident/balance-sheetVI/AI01#AI01','https://www.moneycontrol.com/financials/trident/profit-lossVI/AI01#AI01','https://www.moneycontrol.com/financials/trident/cash-flowVI/AI01#AI01','https://www.moneycontrol.com/financials/trident/ratiosVI/AI01#AI01']],
        [["ALOKINDS"],['https://www.moneycontrol.com/india/stockpricequote/textilesweaving/alokindustries/AI54'],['https://www.moneycontrol.com/financials/alokindustries/balance-sheetVI/AI54#AI54','https://www.moneycontrol.com/financials/alokindustries/profit-lossVI/AI54#AI54','https://www.moneycontrol.com/financials/alokindustries/cash-flowVI/AI54#AI54','https://www.moneycontrol.com/financials/alokindustries/ratiosVI/AI54#AI54']],
        [["VTL"],['https://www.moneycontrol.com/india/stockpricequote/textilesspinningcottonblended/vardhmantextiles/VT10'],['https://www.moneycontrol.com/financials/vardhmantextiles/balance-sheetVI/VT10#VT10','https://www.moneycontrol.com/financials/vardhmantextiles/profit-lossVI/VT10#VT10','https://www.moneycontrol.com/financials/vardhmantextiles/cash-flowVI/VT10#VT10','https://www.moneycontrol.com/financials/vardhmantextiles/ratiosVI/VT10#VT10']],
        [["SRF"],['https://www.moneycontrol.com/india/stockpricequote/diversified/srf/SRF'],['https://www.moneycontrol.com/financials/srf/balance-sheetVI/SRF#SRF','https://www.moneycontrol.com/financials/srf/profit-lossVI/SRF#SRF','https://www.moneycontrol.com/financials/srf/cash-flowVI/SRF#SRF','https://www.moneycontrol.com/financials/srf/ratiosVI/SRF#SRF']]]

  for i in range(len(url_list)):
    list_input=[]
    for j in url_list[i]:
      list_input.append(j)
    stockname=list_input[0][0]
    url1=list_input[1][0]
    url2=list_input[2]
    print(stockname,url1,url2)
    final_list=textile(stockname,url1,url2)
    table.append(final_list)

  df=pd.DataFrame(table,columns=['stock_name','cap','roce_ind','points','per_text','industry'])
  df.sort_values(by='points', ascending=False,inplace=True)
  stock=[]

  df_final=df[['stock_name','cap','roce_ind','per_text','industry']]
    
  stock= df_final[:1].values.tolist()
    
  portfolio.append(stock) 

  def fmcgpro(stockname,url1,url2):


    stock_name=stockname
    url = url1

    # Make a GET request to fetch the raw HTML content
    html_content = requests.get(url).text

    # Parse HTML code for the entire site
    soup = BeautifulSoup(html_content, "lxml")
    # print(soup)

    mc = soup.find_all("div", attrs={"class": "oview_table"})
    # print("Number of tables on site: ",len(mc))

    data = dict()
    for tb in mc[:4]:
        body = tb.find_all("tr")
        for i in body:
            vals = i.find_all("td")
            title = vals[0].text.strip()
            try:
                value = float(vals[1].text.replace(',',''))
            except ValueError:
                value = vals[1].text.replace(',','')
            data[title] = value
    # print(data)



    excel_data=pd.read_csv(r"C:\Users\mohil\OneDrive\Desktop\STOCKS_new.csv")
    excel_data.drop(columns=['Name (largecap alpha.csv)', 'Ticker (largecap alpha.csv)'],inplace=True)
    # excel_data.head(10)

    avg_price=round((data['Open']+data['Previous Close'])/2,2)
    shareholding=round((data['Mkt Cap (Rs. Cr.)']/avg_price),2)
    shareholding

    parameters_dict = dict()
    def scrape_indicators(urls):
        for url in urls:
            html_content = requests.get(url).text

            # Parse HTML code for the entire site
            soup = BeautifulSoup(html_content, "lxml")
            stonks = soup.find_all("div", attrs={"id": "standalone-new"})

            body = stonks[0].find_all("tr")

            indicator_dict = dict()

            for record in body:
                indicator = record.find_all("td")[0].text.upper()
                temp_indicator_values = []
                try:
                    for table_data in (record.find_all('td')[1:-1]):
                        temp_indicator_values.append(
                            float(table_data.text.replace(',', '')))
                except ValueError:
                    continue
                indicator_dict[indicator] = temp_indicator_values

            parameters_dict.update(indicator_dict)

        yield(url, parameters_dict)


    # urls = ["https://www.moneycontrol.com/financials/itc/balance-sheetVI/ITC#ITC","https://www.moneycontrol.com/financials/itc/profit-lossVI/ITC#ITC",
            # "https://www.moneycontrol.com/financials/itc/cash-flowVI/ITC#ITC", " https://www.moneycontrol.com/financials/itc/ratiosVI/ITC#ITC"]

    # urls = ["https://www.moneycontrol.com/financials/vodafoneidealimited/balance-sheetVI/IC8#IC8","https://www.moneycontrol.com/financials/vodafoneidealimited/profit-lossVI/IC8#IC8",
            # "https://www.moneycontrol.com/financials/vodafoneidealimited/cash-flowVI/IC8#IC8", "https://www.moneycontrol.com/financials/vodafoneidealimited/ratiosVI/IC8#IC8"]
        
    urls=url2
    # urls = ["https://www.moneycontrol.com/financials/godfreyphillipsindia/balance-sheetVI/GPI#GPI","https://www.moneycontrol.com/financials/godfreyphillipsindia/profit-lossVI/GPI#GPI","https://www.moneycontrol.com/financials/godfreyphillipsindia/cash-flowVI/GPI#GPI","https://www.moneycontrol.com/financials/godfreyphillipsindia/ratiosVI/GPI#GPI"]


    for request_url, indicator_data in scrape_indicators(urls):
        # print(request_url)
        # print(indicator_data)
        print()
        print()

    if(data['Mkt Cap (Rs. Cr.)']<20000.00 and data['Mkt Cap (Rs. Cr.)']>5000.00):
      cap="Mid Cap"
    elif (data['Mkt Cap (Rs. Cr.)']>20000.00):
      cap="Large Cap"
    else:
      cap="Small Cap"
    

    pepoints=0



    ##Indicator 1: Reserves & Surplus
    # print(indicator_data['RESERVES AND SURPLUS'])
    rands_list=[]
    count_reserves=0
    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,0,-1):
      if(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i]>0):
        rands_list.append(round(((indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i])/indicator_data['RESERVES AND SURPLUS'][i])*100,2))
        # print(indicator_data['RESERVES AND SURPLUS'][i])
        count_reserves=count_reserves+20
        pepoints+=1
        # print(indicator_data['RESERVES AND SURPLUS'][i-1] , "-" , indicator_data['RESERVES AND SURPLUS'][i],"=", round(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i],2))
      else:
        rands_list.append(round(((indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i])/indicator_data['RESERVES AND SURPLUS'][i])*100,2))
        # print(indicator_data['RESERVES AND SURPLUS'][i])
        count_reserves=count_reserves-20
        pepoints-=1
        # print(indicator_data['RESERVES AND SURPLUS'][i-1],"-",indicator_data['RESERVES AND SURPLUS'][i],"=", round(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i],2))

    rands_list=rands_list[::-1]

    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,-1,-1):
        if(indicator_data['RESERVES AND SURPLUS'][i]<0):
          count_reserves-=20
          pepoints-=1

    # print(count_reserves)
    # print(rands_list)

    ##Indicator 2: Revenue From Operations Gross
    count_revenuefromop=0
    revenue_list=[]
    # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])
    for i in range(len(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])-1,0,-1):
      if(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i]>0):
        revenue_list.append(round(((indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])/indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])*100,2))
        count_revenuefromop=count_revenuefromop+10
        # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1] , "-" , indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],"=", round(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],2))
      else:
        revenue_list.append(round(((indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])/indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])*100,2))
        count_revenuefromop=count_revenuefromop-10
        # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1],"-",indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],"=",round(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],2))

    revenue_list=revenue_list[::-1]

    for i in range(len(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])-1,-1,-1):
        if(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i]<0):
          count_revenuefromop-=15


    # print(count_revenuefromop)
    # print(revenue_list)





    ##Indicator 3: Profit/Loss for the period
    count_profitloss=0
    profit_list=[]
    # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'])
    for i in range(len(indicator_data['PROFIT/LOSS FOR THE PERIOD'])-1,0,-1):
      if(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i]>0):
        profit_list.append(round(((indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])/indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])*100,2))
        count_profitloss=count_profitloss+10
        # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1] , "-" , indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],"=", round(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],2))
      else:
        profit_list.append(round(((indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])/indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])*100,2))
        count_profitloss=count_profitloss-10
        # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1],"-",indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],"=",round(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],2))

    profit_list=profit_list[::-1]

    for i in range(len(indicator_data['PROFIT/LOSS FOR THE PERIOD'])-1,-1,-1):
        if(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i]<0):
          count_profitloss-=15

    # print(count_profitloss)
    # print(profit_list)

    # print(pepoints)

    ##Indicator 4: ROCE

    count_roce=0
    # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])
    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,0,-1):
      if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]>-1):
        count_roce+=10
        # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1] , "-" , indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],"=", round(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],2))
      else:
        count_roce-=10
        # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1],"-",indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],"=",round(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],2))

    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,-1,-1):
        if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]<10):
          count_roce-=15
          pepoints-=1
        else:
          if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]>10):
            count_roce+=15
            pepoints+=1


    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,-1,-1):
        if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]<0):
          count_roce-=25

    roce_ind=indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][0]


    # print(count_roce)

    # print(pepoints)

    ##Indicator 5: Inventory Turnover Ratio
    count_ito=0
    # print(indicator_data['INVENTORY TURNOVER RATIO (X)'])
    for i in range(len(indicator_data['INVENTORY TURNOVER RATIO (X)'])-1,0,-1):
      if(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i]>0):
        count_ito+=20
        pepoints+=1
        # print(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1] , "-" , indicator_data['INVENTORY TURNOVER RATIO (X)'][i],"=", round(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i],2))
      else:
        count_ito-=10
        pepoints-=1
        # print(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1],"-",indicator_data['INVENTORY TURNOVER RATIO (X)'][i],"=",round(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i],2))
    # print(count_ito)

    # pepoints

    ##Indicator 6: Reserves & Surplus/Equity Share Capital
    # print(indicator_data['RESERVES AND SURPLUS'])
    # print(indicator_data['TOTAL SHARE CAPITAL'])
    print()
    rsesc_list=[]
    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,-1,-1):
            # print(indicator_data['RESERVES AND SURPLUS'][i])
            # print(indicator_data['RESERVES AND SURPLUS'][i] , "/" , indicator_data['TOTAL SHARE CAPITAL'][i],"=", round((indicator_data['RESERVES AND SURPLUS'][i]/indicator_data['TOTAL SHARE CAPITAL'][i]),2))
            rsesc_list.append(round(indicator_data['RESERVES AND SURPLUS'][i]/indicator_data['TOTAL SHARE CAPITAL'][i],2))

    print()
    rsesc_list=rsesc_list[::-1]
    # print(rsesc_list)
    print()
    count_rec=0
    for i in range(len(rsesc_list)-1,0,-1):
      if(rsesc_list[i-1]-rsesc_list[i]>0):
        count_rec+=20
        pepoints+=1
        # print(rsesc_list[i-1] , "-" , rsesc_list[i],"=", round(rsesc_list[i-1]-rsesc_list[i],2))
      else:
        count_rec-=10
        pepoints-=1
        # print(rsesc_list[i-1],"-",rsesc_list[i],"=",round(rsesc_list[i-1]-rsesc_list[i],2))


    for i in range(len(rsesc_list)-1,-1,-1):
        if(rsesc_list[i]<10):
          count_rec-=15

    for i in range(len(rsesc_list)-1,-1,-1):
        if(rsesc_list[i]<0):
          count_rec-=20


    # print(rsesc_list)
    # print(count_rec)



    # pepoints





    ## Indicator 7: Trade Receivables in Current Assets
    # print(indicator_data['TOTAL CURRENT ASSETS'])
    # print(indicator_data['TRADE RECEIVABLES'])

    trade_list=[]
    bonus=0
    for i in range(len(indicator_data['TOTAL CURRENT ASSETS'])-1,-1,-1):
              # print(indicator_data['TOTAL CURRENT ASSETS'][i] , "/" , indicator_data['TRADE RECEIVABLES'][i],"=", round((indicator_data['TOTAL CURRENT ASSETS'][i]/indicator_data['TRADE RECEIVABLES'][i]),2))
              if(round((indicator_data['TOTAL CURRENT ASSETS'][i]/indicator_data['TRADE RECEIVABLES'][i]),2)<50.00):
                bonus+=10
              else:
                bonus-=5
    # print(bonus)

    # print(pepoints)

    ## Indicator 8: Earnings Before Interest Tax

    indicator_data['PBIT MARGIN (%)']
    count_ebit=0
    # print(indicator_data['PBIT MARGIN (%)'])
    for i in range(len(indicator_data['PBIT MARGIN (%)'])-1,0,-1):
      if(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i]>0):
        count_ebit+=10
        pepoints+=1
        # print(indicator_data['PBIT MARGIN (%)'][i-1] , "-" , indicator_data['PBIT MARGIN (%)'][i],"=", round(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i],2))
      else:
        count_ebit-=5
        pepoints+=1
        # print(indicator_data['PBIT MARGIN (%)'][i-1],"-",indicator_data['PBIT MARGIN (%)'][i],"=",round(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i],2))

    for i in range(len(indicator_data['PBIT MARGIN (%)'])-1,-1,-1):
        if(indicator_data['PBIT MARGIN (%)'][i]<0):
          count_ebit-=20


    # print(count_ebit)

    # print(pepoints)

    ## Indicator 9: Debt To Equity Ratio

    count_debt=0
    # print(indicator_data["TOTAL DEBT/EQUITY (X)"])

    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,0,-1):
      if(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i]>0):
        count_debt+=10
        # print(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1] , "-" , indicator_data['TOTAL DEBT/EQUITY (X)'][i],"=", round(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i],2))
      elif (indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i]==0):
            count_debt+=10
      else:
        count_debt-=5
        # print(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1],"-",indicator_data['TOTAL DEBT/EQUITY (X)'][i],"=",round(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i],2))
      
    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,-1,-1):
        if(indicator_data['TOTAL DEBT/EQUITY (X)'][i]>2):
          count_debt-=15
          pepoints-=1
        else:
          count_debt+=15
          pepoints+=1

    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,-1,-1):
        if(indicator_data['TOTAL DEBT/EQUITY (X)'][i]<0):
          count_debt-=20


    # print(count_debt)

    # pepoints

    ## Indicator 10: Current Ratio
    indicator_data['CURRENT RATIO (X)']

    count_currentratio=0
    # print(indicator_data["CURRENT RATIO (X)"])

    for i in range(len(indicator_data['CURRENT RATIO (X)'])-1,0,-1):
      if(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i]>0):
        count_currentratio+=10
        # print(indicator_data['CURRENT RATIO (X)'][i-1] , "-" , indicator_data['CURRENT RATIO (X)'][i],"=", round(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i],2))
      elif ((indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i])==0):
            count_currentratio+=10
      else:
        count_currentratio-=5
        # print(indicator_data['CURRENT RATIO (X)'][i-1],"-",indicator_data['CURRENT RATIO (X)'][i],"=",round(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i],2))

    for i in range(len(indicator_data['CURRENT RATIO (X)'])-1,-1,-1):
        if(indicator_data['CURRENT RATIO (X)'][i]<2):
          # print(indicator_data['CURRENT RATIO (X)'][i])
          count_currentratio-=10
          pepoints=pepoints-0.5
        elif (indicator_data['CURRENT RATIO (X)'][i]<1):
          count_currentratio-=20
          pepoints=pepoints-1
        else:
          count_currentratio+=10
          pepoints+=1


    # print(count_currentratio)

    # pepoints

    ##Indicator 11: Net Cashflow From Operating Activities
    count_netcashflow=0
    cashflow_list=[]
    # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])
    for i in range(len(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])-1,0,-1):
      if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]>0):
        cashflow_list.append(round(((indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])/indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])*100,2))
        count_netcashflow=count_netcashflow+10
        pepoints+=1
        # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1] , "-" , indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],"=", round(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],2))
      else:
        cashflow_list.append(round(((indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])/indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])*100,2))
        count_netcashflow=count_netcashflow-10
        pepoints-=1
        # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1],"-",indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],"=",round(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],2))

    cashflow_list=cashflow_list[::-1]

    for i in range(len(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])-1,-1,-1):
        if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]<0):
          count_netcashflow-=15

    # print(count_netcashflow)
    # print(cashflow_list)

    ##Indicator 12: Free cash Flow
    stock_position=None
    stock_data=excel_data.values.tolist()
    stock_data
    for i in stock_data:
      for j in i:
        j=str(j)
        if(stock_name in j):
          # print(j.index(i))
          stock_position=stock_data.index(i)
          # print(j)
          break
          
    # print(stock_position)

    freecash_list=[]
    for i in range(5):
      freecash_list.append(stock_data[stock_position][i])
    # print(freecash_list)

    count_freecash=0
    for i in range(1,len(freecash_list)):
      if(freecash_list[i]-freecash_list[i-1]>0):
        # print(freecash_list[i],"-",freecash_list[i-1],"=",freecash_list[i]-freecash_list[i-1])
        count_freecash+=20
        pepoints+=1
      else:
        # print(freecash_list[i],"-",freecash_list[i-1],"=",freecash_list[i]-freecash_list[i-1])
        count_freecash-=10
        pepoints-=1

    for i in range(0,len(freecash_list)):
      if(freecash_list[i]<0):
        count_freecash-=20
        pepoints-=1

    # print(count_freecash)

    ##Indicator 13: Pledged shares
    for i in stock_data:
      for j in i:
        j=str(j)
        if(stock_name in j):
          # print(j.index(i))
          stock_position=stock_data.index(i)
          # print(j)
          break

    pledged_shares=stock_data[stock_position][15]
    # print(pledged_shares)
    stock_name=stock_data[stock_position][5]
    count_pshares=1
    if(pledged_shares>0):
      pepoints-=1
      count_pshares=count_pshares*-10
    else:
      count_pshares=count_pshares*10
      pepoints+=1

    ##Entities: Alpha & Beta
    alpha=round(stock_data[stock_position][9],2)
    # print("Alpha",alpha)
    beta=round(stock_data[stock_position][10],2)
    # print("Beta",beta)
    divy=data['Dividend Yield']
    # print("Dividend Yield",divy)

    cagr=stock_data[stock_position][8]
    # print("CAGR:", cagr)

    # pepoints

    ##Indicator 14: PE Ratio
    st_pe=data['TTM PE']
    se_pe=data['Sector PE']
    # print("Stock PE", st_pe)
    # print("Sector PE",se_pe)
    count_pe=1
    if(data['TTM PE']=="--"):
        count_pe=pepoints*12
    elif(data['TTM PE']<data['Sector PE']):
      count_pe=pepoints*15
    else:
      count_pe=pepoints*10

    # print(count_pe)



    #Predicting Target Price 
    flag=0
    target_price=None
    entry_price=None
    # int(indicator_data['ENTERPRISE VALUE (CR.)'])
    # print(indicator_data['EV/EBITDA (X)'])
    print()

    ebitda_list=[]
    for i in range(len(indicator_data['ENTERPRISE VALUE (CR.)'])-1,-1,-1):
            if(indicator_data['ENTERPRISE VALUE (CR.)'][i]==0):

              flag=1
              break

            # print(indicator_data['ENTERPRISE VALUE (CR.)'][i] , "/" , indicator_data['EV/EBITDA (X)'][i],"=", round((indicator_data['ENTERPRISE VALUE (CR.)'][i]/indicator_data['EV/EBITDA (X)'][i]),2))
            ebitda_list.append(round(indicator_data['ENTERPRISE VALUE (CR.)'][i]/indicator_data['EV/EBITDA (X)'][i],2))
    if(flag==0):

      print()
      ebitda_list=ebitda_list[::-1]

      # print(ebitda_list)
      growth_ebitda=[]
      for i in range(len(ebitda_list)-1,0,-1):
        # print(ebitda_list[i-1],"-",ebitda_list[i],"=",round(ebitda_list[i-1]-ebitda_list[i],2), "   ",round((ebitda_list[i-1]-ebitda_list[i])/ebitda_list[i]*100,2))
        growth_ebitda.append(round((ebitda_list[i-1]-ebitda_list[i])/ebitda_list[i]*100,2))

      print()
      growth_ebitda=growth_ebitda[::-1]

      # print(growth_ebitda)
      print()
      grow=0
      for i in range(len(growth_ebitda)-1):
        grow=grow+growth_ebitda[i]

      growth=round(grow/3,2)
      # print("Growth for last three years:", growth)
      print()
      # print(ebitda_list[0])
      pred_ebitda=round(((100+growth)*ebitda_list[0])/100,2)

      # print("Predicted Ebitda:",pred_ebitda)


      print()
      forecasted_ev= round(pred_ebitda*indicator_data['EV/EBITDA (X)'][0],2)

      print()
      forecasted_ev=forecasted_ev-indicator_data['LONG TERM BORROWINGS'][0]
      forecasted_ev

      # print("Forecasted EV:",forecasted_ev)
      print()
      target_price=round(forecasted_ev/shareholding,2)
      # print("Target Price:", target_price)

      entry_price=round(target_price*0.75,2)
      # print("Good Buy Price:",entry_price)

    points=bonus+count_currentratio+count_debt+count_ebit+count_ito+count_profitloss+count_rec+count_reserves+count_revenuefromop+count_roce+count_netcashflow+count_pe+count_freecash+count_pshares
    final_list=[]
    per_pro="6%"
    industry="FMCG Products"
    
    final_list.append(stock_name)
    
    final_list.append(cap)
    final_list.append(roce_ind)
    final_list.append(points)
    final_list.append(per_pro)
    final_list.append(industry)
    return final_list

  table=[]
  url_list=[]
  url_list=[[["HINDUNILVR"],["https://www.moneycontrol.com/india/stockpricequote/personalcare/hindustanunilever/HU"],["https://www.moneycontrol.com/financials/hindustanunilever/balance-sheetVI/HU#HU","https://www.moneycontrol.com/financials/hindustanunilever/profit-lossVI/HU#HU","https://www.moneycontrol.com/financials/hindustanunilever/cash-flowVI/HU#HU","https://www.moneycontrol.com/financials/hindustanunilever/ratiosVI/HU#HU"]],
            [["DABUR"],["https://www.moneycontrol.com/india/stockpricequote/personalcare/daburindia/DI"],["https://www.moneycontrol.com/financials/daburindia/balance-sheetVI/DI#DI","https://www.moneycontrol.com/financials/daburindia/ratiosVI/DI#DI","https://www.moneycontrol.com/financials/daburindia/profit-lossVI/DI#DI", "https://www.moneycontrol.com/financials/daburindia/cash-flowVI/DI#DI "]],
            [['GODREJCP'],["https://www.moneycontrol.com/india/stockpricequote/personalcare/godrejconsumerproducts/GCP"],['https://www.moneycontrol.com/financials/godrejconsumerproducts/balance-sheetVI/GCP#GCP','https://www.moneycontrol.com/financials/godrejconsumerproducts/profit-lossVI/GCP#GCP','https://www.moneycontrol.com/financials/godrejconsumerproducts/cash-flowVI/GCP#GCP','https://www.moneycontrol.com/financials/godrejconsumerproducts/ratiosVI/GCP#GCP']],
            
            [["MARICO"],['https://www.moneycontrol.com/india/stockpricequote/personalcare/marico/M13'],['https://www.moneycontrol.com/financials/marico/profit-lossVI/M13#M13','https://www.moneycontrol.com/financials/marico/ratiosVI/M13#M13','https://www.moneycontrol.com/financials/marico/cash-flowVI/M13#M13','https://www.moneycontrol.com/financials/marico/balance-sheetVI/M13#M13']],
            
            [["COLPAL"],['https://www.moneycontrol.com/india/stockpricequote/personalcare/colgatepalmoliveindia/CPI'],['https://www.moneycontrol.com/financials/colgatepalmoliveindia/cash-flowVI/CPI#CPI','https://www.moneycontrol.com/financials/colgatepalmoliveindia/profit-lossVI/CPI#CPI','https://www.moneycontrol.com/financials/colgatepalmoliveindia/balance-sheetVI/CPI#CPI','https://www.moneycontrol.com/financials/colgatepalmoliveindia/ratiosVI/CPI#CPI']],
            [['PGHH'],['https://www.moneycontrol.com/india/stockpricequote/personalcare/proctergamblehygienehealthcare/PGH'],['https://www.moneycontrol.com/financials/proctergamblehygienehealthcare/balance-sheetVI/PGH#PGH','https://www.moneycontrol.com/financials/proctergamblehygienehealthcare/profit-lossVI/PGH#PGH','https://www.moneycontrol.com/financials/proctergamblehygienehealthcare/cash-flowVI/PGH#PGH','https://www.moneycontrol.com/financials/proctergamblehygienehealthcare/ratiosVI/PGH#PGH']],
            [['EMAMILTD'],['https://www.moneycontrol.com/india/stockpricequote/personalcare/emami/E06'],['https://www.moneycontrol.com/financials/emami/balance-sheetVI/E06#E06','https://www.moneycontrol.com/financials/emami/profit-lossVI/E06#E06','https://www.moneycontrol.com/financials/emami/cash-flowVI/E06#E06','https://www.moneycontrol.com/financials/emami/ratiosVI/E06#E06']],
            [['GILLETTE'],['https://www.moneycontrol.com/india/stockpricequote/personalcare/gilletteindia/GI22'],['https://www.moneycontrol.com/financials/gilletteindia/balance-sheetVI/GI22#GI22','https://www.moneycontrol.com/financials/gilletteindia/profit-lossVI/GI22#GI22','https://www.moneycontrol.com/financials/gilletteindia/cash-flowVI/GI22#GI22','https://www.moneycontrol.com/financials/gilletteindia/ratiosVI/GI22#GI22']],
            [['JYOTHYLAB'],['https://www.moneycontrol.com/india/stockpricequote/personalcare/jyothylabs/JL'],['https://www.moneycontrol.com/financials/jyothylabs/balance-sheetVI/JL#JL','https://www.moneycontrol.com/financials/jyothylabs/profit-lossVI/JL#JL','https://www.moneycontrol.com/financials/jyothylabs/cash-flowVI/JL#JL','https://www.moneycontrol.com/financials/jyothylabs/ratiosVI/JL#JL']]]
          


  for i in range(len(url_list)):
    list_input=[]
    for j in url_list[i]:
      list_input.append(j)
    stockname=list_input[0][0]
    url1=list_input[1][0]
    url2=list_input[2]
    print(stockname,url1,url2)
    final_list=fmcgpro(stockname,url1,url2)
    table.append(final_list)
  df=pd.DataFrame(table,columns=['stock_name','cap','roce_ind','points','per_pro','industry'])
  df.sort_values(by='points', ascending=False,inplace=True)
  stock=[]
  
  df_final=df[['stock_name','cap','roce_ind','per_pro','industry']]
    
  stock= df_final[:2].values.tolist()
    
  portfolio.append(stock) 

  
  def fmcgtobacco(stockname,url1,url2):


    stock_name=stockname
    url = url1

    # Make a GET request to fetch the raw HTML content
    html_content = requests.get(url).text

    # Parse HTML code for the entire site
    soup = BeautifulSoup(html_content, "lxml")
    # print(soup)

    mc = soup.find_all("div", attrs={"class": "oview_table"})
    # print("Number of tables on site: ",len(mc))

    data = dict()
    for tb in mc[:4]:
        body = tb.find_all("tr")
        for i in body:
            vals = i.find_all("td")
            title = vals[0].text.strip()
            try:
                value = float(vals[1].text.replace(',',''))
            except ValueError:
                value = vals[1].text.replace(',','')
            data[title] = value
    # print(data)



    excel_data=pd.read_csv(r"C:\Users\mohil\OneDrive\Desktop\STOCKS_new.csv")
    excel_data.dropna(axis=0,how="any",inplace=True)
    excel_data.drop(columns=['Name (largecap alpha.csv)', 'Ticker (largecap alpha.csv)'],inplace=True)
    # excel_data.head(10)

    avg_price=round((data['Open']+data['Previous Close'])/2,2)
    shareholding=round((data['Mkt Cap (Rs. Cr.)']/avg_price),2)
    shareholding

    parameters_dict = dict()
    def scrape_indicators(urls):
        for url in urls:
            html_content = requests.get(url).text

            # Parse HTML code for the entire site
            soup = BeautifulSoup(html_content, "lxml")
            stonks = soup.find_all("div", attrs={"id": "standalone-new"})

            body = stonks[0].find_all("tr")

            indicator_dict = dict()

            for record in body:
                indicator = record.find_all("td")[0].text.upper()
                temp_indicator_values = []
                try:
                    for table_data in (record.find_all('td')[1:-1]):
                        temp_indicator_values.append(
                            float(table_data.text.replace(',', '')))
                except ValueError:
                    continue
                indicator_dict[indicator] = temp_indicator_values

            parameters_dict.update(indicator_dict)

        yield(url, parameters_dict)


        
    urls=url2


    for request_url, indicator_data in scrape_indicators(urls):
        # print(request_url)
        # print(indicator_data)
        print()
        print()



    pepoints=0

    if(data['Mkt Cap (Rs. Cr.)']<20000.00 and data['Mkt Cap (Rs. Cr.)']>5000.00):
      cap="Mid Cap"
    elif (data['Mkt Cap (Rs. Cr.)']>20000.00):
      cap="Large Cap"
    else:
      cap="Small Cap"
    

    ##Indicator 1: Reserves & Surplus
    # print(indicator_data['RESERVES AND SURPLUS'])
    rands_list=[]
    count_reserves=0
    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,0,-1):
      if(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i]>0):
        rands_list.append(round(((indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i])/indicator_data['RESERVES AND SURPLUS'][i])*100,2))
        # print(indicator_data['RESERVES AND SURPLUS'][i])
        count_reserves=count_reserves+20
        pepoints+=1
        # print(indicator_data['RESERVES AND SURPLUS'][i-1] , "-" , indicator_data['RESERVES AND SURPLUS'][i],"=", round(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i],2))
      else:
        rands_list.append(round(((indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i])/indicator_data['RESERVES AND SURPLUS'][i])*100,2))
        # print(indicator_data['RESERVES AND SURPLUS'][i])
        count_reserves=count_reserves-20
        pepoints-=1
        # print(indicator_data['RESERVES AND SURPLUS'][i-1],"-",indicator_data['RESERVES AND SURPLUS'][i],"=", round(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i],2))

    rands_list=rands_list[::-1]

    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,-1,-1):
        if(indicator_data['RESERVES AND SURPLUS'][i]<0):
          count_reserves-=20
          pepoints-=1

    # print(count_reserves)
    # print(rands_list)

    ##Indicator 2: Revenue From Operations Gross
    count_revenuefromop=0
    revenue_list=[]
    # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])
    for i in range(len(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])-1,0,-1):
      if(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i]>0):
        revenue_list.append(round(((indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])/indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])*100,2))
        count_revenuefromop=count_revenuefromop+10
        # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1] , "-" , indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],"=", round(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],2))
      else:
        revenue_list.append(round(((indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])/indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])*100,2))
        count_revenuefromop=count_revenuefromop-10
        # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1],"-",indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],"=",round(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],2))

    revenue_list=revenue_list[::-1]

    for i in range(len(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])-1,-1,-1):
        if(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i]<0):
          count_revenuefromop-=15


    # print(count_revenuefromop)
    # print(revenue_list)





    ##Indicator 3: Profit/Loss for the period
    count_profitloss=0
    profit_list=[]
    # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'])
    for i in range(len(indicator_data['PROFIT/LOSS FOR THE PERIOD'])-1,0,-1):
      if(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i]>0):
        profit_list.append(round(((indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])/indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])*100,2))
        count_profitloss=count_profitloss+10
        # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1] , "-" , indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],"=", round(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],2))
      else:
        profit_list.append(round(((indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])/indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])*100,2))
        count_profitloss=count_profitloss-10
        # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1],"-",indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],"=",round(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],2))

    profit_list=profit_list[::-1]

    for i in range(len(indicator_data['PROFIT/LOSS FOR THE PERIOD'])-1,-1,-1):
        if(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i]<0):
          count_profitloss-=15

    # print(count_profitloss)
    # print(profit_list)

    # print(pepoints)

    ##Indicator 4: ROCE

    count_roce=0
    # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])
    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,0,-1):
      if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]>-1):
        count_roce+=10
        # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1] , "-" , indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],"=", round(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],2))
      else:
        count_roce-=10
        # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1],"-",indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],"=",round(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],2))

    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,-1,-1):
        if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]<10):
          count_roce-=15
          pepoints-=1
        else:
          if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]>10):
            count_roce+=15
            pepoints+=1

    roce_ind=indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][0]


    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,-1,-1):
        if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]<0):
          count_roce-=25



    # print(count_roce)

    # print(pepoints)

    ##Indicator 5: Inventory Turnover Ratio
    count_ito=0
    # print(indicator_data['INVENTORY TURNOVER RATIO (X)'])
    for i in range(len(indicator_data['INVENTORY TURNOVER RATIO (X)'])-1,0,-1):
      if(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i]>0):
        count_ito+=20
        pepoints+=1
        # print(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1] , "-" , indicator_data['INVENTORY TURNOVER RATIO (X)'][i],"=", round(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i],2))
      else:
        count_ito-=10
        pepoints-=1
        # print(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1],"-",indicator_data['INVENTORY TURNOVER RATIO (X)'][i],"=",round(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i],2))
    # print(count_ito)

    # pepoints

    ##Indicator 6: Reserves & Surplus/Equity Share Capital
    # print(indicator_data['RESERVES AND SURPLUS'])
    # print(indicator_data['TOTAL SHARE CAPITAL'])
    print()
    rsesc_list=[]
    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,-1,-1):
            # print(indicator_data['RESERVES AND SURPLUS'][i])
            # print(indicator_data['RESERVES AND SURPLUS'][i] , "/" , indicator_data['TOTAL SHARE CAPITAL'][i],"=", round((indicator_data['RESERVES AND SURPLUS'][i]/indicator_data['TOTAL SHARE CAPITAL'][i]),2))
            rsesc_list.append(round(indicator_data['RESERVES AND SURPLUS'][i]/indicator_data['TOTAL SHARE CAPITAL'][i],2))

    print()
    rsesc_list=rsesc_list[::-1]
    # print(rsesc_list)
    print()
    count_rec=0
    for i in range(len(rsesc_list)-1,0,-1):
      if(rsesc_list[i-1]-rsesc_list[i]>0):
        count_rec+=20
        pepoints+=1
        # print(rsesc_list[i-1] , "-" , rsesc_list[i],"=", round(rsesc_list[i-1]-rsesc_list[i],2))
      else:
        count_rec-=10
        pepoints-=1
        # print(rsesc_list[i-1],"-",rsesc_list[i],"=",round(rsesc_list[i-1]-rsesc_list[i],2))


    for i in range(len(rsesc_list)-1,-1,-1):
        if(rsesc_list[i]<10):
          count_rec-=15

    for i in range(len(rsesc_list)-1,-1,-1):
        if(rsesc_list[i]<0):
          count_rec-=20


    # print(rsesc_list)
    # print(count_rec)



    # pepoints





    ## Indicator 7: Trade Receivables in Current Assets
    # print(indicator_data['TOTAL CURRENT ASSETS'])
    # print(indicator_data['TRADE RECEIVABLES'])

    trade_list=[]
    bonus=0
    for i in range(len(indicator_data['TOTAL CURRENT ASSETS'])-1,-1,-1):
              # print(indicator_data['TOTAL CURRENT ASSETS'][i] , "/" , indicator_data['TRADE RECEIVABLES'][i],"=", round((indicator_data['TOTAL CURRENT ASSETS'][i]/indicator_data['TRADE RECEIVABLES'][i]),2))
              if(round((indicator_data['TOTAL CURRENT ASSETS'][i]/indicator_data['TRADE RECEIVABLES'][i]),2)<50.00):
                bonus+=10
              else:
                bonus-=5
    # print(bonus)

    # print(pepoints)

    ## Indicator 8: Earnings Before Interest Tax

    indicator_data['PBIT MARGIN (%)']
    count_ebit=0
    # print(indicator_data['PBIT MARGIN (%)'])
    for i in range(len(indicator_data['PBIT MARGIN (%)'])-1,0,-1):
      if(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i]>0):
        count_ebit+=10
        pepoints+=1
        # print(indicator_data['PBIT MARGIN (%)'][i-1] , "-" , indicator_data['PBIT MARGIN (%)'][i],"=", round(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i],2))
      else:
        count_ebit-=5
        pepoints+=1
        # print(indicator_data['PBIT MARGIN (%)'][i-1],"-",indicator_data['PBIT MARGIN (%)'][i],"=",round(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i],2))

    for i in range(len(indicator_data['PBIT MARGIN (%)'])-1,-1,-1):
        if(indicator_data['PBIT MARGIN (%)'][i]<0):
          count_ebit-=20


    # print(count_ebit)

    # print(pepoints)

    ## Indicator 9: Debt To Equity Ratio

    count_debt=0
    # print(indicator_data["TOTAL DEBT/EQUITY (X)"])

    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,0,-1):
      if(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i]>0):
        count_debt+=10
        # print(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1] , "-" , indicator_data['TOTAL DEBT/EQUITY (X)'][i],"=", round(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i],2))
      elif (indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i]==0):
            count_debt+=10
      else:
        count_debt-=5
        # print(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1],"-",indicator_data['TOTAL DEBT/EQUITY (X)'][i],"=",round(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i],2))
      
    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,-1,-1):
        if(indicator_data['TOTAL DEBT/EQUITY (X)'][i]>2):
          count_debt-=15
          pepoints-=1
        else:
          count_debt+=15
          pepoints+=1

    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,-1,-1):
        if(indicator_data['TOTAL DEBT/EQUITY (X)'][i]<0):
          count_debt-=20


    # print(count_debt)

    # pepoints

    ## Indicator 10: Current Ratio
    indicator_data['CURRENT RATIO (X)']

    count_currentratio=0
    # print(indicator_data["CURRENT RATIO (X)"])

    for i in range(len(indicator_data['CURRENT RATIO (X)'])-1,0,-1):
      if(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i]>0):
        count_currentratio+=10
        # print(indicator_data['CURRENT RATIO (X)'][i-1] , "-" , indicator_data['CURRENT RATIO (X)'][i],"=", round(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i],2))
      elif ((indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i])==0):
            count_currentratio+=10
      else:
        count_currentratio-=5
        # print(indicator_data['CURRENT RATIO (X)'][i-1],"-",indicator_data['CURRENT RATIO (X)'][i],"=",round(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i],2))

    for i in range(len(indicator_data['CURRENT RATIO (X)'])-1,-1,-1):
        if(indicator_data['CURRENT RATIO (X)'][i]<2):
          # print(indicator_data['CURRENT RATIO (X)'][i])
          count_currentratio-=10
          pepoints=pepoints-0.5
        elif (indicator_data['CURRENT RATIO (X)'][i]<1):
          count_currentratio-=20
          pepoints=pepoints-1
        else:
          count_currentratio+=10
          pepoints+=1


    # print(count_currentratio)

    # pepoints

    ##Indicator 11: Net Cashflow From Operating Activities
    count_netcashflow=0
    cashflow_list=[]
    # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])
    for i in range(len(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])-1,0,-1):
      if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]>0):
        cashflow_list.append(round(((indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])/indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])*100,2))
        count_netcashflow=count_netcashflow+10
        pepoints+=1
        # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1] , "-" , indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],"=", round(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],2))
      else:
        cashflow_list.append(round(((indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])/indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])*100,2))
        count_netcashflow=count_netcashflow-10
        pepoints-=1
        # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1],"-",indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],"=",round(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],2))

    cashflow_list=cashflow_list[::-1]

    for i in range(len(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])-1,-1,-1):
        if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]<0):
          count_netcashflow-=15

    # print(count_netcashflow)
    # print(cashflow_list)

    ##Indicator 12: Free cash Flow
    stock_position=None
    stock_data=excel_data.values.tolist()
    stock_data
    for i in stock_data:
      for j in i:
        j=str(j)
        if(stock_name in j):
          # print(j.index(i))
          stock_position=stock_data.index(i)
          # print(j)
          break
          
    # print(stock_position)

    freecash_list=[]
    for i in range(5):
      freecash_list.append(stock_data[stock_position][i])
    # print(freecash_list)

    count_freecash=0
    for i in range(1,len(freecash_list)):
      if(freecash_list[i]-freecash_list[i-1]>0):
        # print(freecash_list[i],"-",freecash_list[i-1],"=",freecash_list[i]-freecash_list[i-1])
        count_freecash+=20
        pepoints+=1
      else:
        # print(freecash_list[i],"-",freecash_list[i-1],"=",freecash_list[i]-freecash_list[i-1])
        count_freecash-=10
        pepoints-=1

    for i in range(0,len(freecash_list)):
      if(freecash_list[i]<0):
        count_freecash-=20
        pepoints-=1

    # print(count_freecash)

    ##Indicator 13: Pledged shares
    for i in stock_data:
      for j in i:
        j=str(j)
        if(stock_name in j):
          # print(j.index(i))
          stock_position=stock_data.index(i)
          # print(j)
          break

    pledged_shares=stock_data[stock_position][15]
    # print(pledged_shares)

    count_pshares=1
    if(pledged_shares>0):
      pepoints-=1
      count_pshares=count_pshares*-10
    else:
      pepoints+=1
      count_pshares=count_pshares*10

    ##Entities: Alpha & Beta
    alpha=round(stock_data[stock_position][9],2)
    # print("Alpha",alpha)
    beta=round(stock_data[stock_position][10],2)
    # print("Beta",beta)
    divy=data['Dividend Yield']
    # print("Dividend Yield",divy)

    cagr=stock_data[stock_position][8]
    # print("CAGR:", cagr)

    # pepoints

    ##Indicator 14: PE Ratio
    st_pe=data['TTM PE']
    se_pe=data['Sector PE']
    # print("Stock PE", st_pe)
    # print("Sector PE",se_pe)
    count_pe=1
    if(data['TTM PE']=="--"):
        count_pe=pepoints*10
    elif(data['TTM PE']<data['Sector PE']):
      count_pe=pepoints*15
    else:
      count_pe=pepoints*10

    # print(count_pe)



    #Predicting Target Price 

    # int(indicator_data['ENTERPRISE VALUE (CR.)'])
    # print(indicator_data['EV/EBITDA (X)'])
    print()

    ebitda_list=[]
    for i in range(len(indicator_data['ENTERPRISE VALUE (CR.)'])-1,-1,-1):
            # print(indicator_data['RESERVES AND SURPLUS'][i])
            # print(indicator_data['ENTERPRISE VALUE (CR.)'][i] , "/" , indicator_data['EV/EBITDA (X)'][i],"=", round((indicator_data['ENTERPRISE VALUE (CR.)'][i]/indicator_data['EV/EBITDA (X)'][i]),2))
            ebitda_list.append(round(indicator_data['ENTERPRISE VALUE (CR.)'][i]/indicator_data['EV/EBITDA (X)'][i],2))
    print()
    ebitda_list=ebitda_list[::-1]

    # print(ebitda_list)
    growth_ebitda=[]
    for i in range(len(ebitda_list)-1,0,-1):
      # print(ebitda_list[i-1],"-",ebitda_list[i],"=",round(ebitda_list[i-1]-ebitda_list[i],2), "   ",round((ebitda_list[i-1]-ebitda_list[i])/ebitda_list[i]*100,2))
      growth_ebitda.append(round((ebitda_list[i-1]-ebitda_list[i])/ebitda_list[i]*100,2))

    print()
    growth_ebitda=growth_ebitda[::-1]

    # print(growth_ebitda)
    print()
    grow=0
    for i in range(len(growth_ebitda)-1):
      grow=grow+growth_ebitda[i]

    growth=round(grow/3,2)
    # print("Growth for last three years:", growth)
    print()
    # print(ebitda_list[0])
    pred_ebitda=round(((100+growth)*ebitda_list[0])/100,2)

    # print("Predicted Ebitda:",pred_ebitda)


    print()
    forecasted_ev= round(pred_ebitda*indicator_data['EV/EBITDA (X)'][0],2)

    print()
    forecasted_ev=forecasted_ev-indicator_data['LONG TERM BORROWINGS'][0]
    forecasted_ev

    # print("Forecasted EV:",forecasted_ev)
    print()
    target_price=round(forecasted_ev/shareholding,2)
    # print("Target Price:", target_price)

    entry_price=round(target_price*0.75,2)
    # print("Good Buy Price:",entry_price)

    points=bonus+count_currentratio+count_debt+count_ebit+count_ito+count_profitloss+count_rec+count_reserves+count_revenuefromop+count_roce+count_netcashflow+count_pe+count_freecash+count_pshares
    final_list=[]
    per_tob="6%"
    industry="FMCG Tobacco"
    final_list.append(stock_name)
    
    final_list.append(cap)
    final_list.append(roce_ind)
    final_list.append(points)
    final_list.append(per_tob)
    final_list.append(industry)
    
    return final_list

  table=[]
  url_list=[]
  url_list=[[["Godfrey"],["https://www.moneycontrol.com/india/stockpricequote/cigarettes/godfreyphillipsindia/GPI"],
          ["https://www.moneycontrol.com/financials/godfreyphillipsindia/balance-sheetVI/GPI#GPI","https://www.moneycontrol.com/financials/godfreyphillipsindia/profit-lossVI/GPI#GPI",
          "https://www.moneycontrol.com/financials/godfreyphillipsindia/cash-flowVI/GPI#GPI","https://www.moneycontrol.com/financials/godfreyphillipsindia/ratiosVI/GPI#GPI"]],
            [["ITC"],["https://www.moneycontrol.com/india/stockpricequote/cigarettes/itc/ITC"],["https://www.moneycontrol.com/financials/itc/balance-sheetVI/ITC#ITC","https://www.moneycontrol.com/financials/itc/profit-lossVI/ITC#ITC",
            "https://www.moneycontrol.com/financials/itc/cash-flowVI/ITC#ITC", " https://www.moneycontrol.com/financials/itc/ratiosVI/ITC#ITC"]],
              [['VST'],["https://www.moneycontrol.com/india/stockpricequote/cigarettes/vstindustries/VST"],['https://www.moneycontrol.com/financials/vstindustries/balance-sheetVI/VST#VST','https://www.moneycontrol.com/financials/vstindustries/profit-lossVI/VST#VST','https://www.moneycontrol.com/financials/vstindustries/cash-flowVI/VST#VST','https://www.moneycontrol.com/financials/vstindustries/ratiosVI/VST#VST']]]
            

  # print(len(url_list))
  # print(len(url_list))

  for i in range(len(url_list)):
    list_input=[]
    for j in url_list[i]:
      list_input.append(j)
    stockname=list_input[0][0]
    url1=list_input[1][0]
    url2=list_input[2]
    print(stockname,url1,url2)
    final_list=fmcgtobacco(stockname,url1,url2)
    table.append(final_list)
  df=pd.DataFrame(table,columns=['stock_name','cap','roce_ind','points','per_tob','industry'])
  df.sort_values(by='points', ascending=False,inplace=True)
  stock=[]
  df_final=df[['stock_name','cap','roce_ind','per_tob','industry']]
    
  stock= df_final[:2].values.tolist()
    
  portfolio.append(stock) 


  def itcon(stockname,url1,url2):


    stock_name=stockname
    url = url1

    # Make a GET request to fetch the raw HTML content
    html_content = requests.get(url).text

    # Parse HTML code for the entire site
    soup = BeautifulSoup(html_content, "lxml")
    # print(soup)

    mc = soup.find_all("div", attrs={"class": "oview_table"})
    # print("Number of tables on site: ",len(mc))

    data = dict()
    for tb in mc[:4]:
        body = tb.find_all("tr")
        for i in body:
            vals = i.find_all("td")
            title = vals[0].text.strip()
            try:
                value = float(vals[1].text.replace(',',''))
            except ValueError:
                value = vals[1].text.replace(',','')
            data[title] = value
    # print(data)



    excel_data=pd.read_csv(r"C:\Users\mohil\OneDrive\Desktop\STOCKS_new.csv")
    excel_data.drop(columns=['Name (largecap alpha.csv)', 'Ticker (largecap alpha.csv)'],inplace=True)
    # excel_data.head(10)

    avg_price=round((data['Open']+data['Previous Close'])/2,2)
    shareholding=round((data['Mkt Cap (Rs. Cr.)']/avg_price),2)
    shareholding

    parameters_dict = dict()
    def scrape_indicators(urls):
        for url in urls:
            html_content = requests.get(url).text

            # Parse HTML code for the entire site
            soup = BeautifulSoup(html_content, "lxml")
            stonks = soup.find_all("div", attrs={"id": "standalone-new"})

            body = stonks[0].find_all("tr")

            indicator_dict = dict()

            for record in body:
                indicator = record.find_all("td")[0].text.upper()
                temp_indicator_values = []
                try:
                    for table_data in (record.find_all('td')[1:-1]):
                        temp_indicator_values.append(
                            float(table_data.text.replace(',', '')))
                except ValueError:
                    continue
                indicator_dict[indicator] = temp_indicator_values

            parameters_dict.update(indicator_dict)

        yield(url, parameters_dict)
      
    urls=url2
    # urls = ["https://www.moneycontrol.com/financials/godfreyphillipsindia/balance-sheetVI/GPI#GPI","https://www.moneycontrol.com/financials/godfreyphillipsindia/profit-lossVI/GPI#GPI","https://www.moneycontrol.com/financials/godfreyphillipsindia/cash-flowVI/GPI#GPI","https://www.moneycontrol.com/financials/godfreyphillipsindia/ratiosVI/GPI#GPI"]


    for request_url, indicator_data in scrape_indicators(urls):
        # print(request_url)
        # print(indicator_data)
        print()
        print()

    pepoints=0


    if(data['Mkt Cap (Rs. Cr.)']<20000.00 and data['Mkt Cap (Rs. Cr.)']>5000.00):
      cap="Mid Cap"
    elif (data['Mkt Cap (Rs. Cr.)']>20000.00):
      cap="Large Cap"
    else:
      cap="Small Cap"
    
    ##Indicator 1: Reserves & Surplus
    # print(indicator_data['RESERVES AND SURPLUS'])
    rands_list=[]
    count_reserves=0
    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,0,-1):
      if(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i]>0):
        rands_list.append(round(((indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i])/indicator_data['RESERVES AND SURPLUS'][i])*100,2))
        # print(indicator_data['RESERVES AND SURPLUS'][i])
        count_reserves=count_reserves+20
        pepoints+=1
        # print(indicator_data['RESERVES AND SURPLUS'][i-1] , "-" , indicator_data['RESERVES AND SURPLUS'][i],"=", round(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i],2))
      else:
        rands_list.append(round(((indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i])/indicator_data['RESERVES AND SURPLUS'][i])*100,2))
        # print(indicator_data['RESERVES AND SURPLUS'][i])
        count_reserves=count_reserves-20
        pepoints-=1
        # print(indicator_data['RESERVES AND SURPLUS'][i-1],"-",indicator_data['RESERVES AND SURPLUS'][i],"=", round(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i],2))

    rands_list=rands_list[::-1]

    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,-1,-1):
        if(indicator_data['RESERVES AND SURPLUS'][i]<0):
          count_reserves-=20
          pepoints-=1

    # print(count_reserves)
    # print(rands_list)

    ##Indicator 2: Revenue From Operations Gross
    count_revenuefromop=0
    revenue_list=[]
    # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])
    for i in range(len(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])-1,0,-1):
      if(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i]>0):
        revenue_list.append(round(((indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])/indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])*100,2))
        count_revenuefromop=count_revenuefromop+10
        # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1] , "-" , indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],"=", round(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],2))
      else:
        revenue_list.append(round(((indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])/indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])*100,2))
        count_revenuefromop=count_revenuefromop-10
        # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1],"-",indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],"=",round(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],2))

    revenue_list=revenue_list[::-1]

    for i in range(len(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])-1,-1,-1):
        if(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i]<0):
          count_revenuefromop-=15


    # print(count_revenuefromop)
    # print(revenue_list)





    ##Indicator 3: Profit/Loss for the period
    count_profitloss=0
    profit_list=[]
    # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'])
    for i in range(len(indicator_data['PROFIT/LOSS FOR THE PERIOD'])-1,0,-1):
      if(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i]>0):
        profit_list.append(round(((indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])/indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])*100,2))
        count_profitloss=count_profitloss+10
        # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1] , "-" , indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],"=", round(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],2))
      else:
        profit_list.append(round(((indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])/indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])*100,2))
        count_profitloss=count_profitloss-10
        # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1],"-",indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],"=",round(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],2))

    profit_list=profit_list[::-1]

    for i in range(len(indicator_data['PROFIT/LOSS FOR THE PERIOD'])-1,-1,-1):
        if(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i]<0):
          count_profitloss-=15

    # print(count_profitloss)
    # print(profit_list)

    # print(pepoints)

    ##Indicator 4: ROCE

    count_roce=0
    # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])
    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,0,-1):
      if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]>-1):
        count_roce+=10
        # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1] , "-" , indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],"=", round(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],2))
      else:
        count_roce-=10
        # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1],"-",indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],"=",round(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],2))

    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,-1,-1):
        if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]<10):
          count_roce-=15
          pepoints-=1
        else:
          if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]>10):
            count_roce+=15
            pepoints+=1


    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,-1,-1):
        if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]<0):
          count_roce-=25

    roce_ind=indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][0]

    # print(count_roce)

    # print(pepoints)

    # ##Indicator 5: Inventory Turnover Ratio
    # count_ito=0
    # # print(indicator_data['INVENTORY TURNOVER RATIO (X)'])
    # for i in range(len(indicator_data['INVENTORY TURNOVER RATIO (X)'])-1,0,-1):
    #   if(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i]>0):
    #     count_ito+=20
    #     pepoints+=1
    #     # print(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1] , "-" , indicator_data['INVENTORY TURNOVER RATIO (X)'][i],"=", round(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i],2))
    #   else:
    #     count_ito-=10
    #     pepoints-=1
    #     # print(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1],"-",indicator_data['INVENTORY TURNOVER RATIO (X)'][i],"=",round(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i],2))
    # # print(count_ito)

    # pepoints

    ##Indicator 6: Reserves & Surplus/Equity Share Capital
    # print(indicator_data['RESERVES AND SURPLUS'])
    # print(indicator_data['TOTAL SHARE CAPITAL'])
    print()
    rsesc_list=[]
    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,-1,-1):
            # print(indicator_data['RESERVES AND SURPLUS'][i])
            # print(indicator_data['RESERVES AND SURPLUS'][i] , "/" , indicator_data['TOTAL SHARE CAPITAL'][i],"=", round((indicator_data['RESERVES AND SURPLUS'][i]/indicator_data['TOTAL SHARE CAPITAL'][i]),2))
            rsesc_list.append(round(indicator_data['RESERVES AND SURPLUS'][i]/indicator_data['TOTAL SHARE CAPITAL'][i],2))

    print()
    rsesc_list=rsesc_list[::-1]
    # print(rsesc_list)
    print()
    count_rec=0
    for i in range(len(rsesc_list)-1,0,-1):
      if(rsesc_list[i-1]-rsesc_list[i]>0):
        count_rec+=20
        pepoints+=1
        # print(rsesc_list[i-1] , "-" , rsesc_list[i],"=", round(rsesc_list[i-1]-rsesc_list[i],2))
      else:
        count_rec-=10
        pepoints-=1
        # print(rsesc_list[i-1],"-",rsesc_list[i],"=",round(rsesc_list[i-1]-rsesc_list[i],2))


    for i in range(len(rsesc_list)-1,-1,-1):
        if(rsesc_list[i]<10):
          count_rec-=15

    for i in range(len(rsesc_list)-1,-1,-1):
        if(rsesc_list[i]<0):
          count_rec-=20


    # print(rsesc_list)
    # print(count_rec)



    # pepoints





    ## Indicator 7: Trade Receivables in Current Assets
    # print(indicator_data['TOTAL CURRENT ASSETS'])
    # print(indicator_data['TRADE RECEIVABLES'])

    trade_list=[]
    bonus=0
    for i in range(len(indicator_data['TOTAL CURRENT ASSETS'])-1,-1,-1):
              # print(indicator_data['TOTAL CURRENT ASSETS'][i] , "/" , indicator_data['TRADE RECEIVABLES'][i],"=", round((indicator_data['TOTAL CURRENT ASSETS'][i]/indicator_data['TRADE RECEIVABLES'][i]),2))
              if(round((indicator_data['TOTAL CURRENT ASSETS'][i]/indicator_data['TRADE RECEIVABLES'][i]),2)<50.00):
                bonus+=10
              else:
                bonus-=5
    # print(bonus)

    # print(pepoints)

    ## Indicator 8: Earnings Before Interest Tax

    indicator_data['PBIT MARGIN (%)']
    count_ebit=0
    # print(indicator_data['PBIT MARGIN (%)'])
    for i in range(len(indicator_data['PBIT MARGIN (%)'])-1,0,-1):
      if(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i]>0):
        count_ebit+=10
        pepoints+=1
        # print(indicator_data['PBIT MARGIN (%)'][i-1] , "-" , indicator_data['PBIT MARGIN (%)'][i],"=", round(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i],2))
      else:
        count_ebit-=5
        pepoints+=1
        # print(indicator_data['PBIT MARGIN (%)'][i-1],"-",indicator_data['PBIT MARGIN (%)'][i],"=",round(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i],2))

    for i in range(len(indicator_data['PBIT MARGIN (%)'])-1,-1,-1):
        if(indicator_data['PBIT MARGIN (%)'][i]<0):
          count_ebit-=20


    # print(count_ebit)

    # print(pepoints)

    ## Indicator 9: Debt To Equity Ratio

    count_debt=0
    # print(indicator_data["TOTAL DEBT/EQUITY (X)"])

    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,0,-1):
      if(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i]>0):
        count_debt+=10
        # print(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1] , "-" , indicator_data['TOTAL DEBT/EQUITY (X)'][i],"=", round(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i],2))
      elif (indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i]==0):
            count_debt+=10
      else:
        count_debt-=5
        # print(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1],"-",indicator_data['TOTAL DEBT/EQUITY (X)'][i],"=",round(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i],2))
      
    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,-1,-1):
        if(indicator_data['TOTAL DEBT/EQUITY (X)'][i]>2):
          count_debt-=15
          pepoints-=1
        else:
          count_debt+=15
          pepoints+=1

    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,-1,-1):
        if(indicator_data['TOTAL DEBT/EQUITY (X)'][i]<0):
          count_debt-=20


    # print(count_debt)

    # pepoints

    ## Indicator 10: Current Ratio
    indicator_data['CURRENT RATIO (X)']

    count_currentratio=0
    # print(indicator_data["CURRENT RATIO (X)"])

    for i in range(len(indicator_data['CURRENT RATIO (X)'])-1,0,-1):
      if(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i]>0):
        count_currentratio+=10
        # print(indicator_data['CURRENT RATIO (X)'][i-1] , "-" , indicator_data['CURRENT RATIO (X)'][i],"=", round(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i],2))
      elif ((indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i])==0):
            count_currentratio+=10
      else:
        count_currentratio-=5
        # print(indicator_data['CURRENT RATIO (X)'][i-1],"-",indicator_data['CURRENT RATIO (X)'][i],"=",round(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i],2))

    for i in range(len(indicator_data['CURRENT RATIO (X)'])-1,-1,-1):
        if(indicator_data['CURRENT RATIO (X)'][i]<2):
          # print(indicator_data['CURRENT RATIO (X)'][i])
          count_currentratio-=10
          pepoints=pepoints-0.5
        elif (indicator_data['CURRENT RATIO (X)'][i]<1):
          count_currentratio-=20
          pepoints=pepoints-1
        else:
          count_currentratio+=10
          pepoints+=1


    # print(count_currentratio)

    # pepoints

    ##Indicator 11: Net Cashflow From Operating Activities
    count_netcashflow=0
    cashflow_list=[]
    # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])
    for i in range(len(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])-1,0,-1):
      if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]==0):
        indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]=indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]
      if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]>0):
        cashflow_list.append(round(((indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])/indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])*100,2))
        count_netcashflow=count_netcashflow+10
        pepoints+=1
        # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1] , "-" , indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],"=", round(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],2))
      else:
        cashflow_list.append(round(((indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])/indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])*100,2))
        count_netcashflow=count_netcashflow-10
        pepoints-=1
        # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1],"-",indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],"=",round(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],2))

    cashflow_list=cashflow_list[::-1]

    for i in range(len(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])-1,-1,-1):
        if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]<0):
          count_netcashflow-=15

    # print(count_netcashflow)
    # print(cashflow_list)

    ##Indicator 12: Free cash Flow
    stock_position=None
    stock_data=excel_data.values.tolist()
    stock_data
    for i in stock_data:
      for j in i:
        j=str(j)
        if(stock_name in j):
          # print(j.index(i))
          stock_position=stock_data.index(i)
          # print(j)
          break
          
    # print(stock_position)

    freecash_list=[]
    for i in range(5):
      freecash_list.append(stock_data[stock_position][i])
    # print(freecash_list)

    count_freecash=0
    for i in range(1,len(freecash_list)):
      if(freecash_list[i]-freecash_list[i-1]>0):
        # print(freecash_list[i],"-",freecash_list[i-1],"=",freecash_list[i]-freecash_list[i-1])
        count_freecash+=20
        pepoints+=1
      else:
        # print(freecash_list[i],"-",freecash_list[i-1],"=",freecash_list[i]-freecash_list[i-1])
        count_freecash-=10
        pepoints-=1

    for i in range(0,len(freecash_list)):
      if(freecash_list[i]<0):
        count_freecash-=20
        pepoints-=1

    # print(count_freecash)

    ##Indicator 15: Net sales from operations

    count_revenuefromopqt=0
    revenueqt_list=[]
    # print(indicator_data['NET SALES/INCOME FROM OPERATIONS'])
    for i in range(len(indicator_data['NET SALES/INCOME FROM OPERATIONS'])-1,0,-1):
      if(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1]-indicator_data['NET SALES/INCOME FROM OPERATIONS'][i]>0):
        revenueqt_list.append(round(((indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1]-indicator_data['NET SALES/INCOME FROM OPERATIONS'][i])/indicator_data['NET SALES/INCOME FROM OPERATIONS'][i])*100,2))
        count_revenuefromopqt=count_revenuefromopqt+15
        pepoints=pepoints+1
        # print(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1] , "-" , indicator_data['NET SALES/INCOME FROM OPERATIONS'][i],"=", round(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1]-indicator_data['NET SALES/INCOME FROM OPERATIONS'][i],2))
      else:
        revenueqt_list.append(round(((indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1]-indicator_data['NET SALES/INCOME FROM OPERATIONS'][i])/indicator_data['NET SALES/INCOME FROM OPERATIONS'][i])*100,2))
        count_revenuefromopqt=count_revenuefromopqt-15
        pepoints=pepoints-1
        # print(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1],"-",indicator_data['NET SALES/INCOME FROM OPERATIONS'][i],"=",round(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i-1]-indicator_data['NET SALES/INCOME FROM OPERATIONS'][i],2))

    revenueqt_list=revenueqt_list[::-1]

    for i in range(len(indicator_data['NET SALES/INCOME FROM OPERATIONS'])-1,-1,-1):
        if(indicator_data['NET SALES/INCOME FROM OPERATIONS'][i]<0):
          count_revenuefromopqt-=15
          pepoints=pepoints-1

      ##Indicator 16: Net profit/loss
    count_profitqt=0
    profitqt_list=[]
    # print(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'])
    for i in range(len(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'])-1,0,-1):
      if(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1]-indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i]>0):
        profitqt_list.append(round(((indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1]-indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i])/indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i])*100,2))
        count_profitqt=count_profitqt+10
        pepoints=pepoints+1
        # print(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1] , "-" , indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i],"=", round(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1]-indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i],2))
      else:
        profitqt_list.append(round(((indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1]-indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i])/indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i])*100,2))
        count_profitqt=count_profitqt-10
        pepoints=pepoints-1
        # print(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1],"-",indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i],"=",round(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i-1]-indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i],2))

    profitqt_list=profitqt_list[::-1]

    for i in range(len(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'])-1,-1,-1):
        if(indicator_data['NET PROFIT/(LOSS) FOR THE PERIOD'][i]<0):
          count_profitqt-=5
          pepoints=pepoints-1


    
    ##Indicator 13: Pledged shares
    for i in stock_data:
      for j in i:
        j=str(j)
        if(stock_name in j):
          # print(j.index(i))
          stock_position=stock_data.index(i)
          # print(j)
          break

    pledged_shares=stock_data[stock_position][15]
    # print(pledged_shares)
    stock_name=stock_data[stock_position][5]
    count_pshares=1
    if(pledged_shares>0):
      pepoints-=1
      count_pshares=count_pshares*-10
    else:
      pepoints+=1
      count_pshares=count_pshares*10


    ##Entities: Alpha & Beta
    alpha=round(stock_data[stock_position][9],2)
    # print("Alpha",alpha)
    beta=round(stock_data[stock_position][10],2)
    # print("Beta",beta)
    divy=data['Dividend Yield']
    # print("Dividend Yield",divy)

    cagr=stock_data[stock_position][8]
    # print("CAGR:", cagr)

    # pepoints

    ##Indicator 14: PE Ratio
    st_pe=data['TTM PE']
    se_pe=data['Sector PE']
    # print("Stock PE", st_pe)
    # print("Sector PE",se_pe)
    count_pe=1
    if(data['TTM PE']=="--"):
        count_pe=pepoints*12
    elif(data['TTM PE']<data['Sector PE']):
      count_pe=pepoints*15
    else:
      count_pe=pepoints*10

    # print(count_pe)



    #Predicting Target Price 
    flag=0
    target_price=None
    entry_price=None
    # int(indicator_data['ENTERPRISE VALUE (CR.)'])
    # print(indicator_data['EV/EBITDA (X)'])
    print()

    ebitda_list=[]
    for i in range(len(indicator_data['ENTERPRISE VALUE (CR.)'])-1,-1,-1):
            if(indicator_data['ENTERPRISE VALUE (CR.)'][i]==0):

              flag=1
              break

            # print(indicator_data['ENTERPRISE VALUE (CR.)'][i] , "/" , indicator_data['EV/EBITDA (X)'][i],"=", round((indicator_data['ENTERPRISE VALUE (CR.)'][i]/indicator_data['EV/EBITDA (X)'][i]),2))
            ebitda_list.append(round(indicator_data['ENTERPRISE VALUE (CR.)'][i]/indicator_data['EV/EBITDA (X)'][i],2))
    if(flag==0):

      print()
      ebitda_list=ebitda_list[::-1]

      # print(ebitda_list)
      growth_ebitda=[]
      for i in range(len(ebitda_list)-1,0,-1):
        # print(ebitda_list[i-1],"-",ebitda_list[i],"=",round(ebitda_list[i-1]-ebitda_list[i],2), "   ",round((ebitda_list[i-1]-ebitda_list[i])/ebitda_list[i]*100,2))
        growth_ebitda.append(round((ebitda_list[i-1]-ebitda_list[i])/ebitda_list[i]*100,2))

      print()
      growth_ebitda=growth_ebitda[::-1]

      # print(growth_ebitda)
      print()
      grow=0
      for i in range(len(growth_ebitda)-1):
        grow=grow+growth_ebitda[i]

      growth=round(grow/3,2)
      # print("Growth for last three years:", growth)
      print()
      # print(ebitda_list[0])
      pred_ebitda=round(((100+growth)*ebitda_list[0])/100,2)

      # print("Predicted Ebitda:",pred_ebitda)


      print()
      forecasted_ev= round(pred_ebitda*indicator_data['EV/EBITDA (X)'][0],2)

      print()
      forecasted_ev=forecasted_ev-indicator_data['LONG TERM BORROWINGS'][0]
      forecasted_ev

      # print("Forecasted EV:",forecasted_ev)
      print()
      target_price=round(forecasted_ev/shareholding,2)
      # print("Target Price:", target_price)

      entry_price=round(target_price*0.75,2)
      # print("Good Buy Price:",entry_price)

    points=bonus+count_currentratio+count_debt+count_ebit+count_profitloss+count_rec+count_reserves+count_revenuefromop+count_roce+count_netcashflow+count_pe+count_freecash+count_pshares+count_revenuefromopqt+count_profitqt
    final_list=[]
    per_it="6.5%"
    industry="IT & Consulting"
    final_list.append(stock_name)
    
    final_list.append(cap)
    final_list.append(roce_ind)
    final_list.append(points)
    final_list.append(per_it)
    final_list.append(industry)

    return final_list

  table=[]
  url_list=[]
        
  url_list=[[["Tata Consultancy"],["https://www.moneycontrol.com/india/stockpricequote/computerssoftware/tataconsultancyservices/TCS"],["https://www.moneycontrol.com/financials/tataconsultancyservices/balance-sheetVI/TCS#TCS","https://www.moneycontrol.com/financials/tataconsultancyservices/profit-lossVI/TCS#TCS","https://www.moneycontrol.com/financials/tataconsultancyservices/ratiosVI/TCS#TCS","https://www.moneycontrol.com/financials/tataconsultancyservices/cash-flowVI/TCS#TCS","https://www.moneycontrol.com/financials/tataconsultancyservices/results/quarterly-results/TCS#TCS"]],
            [["Infosys Ltd"],["https://www.moneycontrol.com/india/stockpricequote/computerssoftware/infosys/IT"],["https://www.moneycontrol.com/financials/infosys/balance-sheetVI/IT#IT","https://www.moneycontrol.com/financials/infosys/profit-lossVI/IT#IT","https://www.moneycontrol.com/financials/infosys/cash-flowVI/IT#IT", "https://www.moneycontrol.com/financials/infosys/ratiosVI/IT#IT ",'https://www.moneycontrol.com/financials/infosys/results/quarterly-results/IT#IT']],
            [['WIPRO'],["https://www.moneycontrol.com/india/stockpricequote/computerssoftware/wipro/W"],['https://www.moneycontrol.com/financials/wipro/balance-sheetVI/W#W','https://www.moneycontrol.com/financials/wipro/cash-flowVI/W#W','https://www.moneycontrol.com/financials/wipro/profit-lossVI/W#W','https://www.moneycontrol.com/financials/wipro/ratiosVI/W#W','https://www.moneycontrol.com/financials/wipro/results/quarterly-results/W#W']],
            
            [["HCLTECH"],['https://www.moneycontrol.com/india/stockpricequote/computerssoftware/hcltechnologies/HCL02'],['https://www.moneycontrol.com/financials/hcltechnologies/balance-sheetVI/HCL02#HCL02','https://www.moneycontrol.com/financials/hcltechnologies/profit-lossVI/HCL02#HCL02','https://www.moneycontrol.com/financials/hcltechnologies/cash-flowVI/HCL02#HCL02','https://www.moneycontrol.com/financials/hcltechnologies/ratiosVI/HCL02#HCL02','https://www.moneycontrol.com/financials/hcltechnologies/results/quarterly-results/HCL02#HCL02']],
            
            [["TECHM"],['https://www.moneycontrol.com/india/stockpricequote/computerssoftware/techmahindra/TM4'],['https://www.moneycontrol.com/financials/techmahindra/ratiosVI/TM4#TM4','https://www.moneycontrol.com/financials/techmahindra/cash-flowVI/TM4#TM4','https://www.moneycontrol.com/financials/techmahindra/profit-lossVI/TM4#TM4','https://www.moneycontrol.com/financials/techmahindra/balance-sheetVI/TM4#TM4','https://www.moneycontrol.com/financials/techmahindra/results/quarterly-results/TM4#TM4']],
            [['Larsen & Toubro Infotech Ltd'],['https://www.moneycontrol.com/india/stockpricequote/computerssoftware/larsentoubroinfotech/LI12'],['https://www.moneycontrol.com/financials/larsentoubroinfotech/ratiosVI/LI12#LI12','https://www.moneycontrol.com/financials/larsentoubroinfotech/cash-flowVI/LI12#LI12','https://www.moneycontrol.com/financials/larsentoubroinfotech/profit-lossVI/LI12#LI12','https://www.moneycontrol.com/financials/larsentoubroinfotech/balance-sheetVI/LI12#LI12','https://www.moneycontrol.com/financials/larsentoubroinfotech/results/quarterly-results/LI12#LI12']]]
            
  # print(len(url_list))
  # print(len(url_list))

  for i in range(len(url_list)):
    list_input=[]
    for j in url_list[i]:
      list_input.append(j)
    stockname=list_input[0][0]
    url1=list_input[1][0]
    url2=list_input[2]
    print(stockname,url1,url2)
    final_list=itcon(stockname,url1,url2)
    table.append(final_list)
  df=pd.DataFrame(table,columns=['stock_name','cap','roce_ind','points','per_it','industry'])
  df.sort_values(by='points', ascending=False,inplace=True)
  stock=[]
  df_final=df[['stock_name','cap','roce_ind','per_it','industry']]
    
  stock= df_final[:2].values.tolist()
    
  portfolio.append(stock) 

  def pharma(stockname,url1,url2):


    stock_name=stockname
    url = url1

    # Make a GET request to fetch the raw HTML content
    html_content = requests.get(url).text

    # Parse HTML code for the entire site
    soup = BeautifulSoup(html_content, "lxml")
    # print(soup)

    mc = soup.find_all("div", attrs={"class": "oview_table"})
    # print("Number of tables on site: ",len(mc))

    data = dict()
    for tb in mc[:4]:
        body = tb.find_all("tr")
        for i in body:
            vals = i.find_all("td")
            title = vals[0].text.strip()
            try:
                value = float(vals[1].text.replace(',',''))
            except ValueError:
                value = vals[1].text.replace(',','')
            data[title] = value
    # print(data)



    excel_data=pd.read_csv(r"C:\Users\mohil\OneDrive\Desktop\STOCKS_new.csv")
    excel_data.drop(columns=['Name (largecap alpha.csv)', 'Ticker (largecap alpha.csv)'],inplace=True)
    # excel_data.head(10)

    avg_price=round((data['Open']+data['Previous Close'])/2,2)
    shareholding=round((data['Mkt Cap (Rs. Cr.)']/avg_price),2)
    shareholding

    parameters_dict = dict()
    def scrape_indicators(urls):
        for url in urls:
            html_content = requests.get(url).text

            # Parse HTML code for the entire site
            soup = BeautifulSoup(html_content, "lxml")
            stonks = soup.find_all("div", attrs={"id": "standalone-new"})

            body = stonks[0].find_all("tr")

            indicator_dict = dict()

            for record in body:
                indicator = record.find_all("td")[0].text.upper()
                temp_indicator_values = []
                try:
                    for table_data in (record.find_all('td')[1:-1]):
                        temp_indicator_values.append(
                            float(table_data.text.replace(',', '')))
                except ValueError:
                    continue
                indicator_dict[indicator] = temp_indicator_values

            parameters_dict.update(indicator_dict)

        yield(url, parameters_dict)


        
    urls=url2


    for request_url, indicator_data in scrape_indicators(urls):
        # print(request_url)
        # print(indicator_data)
        print()
        print()

    if(data['Mkt Cap (Rs. Cr.)']<20000.00 and data['Mkt Cap (Rs. Cr.)']>5000.00):
      cap="Mid Cap"
    elif (data['Mkt Cap (Rs. Cr.)']>20000.00):
      cap="Large Cap"
    else:
      cap="Small Cap"
    

    pepoints=0



    ##Indicator 1: Reserves & Surplus
    # print(indicator_data['RESERVES AND SURPLUS'])
    rands_list=[]
    count_reserves=0
    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,0,-1):
      if(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i]>0):
        rands_list.append(round(((indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i])/indicator_data['RESERVES AND SURPLUS'][i])*100,2))
        # print(indicator_data['RESERVES AND SURPLUS'][i])
        count_reserves=count_reserves+20
        pepoints+=1
        # print(indicator_data['RESERVES AND SURPLUS'][i-1] , "-" , indicator_data['RESERVES AND SURPLUS'][i],"=", round(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i],2))
      else:
        rands_list.append(round(((indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i])/indicator_data['RESERVES AND SURPLUS'][i])*100,2))
        # print(indicator_data['RESERVES AND SURPLUS'][i])
        count_reserves=count_reserves-20
        pepoints-=1
        # print(indicator_data['RESERVES AND SURPLUS'][i-1],"-",indicator_data['RESERVES AND SURPLUS'][i],"=", round(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i],2))

    rands_list=rands_list[::-1]

    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,-1,-1):
        if(indicator_data['RESERVES AND SURPLUS'][i]<0):
          count_reserves-=20
          pepoints-=1

    # print(count_reserves)
    # print(rands_list)

    ##Indicator 2: Revenue From Operations Gross
    count_revenuefromop=0
    revenue_list=[]
    # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])
    for i in range(len(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])-1,0,-1):
      if(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i]>0):
        revenue_list.append(round(((indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])/indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])*100,2))
        count_revenuefromop=count_revenuefromop+10
        # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1] , "-" , indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],"=", round(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],2))
      else:
        revenue_list.append(round(((indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])/indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])*100,2))
        count_revenuefromop=count_revenuefromop-10
        # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1],"-",indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],"=",round(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],2))

    revenue_list=revenue_list[::-1]

    for i in range(len(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])-1,-1,-1):
        if(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i]<0):
          count_revenuefromop-=15


    # print(count_revenuefromop)
    # print(revenue_list)





    ##Indicator 3: Profit/Loss for the period
    count_profitloss=0
    profit_list=[]
    # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'])
    for i in range(len(indicator_data['PROFIT/LOSS FOR THE PERIOD'])-1,0,-1):
      if(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i]>0):
        profit_list.append(round(((indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])/indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])*100,2))
        count_profitloss=count_profitloss+10
        # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1] , "-" , indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],"=", round(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],2))
      else:
        profit_list.append(round(((indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])/indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])*100,2))
        count_profitloss=count_profitloss-10
        # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1],"-",indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],"=",round(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],2))

    profit_list=profit_list[::-1]

    for i in range(len(indicator_data['PROFIT/LOSS FOR THE PERIOD'])-1,-1,-1):
        if(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i]<0):
          count_profitloss-=15

    # print(count_profitloss)
    # print(profit_list)

    # print(pepoints)

    ##Indicator 4: ROCE

    count_roce=0
    # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])
    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,0,-1):
      if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]>-1):
        count_roce+=10
        # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1] , "-" , indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],"=", round(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],2))
      else:
        count_roce-=10
        # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1],"-",indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],"=",round(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],2))

    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,-1,-1):
        if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]<10):
          count_roce-=15
          pepoints-=1
        else:
          if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]>10):
            count_roce+=15
            pepoints+=1


    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,-1,-1):
        if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]<0):
          count_roce-=25

    roce_ind=indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][0]


    # print(count_roce)

    # print(pepoints)

    ##Indicator 5: Inventory Turnover Ratio
    count_ito=0
    # print(indicator_data['INVENTORY TURNOVER RATIO (X)'])
    for i in range(len(indicator_data['INVENTORY TURNOVER RATIO (X)'])-1,0,-1):
      if(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i]>0):
        count_ito+=20
        pepoints+=1
        # print(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1] , "-" , indicator_data['INVENTORY TURNOVER RATIO (X)'][i],"=", round(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i],2))
      else:
        count_ito-=10
        pepoints-=1
        # print(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1],"-",indicator_data['INVENTORY TURNOVER RATIO (X)'][i],"=",round(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i],2))
    # print(count_ito)

    # pepoints

    ##Indicator 6: Reserves & Surplus/Equity Share Capital
    # print(indicator_data['RESERVES AND SURPLUS'])
    # print(indicator_data['TOTAL SHARE CAPITAL'])
    print()
    rsesc_list=[]
    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,-1,-1):
            # print(indicator_data['RESERVES AND SURPLUS'][i])
            # print(indicator_data['RESERVES AND SURPLUS'][i] , "/" , indicator_data['TOTAL SHARE CAPITAL'][i],"=", round((indicator_data['RESERVES AND SURPLUS'][i]/indicator_data['TOTAL SHARE CAPITAL'][i]),2))
            rsesc_list.append(round(indicator_data['RESERVES AND SURPLUS'][i]/indicator_data['TOTAL SHARE CAPITAL'][i],2))

    print()
    rsesc_list=rsesc_list[::-1]
    # print(rsesc_list)
    print()
    count_rec=0
    for i in range(len(rsesc_list)-1,0,-1):
      if(rsesc_list[i-1]-rsesc_list[i]>0):
        count_rec+=20
        pepoints+=1
        # print(rsesc_list[i-1] , "-" , rsesc_list[i],"=", round(rsesc_list[i-1]-rsesc_list[i],2))
      else:
        count_rec-=10
        pepoints-=1
        # print(rsesc_list[i-1],"-",rsesc_list[i],"=",round(rsesc_list[i-1]-rsesc_list[i],2))


    for i in range(len(rsesc_list)-1,-1,-1):
        if(rsesc_list[i]<10):
          count_rec-=15

    for i in range(len(rsesc_list)-1,-1,-1):
        if(rsesc_list[i]<0):
          count_rec-=20


    # print(rsesc_list)
    # print(count_rec)



    # pepoints





    ## Indicator 7: Trade Receivables in Current Assets
    # print(indicator_data['TOTAL CURRENT ASSETS'])
    # print(indicator_data['TRADE RECEIVABLES'])

    trade_list=[]
    bonus=0
    for i in range(len(indicator_data['TOTAL CURRENT ASSETS'])-1,-1,-1):
              # print(indicator_data['TOTAL CURRENT ASSETS'][i] , "/" , indicator_data['TRADE RECEIVABLES'][i],"=", round((indicator_data['TOTAL CURRENT ASSETS'][i]/indicator_data['TRADE RECEIVABLES'][i]),2))
              if(round((indicator_data['TOTAL CURRENT ASSETS'][i]/indicator_data['TRADE RECEIVABLES'][i]),2)<50.00):
                bonus+=10
              else:
                bonus-=5
    # print(bonus)

    # print(pepoints)

    ## Indicator 8: Earnings Before Interest Tax

    indicator_data['PBIT MARGIN (%)']
    count_ebit=0
    # print(indicator_data['PBIT MARGIN (%)'])
    for i in range(len(indicator_data['PBIT MARGIN (%)'])-1,0,-1):
      if(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i]>0):
        count_ebit+=10
        pepoints+=1
        # print(indicator_data['PBIT MARGIN (%)'][i-1] , "-" , indicator_data['PBIT MARGIN (%)'][i],"=", round(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i],2))
      else:
        count_ebit-=5
        pepoints+=1
        # print(indicator_data['PBIT MARGIN (%)'][i-1],"-",indicator_data['PBIT MARGIN (%)'][i],"=",round(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i],2))

    for i in range(len(indicator_data['PBIT MARGIN (%)'])-1,-1,-1):
        if(indicator_data['PBIT MARGIN (%)'][i]<0):
          count_ebit-=20


    # print(count_ebit)

    # print(pepoints)

    ## Indicator 9: Debt To Equity Ratio

    count_debt=0
    # print(indicator_data["TOTAL DEBT/EQUITY (X)"])

    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,0,-1):
      if(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i]>0):
        count_debt+=10
        # print(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1] , "-" , indicator_data['TOTAL DEBT/EQUITY (X)'][i],"=", round(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i],2))
      elif (indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i]==0):
            count_debt+=10
      else:
        count_debt-=5
        # print(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1],"-",indicator_data['TOTAL DEBT/EQUITY (X)'][i],"=",round(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i],2))
      
    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,-1,-1):
        if(indicator_data['TOTAL DEBT/EQUITY (X)'][i]>2):
          count_debt-=15
          pepoints-=1
        else:
          count_debt+=15
          pepoints+=1

    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,-1,-1):
        if(indicator_data['TOTAL DEBT/EQUITY (X)'][i]<0):
          count_debt-=20


    # print(count_debt)

    # pepoints

    ## Indicator 10: Current Ratio
    indicator_data['CURRENT RATIO (X)']

    count_currentratio=0
    # print(indicator_data["CURRENT RATIO (X)"])

    for i in range(len(indicator_data['CURRENT RATIO (X)'])-1,0,-1):
      if(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i]>0):
        count_currentratio+=10
        # print(indicator_data['CURRENT RATIO (X)'][i-1] , "-" , indicator_data['CURRENT RATIO (X)'][i],"=", round(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i],2))
      elif ((indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i])==0):
            count_currentratio+=10
      else:
        count_currentratio-=5
        # print(indicator_data['CURRENT RATIO (X)'][i-1],"-",indicator_data['CURRENT RATIO (X)'][i],"=",round(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i],2))

    for i in range(len(indicator_data['CURRENT RATIO (X)'])-1,-1,-1):
        if(indicator_data['CURRENT RATIO (X)'][i]<2):
          # print(indicator_data['CURRENT RATIO (X)'][i])
          count_currentratio-=10
          pepoints=pepoints-0.5
        elif (indicator_data['CURRENT RATIO (X)'][i]<1):
          count_currentratio-=20
          pepoints=pepoints-1
        else:
          count_currentratio+=10
          pepoints+=1


    # print(count_currentratio)

    # pepoints

    ##Indicator 11: Net Cashflow From Operating Activities
    count_netcashflow=0
    cashflow_list=[]
    # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])
    for i in range(len(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])-1,0,-1):
      if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]>0):
        cashflow_list.append(round(((indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])/indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])*100,2))
        count_netcashflow=count_netcashflow+10
        pepoints+=1
        # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1] , "-" , indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],"=", round(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],2))
      else:
        cashflow_list.append(round(((indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])/indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])*100,2))
        count_netcashflow=count_netcashflow-10
        pepoints-=1
        # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1],"-",indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],"=",round(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],2))

    cashflow_list=cashflow_list[::-1]

    for i in range(len(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])-1,-1,-1):
        if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]<0):
          count_netcashflow-=15

    # print(count_netcashflow)
    # print(cashflow_list)

    ##Indicator 12: Free cash Flow
    stock_position=None
    stock_data=excel_data.values.tolist()
    stock_data
    for i in stock_data:
      for j in i:
        j=str(j)
        if(stock_name in j):
          # print(j.index(i))
          stock_position=stock_data.index(i)
          # print(j)
          break
          
    # print(stock_position)

    freecash_list=[]
    for i in range(5):
      freecash_list.append(stock_data[stock_position][i])
    # print(freecash_list)

    count_freecash=0
    for i in range(1,len(freecash_list)):
      if(freecash_list[i]-freecash_list[i-1]>0):
        # print(freecash_list[i],"-",freecash_list[i-1],"=",freecash_list[i]-freecash_list[i-1])
        count_freecash+=20
        pepoints+=1
      else:
        # print(freecash_list[i],"-",freecash_list[i-1],"=",freecash_list[i]-freecash_list[i-1])
        count_freecash-=10
        pepoints-=1

    for i in range(0,len(freecash_list)):
      if(freecash_list[i]<0):
        count_freecash-=20
        pepoints-=1

    # print(count_freecash)

    ##Indicator 13: Pledged shares
    for i in stock_data:
      for j in i:
        j=str(j)
        if(stock_name in j):
          # print(j.index(i))
          stock_position=stock_data.index(i)
          # print(j)
          break

    pledged_shares=stock_data[stock_position][15]
    # print(pledged_shares)
    stock_name=stock_data[stock_position][5]
    count_pshares=1
    if(pledged_shares>0):
      pepoints-=1
      count_pshares=count_pshares*-10
    else:
      pepoints+=1
      count_pshares=count_pshares*10

    ##Entities: Alpha & Beta
    alpha=round(stock_data[stock_position][9],2)
    # print("Alpha",alpha)
    beta=round(stock_data[stock_position][10],2)
    # print("Beta",beta)
    divy=data['Dividend Yield']
    # print("Dividend Yield",divy)

    cagr=stock_data[stock_position][8]
    # print("CAGR:", cagr)

    # pepoints

    ##Indicator 14: PE Ratio
    st_pe=data['TTM PE']
    se_pe=data['Sector PE']
    # print("Stock PE", st_pe)
    # print("Sector PE",se_pe)
    count_pe=1
    if(data['TTM PE']=="--"):
        count_pe=pepoints*12
    elif(data['TTM PE']<data['Sector PE']):
      count_pe=pepoints*15
    else:
      count_pe=pepoints*10

    # print(count_pe)



    #Predicting Target Price 
    flag=0
    target_price=None
    entry_price=None
    # int(indicator_data['ENTERPRISE VALUE (CR.)'])
    # print(indicator_data['EV/EBITDA (X)'])
    print()

    ebitda_list=[]
    for i in range(len(indicator_data['ENTERPRISE VALUE (CR.)'])-2,-1,-1):
            if(indicator_data['ENTERPRISE VALUE (CR.)'][i]==0):

              flag=1
              break

            # print(indicator_data['ENTERPRISE VALUE (CR.)'][i] , "/" , indicator_data['EV/EBITDA (X)'][i],"=", round((indicator_data['ENTERPRISE VALUE (CR.)'][i]/indicator_data['EV/EBITDA (X)'][i]),2))
            ebitda_list.append(round(indicator_data['ENTERPRISE VALUE (CR.)'][i]/indicator_data['EV/EBITDA (X)'][i],2))
    if(flag==0):

      print()
      ebitda_list=ebitda_list[::-1]

      # print(ebitda_list)
      growth_ebitda=[]
      for i in range(len(ebitda_list)-1,0,-1):
        # print(ebitda_list[i-1],"-",ebitda_list[i],"=",round(ebitda_list[i-1]-ebitda_list[i],2), "   ",round((ebitda_list[i-1]-ebitda_list[i])/ebitda_list[i]*100,2))
        growth_ebitda.append(round((ebitda_list[i-1]-ebitda_list[i])/ebitda_list[i]*100,2))

      print()
      growth_ebitda=growth_ebitda[::-1]

      # print(growth_ebitda)
      print()
      grow=0
      for i in range(len(growth_ebitda)-1):
        grow=grow+growth_ebitda[i]

      growth=round(grow/3,2)
      # print("Growth for last three years:", growth)
      print()
      # print(ebitda_list[0])
      pred_ebitda=round(((100+growth)*ebitda_list[0])/100,2)

      # print("Predicted Ebitda:",pred_ebitda)


      print()
      forecasted_ev= round(pred_ebitda*indicator_data['EV/EBITDA (X)'][0],2)

      print()
      forecasted_ev=forecasted_ev-indicator_data['LONG TERM BORROWINGS'][0]
      forecasted_ev

      # print("Forecasted EV:",forecasted_ev)
      print()
      target_price=round(forecasted_ev/shareholding,2)
      # print("Target Price:", target_price)

      entry_price=round(target_price*0.75,2)
      # print("Good Buy Price:",entry_price)

    points=bonus+count_currentratio+count_debt+count_ebit+count_ito+count_profitloss+count_rec+count_reserves+count_revenuefromop+count_roce+count_netcashflow+count_pe+count_freecash+count_pshares
    final_list=[]
    per_pharma="6%"
    industry="Pharmaceuticals"
    final_list.append(stock_name)
    
    final_list.append(cap)
    final_list.append(roce_ind)
    final_list.append(points)
    final_list.append(per_pharma)
    final_list.append(industry)
    
    return final_list


  table=[]
  url_list=[]
          
  url_list=[[["SUNPHARMA"],["https://www.moneycontrol.com/india/stockpricequote/pharmaceuticals/sunpharmaceuticalindustries/SPI"],["https://www.moneycontrol.com/financials/sunpharmaceuticalindustries/balance-sheetVI/SPI#SPI","https://www.moneycontrol.com/financials/sunpharmaceuticalindustries/ratiosVI/SPI#SPI","https://www.moneycontrol.com/financials/sunpharmaceuticalindustries/cash-flowVI/SPI#SPI","https://www.moneycontrol.com/financials/sunpharmaceuticalindustries/profit-lossVI/SPI#SPI"]],
            [["DRREDDY"],["https://www.moneycontrol.com/india/stockpricequote/pharmaceuticals/drreddyslaboratories/DRL"],["https://www.moneycontrol.com/financials/drreddyslaboratories/balance-sheetVI/DRL#DRL","https://www.moneycontrol.com/financials/drreddyslaboratories/ratiosVI/DRL#DRL","https://www.moneycontrol.com/financials/drreddyslaboratories/cash-flowVI/DRL#DRL", " https://www.moneycontrol.com/financials/drreddyslaboratories/profit-lossVI/DRL#DRL"]],
            [['CIPLA'],["https://www.moneycontrol.com/india/stockpricequote/pharmaceuticals/cipla/C"],['https://www.moneycontrol.com/financials/cipla/balance-sheetVI/C#C','https://www.moneycontrol.com/financials/cipla/ratiosVI/C#C','https://www.moneycontrol.com/financials/cipla/profit-lossVI/C#C','https://www.moneycontrol.com/financials/cipla/cash-flowVI/C#C']],
            
            [["GLAND"],['https://www.moneycontrol.com/india/stockpricequote/pharmaceuticalsdrugs/glandpharma/GP14'],['https://www.moneycontrol.com/financials/glandpharma/ratiosVI/GP14#GP14','https://www.moneycontrol.com/financials/glandpharma/cash-flowVI/GP14#GP14','https://www.moneycontrol.com/financials/glandpharma/profit-lossVI/GP14#GP14','https://www.moneycontrol.com/financials/glandpharma/balance-sheetVI/GP14#GP14']],
            
            [["CADILAHC"],['https://www.moneycontrol.com/india/stockpricequote/pharmaceuticals/cadilahealthcare/CHC'],['https://www.moneycontrol.com/financials/cadilahealthcare/ratiosVI/CHC#CHC','https://www.moneycontrol.com/financials/cadilahealthcare/cash-flowVI/CHC#CHC','https://www.moneycontrol.com/financials/cadilahealthcare/profit-lossVI/CHC#CHC','https://www.moneycontrol.com/financials/cadilahealthcare/balance-sheetVI/CHC#CHC']],
            [['TORNTPHARM'],['https://www.moneycontrol.com/india/stockpricequote/pharmaceuticals/torrentpharmaceuticals/TP06'],['https://www.moneycontrol.com/financials/torrentpharmaceuticals/ratiosVI/TP06#TP06','https://www.moneycontrol.com/financials/torrentpharmaceuticals/cash-flowVI/TP06#TP06','https://www.moneycontrol.com/financials/torrentpharmaceuticals/profit-lossVI/TP06#TP06','https://www.moneycontrol.com/financials/torrentpharmaceuticals/balance-sheetVI/TP06#TP06']],
            [['IPCALAB'],['https://www.moneycontrol.com/india/stockpricequote/pharmaceuticals/ipcalaboratories/IL'],['https://www.moneycontrol.com/financials/ipcalaboratories/balance-sheetVI/IL#IL','https://www.moneycontrol.com/financials/ipcalaboratories/profit-lossVI/IL#IL','https://www.moneycontrol.com/financials/ipcalaboratories/cash-flowVI/IL#IL','https://www.moneycontrol.com/financials/ipcalaboratories/ratiosVI/IL#IL']],
            [['ERIS'],['https://www.moneycontrol.com/india/stockpricequote/pharmaceuticalsdrugs/erislifesciences/EL01'],['https://www.moneycontrol.com/financials/erislifesciences/balance-sheetVI/EL01#EL01','https://www.moneycontrol.com/financials/erislifesciences/profit-lossVI/EL01#EL01','https://www.moneycontrol.com/financials/erislifesciences/cash-flowVI/EL01#EL01','https://www.moneycontrol.com/financials/erislifesciences/ratiosVI/EL01#EL01']],

            [['ALKEM'],['https://www.moneycontrol.com/india/stockpricequote/pharmaceuticals/alkemlaboratories/'],['https://www.moneycontrol.com/financials/alkemlaboratories/ratiosVI/AL05#AL05','https://www.moneycontrol.com/financials/alkemlaboratories/cash-flowVI/AL05#AL05','https://www.moneycontrol.com/financials/alkemlaboratories/profit-lossVI/AL05#AL05','https://www.moneycontrol.com/financials/alkemlaboratories/balance-sheetVI/AL05#AL05']]]


  for i in range(len(url_list)):
    list_input=[]
    for j in url_list[i]:
      list_input.append(j)
    stockname=list_input[0][0]
    url1=list_input[1][0]
    url2=list_input[2]
    print(stockname,url1,url2)
    final_list=pharma(stockname,url1,url2)
    table.append(final_list)
  df=pd.DataFrame(table,columns=['stock_name','cap','roce_ind','points','per_pharma','industry'])
  df.sort_values(by='points', ascending=False,inplace=True)
  stock=[]

  df_final=df[['stock_name','cap','roce_ind','per_pharma','industry']]
    
  stock= df_final[:2].values.tolist()
    
  portfolio.append(stock) 


  def energy(stockname,url1,url2):


    stock_name=stockname
    url = url1

    # Make a GET request to fetch the raw HTML content
    html_content = requests.get(url).text

    # Parse HTML code for the entire site
    soup = BeautifulSoup(html_content, "lxml")
    # print(soup)

    mc = soup.find_all("div", attrs={"class": "oview_table"})
    # print("Number of tables on site: ",len(mc))

    data = dict()
    for tb in mc[:4]:
        body = tb.find_all("tr")
        for i in body:
            vals = i.find_all("td")
            title = vals[0].text.strip()
            try:
                value = float(vals[1].text.replace(',',''))
            except ValueError:
                value = vals[1].text.replace(',','')
            data[title] = value
    # print(data)



    excel_data=pd.read_csv(r"C:\Users\mohil\OneDrive\Desktop\STOCKS_new.csv")
    excel_data.drop(columns=['Name (largecap alpha.csv)', 'Ticker (largecap alpha.csv)'],inplace=True)
    # excel_data.head(10)

    avg_price=round((data['Open']+data['Previous Close'])/2,2)
    shareholding=round((data['Mkt Cap (Rs. Cr.)']/avg_price),2)
    shareholding

    parameters_dict = dict()
    def scrape_indicators(urls):
        for url in urls:
            html_content = requests.get(url).text

            # Parse HTML code for the entire site
            soup = BeautifulSoup(html_content, "lxml")
            stonks = soup.find_all("div", attrs={"id": "standalone-new"})

            body = stonks[0].find_all("tr")

            indicator_dict = dict()

            for record in body:
                indicator = record.find_all("td")[0].text.upper()
                temp_indicator_values = []
                try:
                    for table_data in (record.find_all('td')[1:-1]):
                        temp_indicator_values.append(
                            float(table_data.text.replace(',', '')))
                except ValueError:
                    continue
                indicator_dict[indicator] = temp_indicator_values

            parameters_dict.update(indicator_dict)

        yield(url, parameters_dict)


        
    urls=url2


    for request_url, indicator_data in scrape_indicators(urls):
        # print(request_url)
        # print(indicator_data)
        print()
        print()

    if(data['Mkt Cap (Rs. Cr.)']<20000.00 and data['Mkt Cap (Rs. Cr.)']>5000.00):
      cap="Mid Cap"
    elif (data['Mkt Cap (Rs. Cr.)']>20000.00):
      cap="Large Cap"
    else:
      cap="Small Cap"
    

    pepoints=0



    ##Indicator 1: Reserves & Surplus
    # print(indicator_data['RESERVES AND SURPLUS'])
    rands_list=[]
    count_reserves=0
    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,0,-1):
      if(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i]>0):
        rands_list.append(round(((indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i])/indicator_data['RESERVES AND SURPLUS'][i])*100,2))
        # print(indicator_data['RESERVES AND SURPLUS'][i])
        count_reserves=count_reserves+20
        pepoints+=1
        # print(indicator_data['RESERVES AND SURPLUS'][i-1] , "-" , indicator_data['RESERVES AND SURPLUS'][i],"=", round(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i],2))
      else:
        rands_list.append(round(((indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i])/indicator_data['RESERVES AND SURPLUS'][i])*100,2))
        # print(indicator_data['RESERVES AND SURPLUS'][i])
        count_reserves=count_reserves-20
        pepoints-=1
        # print(indicator_data['RESERVES AND SURPLUS'][i-1],"-",indicator_data['RESERVES AND SURPLUS'][i],"=", round(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i],2))

    rands_list=rands_list[::-1]

    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,-1,-1):
        if(indicator_data['RESERVES AND SURPLUS'][i]<0):
          count_reserves-=20
          pepoints-=1

    # print(count_reserves)
    # print(rands_list)

    ##Indicator 2: Revenue From Operations Gross
    count_revenuefromop=0
    revenue_list=[]
    # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])
    for i in range(len(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])-1,0,-1):
      if(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i]>0):
        revenue_list.append(round(((indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])/indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])*100,2))
        count_revenuefromop=count_revenuefromop+10
        # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1] , "-" , indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],"=", round(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],2))
      else:
        revenue_list.append(round(((indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])/indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i])*100,2))
        count_revenuefromop=count_revenuefromop-10
        # print(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1],"-",indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],"=",round(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i-1]-indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i],2))

    revenue_list=revenue_list[::-1]

    for i in range(len(indicator_data['REVENUE FROM OPERATIONS [GROSS]'])-1,-1,-1):
        if(indicator_data['REVENUE FROM OPERATIONS [GROSS]'][i]<0):
          count_revenuefromop-=15


    # print(count_revenuefromop)
    # print(revenue_list)





    ##Indicator 3: Profit/Loss for the period
    count_profitloss=0
    profit_list=[]
    # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'])
    for i in range(len(indicator_data['PROFIT/LOSS FOR THE PERIOD'])-1,0,-1):
      if(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i]>0):
        profit_list.append(round(((indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])/indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])*100,2))
        count_profitloss=count_profitloss+10
        # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1] , "-" , indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],"=", round(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],2))
      else:
        profit_list.append(round(((indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])/indicator_data['PROFIT/LOSS FOR THE PERIOD'][i])*100,2))
        count_profitloss=count_profitloss-10
        # print(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1],"-",indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],"=",round(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i-1]-indicator_data['PROFIT/LOSS FOR THE PERIOD'][i],2))

    profit_list=profit_list[::-1]

    for i in range(len(indicator_data['PROFIT/LOSS FOR THE PERIOD'])-1,-1,-1):
        if(indicator_data['PROFIT/LOSS FOR THE PERIOD'][i]<0):
          count_profitloss-=15

    # print(count_profitloss)
    # print(profit_list)

    # print(pepoints)

    ##Indicator 4: ROCE

    count_roce=0
    # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])
    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,0,-1):
      if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]>-1):
        count_roce+=10
        # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1] , "-" , indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],"=", round(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],2))
      else:
        count_roce-=10
        # print(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1],"-",indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],"=",round(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i-1]-indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i],2))

    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,-1,-1):
        if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]<10):
          count_roce-=15
          pepoints-=1
        else:
          if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]>10):
            count_roce+=15
            pepoints+=1


    for i in range(len(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'])-1,-1,-1):
        if(indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][i]<0):
          count_roce-=25


    roce_ind=indicator_data['RETURN ON CAPITAL EMPLOYED (%)'][0]

    # print(count_roce)

    # print(pepoints)

    ##Indicator 5: Inventory Turnover Ratio
    count_ito=0
    # print(indicator_data['INVENTORY TURNOVER RATIO (X)'])
    for i in range(len(indicator_data['INVENTORY TURNOVER RATIO (X)'])-1,0,-1):
      if(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i]>0):
        count_ito+=20
        pepoints+=1
        # print(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1] , "-" , indicator_data['INVENTORY TURNOVER RATIO (X)'][i],"=", round(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i],2))
      else:
        count_ito-=10
        pepoints-=1
        # print(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1],"-",indicator_data['INVENTORY TURNOVER RATIO (X)'][i],"=",round(indicator_data['INVENTORY TURNOVER RATIO (X)'][i-1]-indicator_data['INVENTORY TURNOVER RATIO (X)'][i],2))
    # print(count_ito)

    # pepoints

    ##Indicator 6: Reserves & Surplus/Equity Share Capital
    # print(indicator_data['RESERVES AND SURPLUS'])
    # print(indicator_data['TOTAL SHARE CAPITAL'])
    print()
    rsesc_list=[]
    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,-1,-1):
            # print(indicator_data['RESERVES AND SURPLUS'][i])
            # print(indicator_data['RESERVES AND SURPLUS'][i] , "/" , indicator_data['TOTAL SHARE CAPITAL'][i],"=", round((indicator_data['RESERVES AND SURPLUS'][i]/indicator_data['TOTAL SHARE CAPITAL'][i]),2))
            rsesc_list.append(round(indicator_data['RESERVES AND SURPLUS'][i]/indicator_data['TOTAL SHARE CAPITAL'][i],2))

    print()
    rsesc_list=rsesc_list[::-1]
    # print(rsesc_list)
    print()
    count_rec=0
    for i in range(len(rsesc_list)-1,0,-1):
      if(rsesc_list[i-1]-rsesc_list[i]>0):
        count_rec+=20
        pepoints+=1
        # print(rsesc_list[i-1] , "-" , rsesc_list[i],"=", round(rsesc_list[i-1]-rsesc_list[i],2))
      else:
        count_rec-=10
        pepoints-=1
        # print(rsesc_list[i-1],"-",rsesc_list[i],"=",round(rsesc_list[i-1]-rsesc_list[i],2))


    for i in range(len(rsesc_list)-1,-1,-1):
        if(rsesc_list[i]<10):
          count_rec-=15

    for i in range(len(rsesc_list)-1,-1,-1):
        if(rsesc_list[i]<0):
          count_rec-=20



    # print(rsesc_list)
    # print(count_rec)



    # pepoints





    ## Indicator 7: Trade Receivables in Current Assets
    # print(indicator_data['TOTAL CURRENT ASSETS'])
    # print(indicator_data['TRADE RECEIVABLES'])

    trade_list=[]
    bonus=0
    
    for i in range(len(indicator_data['TOTAL CURRENT ASSETS'])-1,-1,-1):
              # print(indicator_data['TOTAL CURRENT ASSETS'][i] , "/" , indicator_data['TRADE RECEIVABLES'][i],"=", round((indicator_data['TOTAL CURRENT ASSETS'][i]/indicator_data['TRADE RECEIVABLES'][i]),2))
              if(indicator_data['TRADE RECEIVABLES'][i]==0):
                indicator_data['TRADE RECEIVABLES'][i]=0.1
              
              if(round((indicator_data['TOTAL CURRENT ASSETS'][i]/indicator_data['TRADE RECEIVABLES'][i]),2)<50.00):
                bonus+=10
              else:
                bonus-=5
    # print(bonus)

    # print(pepoints)

    ## Indicator 8: Earnings Before Interest Tax

    indicator_data['PBIT MARGIN (%)']
    count_ebit=0
    # print(indicator_data['PBIT MARGIN (%)'])
    for i in range(len(indicator_data['PBIT MARGIN (%)'])-1,0,-1):
      if(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i]>0):
        count_ebit+=10
        pepoints+=1
        # print(indicator_data['PBIT MARGIN (%)'][i-1] , "-" , indicator_data['PBIT MARGIN (%)'][i],"=", round(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i],2))
      else:
        count_ebit-=5
        pepoints+=1
        # print(indicator_data['PBIT MARGIN (%)'][i-1],"-",indicator_data['PBIT MARGIN (%)'][i],"=",round(indicator_data['PBIT MARGIN (%)'][i-1]-indicator_data['PBIT MARGIN (%)'][i],2))

    for i in range(len(indicator_data['PBIT MARGIN (%)'])-1,-1,-1):
        if(indicator_data['PBIT MARGIN (%)'][i]<0):
          count_ebit-=20


    # print(count_ebit)

    # print(pepoints)

    ## Indicator 9: Debt To Equity Ratio

    count_debt=0
    # print(indicator_data["TOTAL DEBT/EQUITY (X)"])

    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,0,-1):
      if(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i]>0):
        count_debt+=10
        # print(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1] , "-" , indicator_data['TOTAL DEBT/EQUITY (X)'][i],"=", round(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i],2))
      elif (indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i]==0):
            count_debt+=10
      else:
        count_debt-=5
        # print(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1],"-",indicator_data['TOTAL DEBT/EQUITY (X)'][i],"=",round(indicator_data['TOTAL DEBT/EQUITY (X)'][i-1]-indicator_data['TOTAL DEBT/EQUITY (X)'][i],2))
      
    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,-1,-1):
        if(indicator_data['TOTAL DEBT/EQUITY (X)'][i]>2):
          count_debt-=15
          pepoints-=1
        else:
          count_debt+=15
          pepoints+=1

    for i in range(len(indicator_data['TOTAL DEBT/EQUITY (X)'])-1,-1,-1):
        if(indicator_data['TOTAL DEBT/EQUITY (X)'][i]<0):
          count_debt-=20


    # print(count_debt)

    # pepoints

    ## Indicator 10: Current Ratio
    indicator_data['CURRENT RATIO (X)']

    count_currentratio=0
    # print(indicator_data["CURRENT RATIO (X)"])

    for i in range(len(indicator_data['CURRENT RATIO (X)'])-1,0,-1):
      if(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i]>0):
        count_currentratio+=10
        # print(indicator_data['CURRENT RATIO (X)'][i-1] , "-" , indicator_data['CURRENT RATIO (X)'][i],"=", round(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i],2))
      elif ((indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i])==0):
            count_currentratio+=10
      else:
        count_currentratio-=5
        # print(indicator_data['CURRENT RATIO (X)'][i-1],"-",indicator_data['CURRENT RATIO (X)'][i],"=",round(indicator_data['CURRENT RATIO (X)'][i-1]-indicator_data['CURRENT RATIO (X)'][i],2))

    for i in range(len(indicator_data['CURRENT RATIO (X)'])-1,-1,-1):
        if(indicator_data['CURRENT RATIO (X)'][i]<2):
          # print(indicator_data['CURRENT RATIO (X)'][i])
          count_currentratio-=10
          pepoints=pepoints-0.5
        elif (indicator_data['CURRENT RATIO (X)'][i]<1):
          count_currentratio-=20
          pepoints=pepoints-1
        else:
          count_currentratio+=10
          pepoints+=1


    # print(count_currentratio)

    # pepoints

    ##Indicator 11: Net Cashflow From Operating Activities
    count_netcashflow=0
    cashflow_list=[]
    # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])
    for i in range(len(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])-1,0,-1):
      if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]==0):
        indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]=indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]
      if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]>0):
        cashflow_list.append(round(((indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])/indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])*100,2))
        count_netcashflow=count_netcashflow+10
        pepoints+=1
        # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1] , "-" , indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],"=", round(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],2))
      else:
        cashflow_list.append(round(((indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])/indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i])*100,2))
        count_netcashflow=count_netcashflow-10
        pepoints-=1
        # print(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1],"-",indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],"=",round(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i-1]-indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i],2))

    cashflow_list=cashflow_list[::-1]

    for i in range(len(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'])-1,-1,-1):
        if(indicator_data['NET CASHFLOW FROM OPERATING ACTIVITIES'][i]<0):
          count_netcashflow-=15

    # print(count_netcashflow)
    # print(cashflow_list)

    ##Indicator 12: Free cash Flow
    stock_position=None
    stock_data=excel_data.values.tolist()
    stock_data
    for i in stock_data:
      for j in i:
        j=str(j)
        if(stock_name in j):
          # print(j.index(i))
          stock_position=stock_data.index(i)
          # print(j)
          break
          
    # print(stock_position)

    freecash_list=[]
    for i in range(5):
      freecash_list.append(stock_data[stock_position][i])
    # print(freecash_list)

    count_freecash=0
    for i in range(1,len(freecash_list)):
      if(freecash_list[i]-freecash_list[i-1]>0):
        # print(freecash_list[i],"-",freecash_list[i-1],"=",freecash_list[i]-freecash_list[i-1])
        count_freecash+=20
        pepoints+=1
      else:
        # print(freecash_list[i],"-",freecash_list[i-1],"=",freecash_list[i]-freecash_list[i-1])
        count_freecash-=10
        pepoints-=1

    for i in range(0,len(freecash_list)):
      if(freecash_list[i]<0):
        count_freecash-=20
        pepoints-=1

    # print(count_freecash)

    ##Indicator 13: Pledged shares
    for i in stock_data:
      for j in i:
        j=str(j)
        if(stock_name in j):
          # print(j.index(i))
          stock_position=stock_data.index(i)
          # print(j)
          break

    pledged_shares=stock_data[stock_position][15]
    # print(pledged_shares)
    stock_name=stock_data[stock_position][5]
    count_pshares=1
    if(pledged_shares>0):
      pepoints-=1
      count_pshares=count_pshares*-10
    else:
      pepoints+=1
      count_pshares=count_pshares*10


    ##Entities: Alpha & Beta
    alpha=round(stock_data[stock_position][9],2)
    # print("Alpha",alpha)
    beta=round(stock_data[stock_position][10],2)
    # print("Beta",beta)
    divy=data['Dividend Yield']
    # print("Dividend Yield",divy)

    cagr=stock_data[stock_position][8]
    # print("CAGR:", cagr)

    # pepoints

    ##Indicator 14: PE Ratio
    st_pe=data['TTM PE']
    se_pe=data['Sector PE']
    # print("Stock PE", st_pe)
    # print("Sector PE",se_pe)
    count_pe=1
    if(data['TTM PE']=="--"):
        count_pe=pepoints*12
    elif(data['TTM PE']<data['Sector PE']):
      count_pe=pepoints*15
    else:
      count_pe=pepoints*10

    # print(count_pe)



    #Predicting Target Price 
    flag=0
    target_price=None
    entry_price=None
    # int(indicator_data['ENTERPRISE VALUE (CR.)'])
    # print(indicator_data['EV/EBITDA (X)'])
    print()

    ebitda_list=[]
    for i in range(len(indicator_data['ENTERPRISE VALUE (CR.)'])-3,-1,-1):
            if(indicator_data['ENTERPRISE VALUE (CR.)'][i]==0):

              flag=1
              break

            # print(indicator_data['ENTERPRISE VALUE (CR.)'][i] , "/" , indicator_data['EV/EBITDA (X)'][i],"=", round((indicator_data['ENTERPRISE VALUE (CR.)'][i]/indicator_data['EV/EBITDA (X)'][i]),2))
            ebitda_list.append(round(indicator_data['ENTERPRISE VALUE (CR.)'][i]/indicator_data['EV/EBITDA (X)'][i],2))
    if(flag==0):

      print()
      ebitda_list=ebitda_list[::-1]

      # print(ebitda_list)
      growth_ebitda=[]
      for i in range(len(ebitda_list)-1,0,-1):
        # print(ebitda_list[i-1],"-",ebitda_list[i],"=",round(ebitda_list[i-1]-ebitda_list[i],2), "   ",round((ebitda_list[i-1]-ebitda_list[i])/ebitda_list[i]*100,2))
        growth_ebitda.append(round((ebitda_list[i-1]-ebitda_list[i])/ebitda_list[i]*100,2))

      print()
      growth_ebitda=growth_ebitda[::-1]

      # print(growth_ebitda)
      print()
      grow=0
      for i in range(len(growth_ebitda)-1):
        grow=grow+growth_ebitda[i]

      growth=round(grow/3,2)
      # print("Growth for last three years:", growth)
      print()
      # print(ebitda_list[0])
      pred_ebitda=round(((100+growth)*ebitda_list[0])/100,2)

      # print("Predicted Ebitda:",pred_ebitda)


      print()
      forecasted_ev= round(pred_ebitda*indicator_data['EV/EBITDA (X)'][0],2)

      print()
      forecasted_ev=forecasted_ev-indicator_data['LONG TERM BORROWINGS'][0]
      forecasted_ev

      # print("Forecasted EV:",forecasted_ev)
      print()
      target_price=round(forecasted_ev/shareholding,2)
      # print("Target Price:", target_price)

      entry_price=round(target_price*0.75,2)
      # print("Good Buy Price:",entry_price)

    points=bonus+count_currentratio+count_debt+count_ebit+count_ito+count_profitloss+count_rec+count_reserves+count_revenuefromop+count_roce+count_netcashflow+count_pe+count_freecash+count_pshares
    final_list=[]
    per_renew="6%"
    industry="Renewable Energy"



    final_list.append(stock_name)
    
    final_list.append(cap)
    final_list.append(roce_ind)
    final_list.append(points)
    final_list.append(per_renew)
    final_list.append(industry)
    
    return final_list

  table=[]
  url_list=[]
        

  url_list=[[["ADANIGREEN"],['https://www.moneycontrol.com/india/stockpricequote/powergenerationdistribution/adanigreenenergylimited/ADANI54145'],['https://www.moneycontrol.com/financials/adanigreenenergylimited/balance-sheetVI/ADANI54145#ADANI54145','https://www.moneycontrol.com/financials/adanigreenenergylimited/profit-lossVI/ADANI54145#ADANI54145','https://www.moneycontrol.com/financials/adanigreenenergylimited/cash-flowVI/ADANI54145#ADANI54145','https://www.moneycontrol.com/financials/adanigreenenergylimited/ratiosVI/ADANI54145#ADANI54145']],
  [["NHPC"],['https://www.moneycontrol.com/india/stockpricequote/powergenerationdistribution/nhpc/N07'],['https://www.moneycontrol.com/financials/nhpc/balance-sheetVI/N07#N07','https://www.moneycontrol.com/financials/nhpc/profit-lossVI/N07#N07','https://www.moneycontrol.com/financials/nhpc/cash-flowVI/N07#N07','https://www.moneycontrol.com/financials/nhpc/ratiosVI/N07#N07']],
  [["SJVN"],['https://www.moneycontrol.com/india/stockpricequote/powergenerationdistribution/sjvn/S11'],['https://www.moneycontrol.com/financials/sjvn/balance-sheetVI/S11#S11','https://www.moneycontrol.com/financials/sjvn/profit-lossVI/S11#S11','https://www.moneycontrol.com/financials/sjvn/cash-flowVI/S11#S11','https://www.moneycontrol.com/financials/sjvn/ratiosVI/S11#S11']],
  [["JPPOWER"],['https://www.moneycontrol.com/india/stockpricequote/powergenerationdistribution/jaiprakashpowerventures/JHP01'],['https://www.moneycontrol.com/financials/jaiprakashpowerventures/balance-sheetVI/JHP01#JHP01','https://www.moneycontrol.com/financials/jaiprakashpowerventures/profit-lossVI/JHP01#JHP01','https://www.moneycontrol.com/financials/jaiprakashpowerventures/cash-flowVI/JHP01#JHP01','https://www.moneycontrol.com/financials/jaiprakashpowerventures/ratiosVI/JHP01#JHP01']],
  [["BFUTILITIE"],['https://www.moneycontrol.com/india/stockpricequote/powergenerationdistribution/bfutilities/BFU'],['https://www.moneycontrol.com/financials/bfutilities/balance-sheetVI/BFU#BFU','https://www.moneycontrol.com/financials/bfutilities/profit-lossVI/BFU#BFU','https://www.moneycontrol.com/financials/bfutilities/cash-flowVI/BFU#BFU','https://www.moneycontrol.com/financials/bfutilities/ratiosVI/BFU#BFU']]]

  # print(len(url_list))
  # print(len(url_list))

  for i in range(len(url_list)):
    list_input=[]
    for j in url_list[i]:
      list_input.append(j)
    stockname=list_input[0][0]
    url1=list_input[1][0]
    url2=list_input[2]
    print(stockname,url1,url2)
    final_list=energy(stockname,url1,url2)
    table.append(final_list)
  df=pd.DataFrame(table,columns=['stock_name','cap','roce_ind','points','per_renew','industry'])
  df.sort_values(by='points', ascending=False,inplace=True)
  stock=[]

  df_final=df[['stock_name','cap','roce_ind','per_renew','industry']]
    
  stock= df_final[:1].values.tolist()
    
  portfolio.append(stock) 

  def bank(stockname,url1,url2):


    stock_name=stockname
    url = url1

    # Make a GET request to fetch the raw HTML content
    html_content = requests.get(url).text

    # Parse HTML code for the entire site
    soup = BeautifulSoup(html_content, "lxml")
    # print(soup)

    mc = soup.find_all("div", attrs={"class": "oview_table"})
    # print("Number of tables on site: ",len(mc))

    data = dict()
    for tb in mc[:4]:
        body = tb.find_all("tr")
        for i in body:
            vals = i.find_all("td")
            title = vals[0].text.strip()
            try:
                value = float(vals[1].text.replace(',',''))
            except ValueError:
                value = vals[1].text.replace(',','')
            data[title] = value
    # print(data)



    excel_data=pd.read_csv(r"C:\Users\mohil\OneDrive\Desktop\STOCKS_new.csv")
    excel_data.drop(columns=['Name (largecap alpha.csv)', 'Ticker (largecap alpha.csv)'],inplace=True)
    # excel_data.head(10)

    avg_price=round((data['Open']+data['Previous Close'])/2,2)
    shareholding=round((data['Mkt Cap (Rs. Cr.)']/avg_price),2)
    shareholding

    parameters_dict = dict()
    def scrape_indicators(urls):
        for url in urls:
            html_content = requests.get(url).text

            # Parse HTML code for the entire site
            soup = BeautifulSoup(html_content, "lxml")
            stonks = soup.find_all("div", attrs={"id": "standalone-new"})

            body = stonks[0].find_all("tr")

            indicator_dict = dict()

            for record in body:
                indicator = record.find_all("td")[0].text.upper()
                temp_indicator_values = []
                try:
                    for table_data in (record.find_all('td')[1:-1]):
                        temp_indicator_values.append(
                            float(table_data.text.replace(',', '')))
                except ValueError:
                    continue
                indicator_dict[indicator] = temp_indicator_values

            parameters_dict.update(indicator_dict)

        yield(url, parameters_dict)
      
    urls=url2
    # urls = ["https://www.moneycontrol.com/financials/godfreyphillipsindia/balance-sheetVI/GPI#GPI","https://www.moneycontrol.com/financials/godfreyphillipsindia/profit-lossVI/GPI#GPI","https://www.moneycontrol.com/financials/godfreyphillipsindia/cash-flowVI/GPI#GPI","https://www.moneycontrol.com/financials/godfreyphillipsindia/ratiosVI/GPI#GPI"]


    for request_url, indicator_data in scrape_indicators(urls):
        # print(request_url)
        # print(indicator_data)
        print()
        print()

    pepoints=0


    if(data['Mkt Cap (Rs. Cr.)']<20000.00 and data['Mkt Cap (Rs. Cr.)']>5000.00):
      cap="Mid Cap"
    elif (data['Mkt Cap (Rs. Cr.)']>20000.00):
      cap="Large Cap"
    else:
      cap="Small Cap"
    ##Indicator 1: Reserves & Surplus
    # print(indicator_data['RESERVES AND SURPLUS'])
    rands_list=[]
    count_reserves=0
    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,0,-1):
      if(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i]>0):
        rands_list.append(round(((indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i])/indicator_data['RESERVES AND SURPLUS'][i])*100,2))
        # print(indicator_data['RESERVES AND SURPLUS'][i])
        count_reserves=count_reserves+20
        pepoints+=1
        # print(indicator_data['RESERVES AND SURPLUS'][i-1] , "-" , indicator_data['RESERVES AND SURPLUS'][i],"=", round(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i],2))
      else:
        rands_list.append(round(((indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i])/indicator_data['RESERVES AND SURPLUS'][i])*100,2))
        # print(indicator_data['RESERVES AND SURPLUS'][i])
        count_reserves=count_reserves-20
        pepoints-=1
        # print(indicator_data['RESERVES AND SURPLUS'][i-1],"-",indicator_data['RESERVES AND SURPLUS'][i],"=", round(indicator_data['RESERVES AND SURPLUS'][i-1]-indicator_data['RESERVES AND SURPLUS'][i],2))

    rands_list=rands_list[::-1]

    for i in range(len(indicator_data['RESERVES AND SURPLUS'])-1,-1,-1):
        if(indicator_data['RESERVES AND SURPLUS'][i]<0):
          count_reserves-=20
          pepoints-=1


    indicator_data['INTEREST EXPENDED']

    ##Indicator 2: Total Interest Earned
    # print(indicator_data['TOTAL INTEREST EARNED'])
    interest_list=[]
    count_interest=0
    for i in range(len(indicator_data['TOTAL INTEREST EARNED'])-1,0,-1):
      if(indicator_data['TOTAL INTEREST EARNED'][i-1]-indicator_data['TOTAL INTEREST EARNED'][i]>0):
        interest_list.append(round(((indicator_data['TOTAL INTEREST EARNED'][i-1]-indicator_data['TOTAL INTEREST EARNED'][i])/indicator_data['TOTAL INTEREST EARNED'][i])*100,2))
        # print(indicator_data['RESERVES AND SURPLUS'][i])
        count_interest=count_interest+20
        pepoints+=1
        # print(indicator_data['TOTAL INTEREST EARNED'][i-1] , "-" , indicator_data['TOTAL INTEREST EARNED'][i],"=", round(indicator_data['TOTAL INTEREST EARNED'][i-1]-indicator_data['TOTAL INTEREST EARNED'][i],2))
      else:
        interest_list.append(round(((indicator_data['TOTAL INTEREST EARNED'][i-1]-indicator_data['TOTAL INTEREST EARNED'][i])/indicator_data['TOTAL INTEREST EARNED'][i])*100,2))
        # print(indicator_data['RESERVES AND SURPLUS'][i])
        count_interest=count_interest-20
        pepoints-=1
        # print(indicator_data['TOTAL INTEREST EARNED'][i-1],"-",indicator_data['TOTAL INTEREST EARNED'][i],"=", round(indicator_data['TOTAL INTEREST EARNED'][i-1]-indicator_data['TOTAL INTEREST EARNED'][i],2))

    interest_list=interest_list[::-1]

    for i in range(len(indicator_data['TOTAL INTEREST EARNED'])-1,-1,-1):
        if(indicator_data['TOTAL INTEREST EARNED'][i]<0):
          count_interest-=20
          pepoints-=1


    ##Indicator 3: Total Interest Expended
    # print(indicator_data['INTEREST EXPENDED'])
    spend_list=[]
    count_spend=0
    for i in range(len(indicator_data['INTEREST EXPENDED'])-1,0,-1):
      if(indicator_data['INTEREST EXPENDED'][i-1]-indicator_data['INTEREST EXPENDED'][i]<0):
        spend_list.append(round(((indicator_data['INTEREST EXPENDED'][i-1]-indicator_data['INTEREST EXPENDED'][i])/indicator_data['INTEREST EXPENDED'][i])*100,2))
        # print(indicator_data['RESERVES AND SURPLUS'][i])
        count_spend=count_spend+20
        pepoints+=1
        # print(indicator_data['INTEREST EXPENDED'][i-1] , "-" , indicator_data['INTEREST EXPENDED'][i],"=", round(indicator_data['INTEREST EXPENDED'][i-1]-indicator_data['INTEREST EXPENDED'][i],2))
      else:
        spend_list.append(round(((indicator_data['INTEREST EXPENDED'][i-1]-indicator_data['INTEREST EXPENDED'][i])/indicator_data['INTEREST EXPENDED'][i])*100,2))
        # print(indicator_data['RESERVES AND SURPLUS'][i])
        count_spend=count_spend-20
        pepoints-=1
        # print(indicator_data['INTEREST EXPENDED'][i-1],"-",indicator_data['INTEREST EXPENDED'][i],"=", round(indicator_data['INTEREST EXPENDED'][i-1]-indicator_data['INTEREST EXPENDED'][i],2))

    spend_list=spend_list[::-1]

    for i in range(len(indicator_data['INTEREST EXPENDED'])-1,-1,-1):
        if(indicator_data['INTEREST EXPENDED'][i]<0):
          count_spend-=20
          pepoints-=1

    # print(count_spend)
    # print(spend_list)

    ##Indicator 4: Profit/Loss for the period
    count_profitloss=0
    profit_list=[]
    # print(indicator_data['TOTAL PROFIT / LOSS AVAILABLE FOR APPROPRIATIONS'])
    for i in range(len(indicator_data['TOTAL PROFIT / LOSS AVAILABLE FOR APPROPRIATIONS'])-1,0,-1):
      if(indicator_data['TOTAL PROFIT / LOSS AVAILABLE FOR APPROPRIATIONS'][i-1]-indicator_data['TOTAL PROFIT / LOSS AVAILABLE FOR APPROPRIATIONS'][i]>0):
        profit_list.append(round(((indicator_data['TOTAL PROFIT / LOSS AVAILABLE FOR APPROPRIATIONS'][i-1]-indicator_data['TOTAL PROFIT / LOSS AVAILABLE FOR APPROPRIATIONS'][i])/indicator_data['TOTAL PROFIT / LOSS AVAILABLE FOR APPROPRIATIONS'][i])*100,2))
        count_profitloss=count_profitloss+20
        # print(indicator_data['TOTAL PROFIT / LOSS AVAILABLE FOR APPROPRIATIONS'][i-1] , "-" , indicator_data['TOTAL PROFIT / LOSS AVAILABLE FOR APPROPRIATIONS'][i],"=", round(indicator_data['TOTAL PROFIT / LOSS AVAILABLE FOR APPROPRIATIONS'][i-1]-indicator_data['TOTAL PROFIT / LOSS AVAILABLE FOR APPROPRIATIONS'][i],2))
      else:
        profit_list.append(round(((indicator_data['TOTAL PROFIT / LOSS AVAILABLE FOR APPROPRIATIONS'][i-1]-indicator_data['TOTAL PROFIT / LOSS AVAILABLE FOR APPROPRIATIONS'][i])/indicator_data['TOTAL PROFIT / LOSS AVAILABLE FOR APPROPRIATIONS'][i])*100,2))
        count_profitloss=count_profitloss-20
        # print(indicator_data['TOTAL PROFIT / LOSS AVAILABLE FOR APPROPRIATIONS'][i-1],"-",indicator_data['TOTAL PROFIT / LOSS AVAILABLE FOR APPROPRIATIONS'][i],"=",round(indicator_data['TOTAL PROFIT / LOSS AVAILABLE FOR APPROPRIATIONS'][i-1]-indicator_data['TOTAL PROFIT / LOSS AVAILABLE FOR APPROPRIATIONS'][i],2))

    profit_list=profit_list[::-1]

    for i in range(len(indicator_data['TOTAL PROFIT / LOSS AVAILABLE FOR APPROPRIATIONS'])-1,-1,-1):
        if(indicator_data['TOTAL PROFIT / LOSS AVAILABLE FOR APPROPRIATIONS'][i]<0):
          count_profitloss-=15

    # print(count_profitloss)
    # print(profit_list)

    indicator_data['DEPOSITS']

    ##Indicator 5: Total Deposits
    # print(indicator_data['DEPOSITS'])
    dep_list=[]
    count_dep=0
    for i in range(len(indicator_data['DEPOSITS'])-1,0,-1):
      if(indicator_data['DEPOSITS'][i-1]-indicator_data['DEPOSITS'][i]>0):
        dep_list.append(round(((indicator_data['DEPOSITS'][i-1]-indicator_data['DEPOSITS'][i])/indicator_data['DEPOSITS'][i])*100,2))
        # print(indicator_data['RESERVES AND SURPLUS'][i])
        count_dep=count_dep+20
        pepoints+=1
        # print(indicator_data['DEPOSITS'][i-1] , "-" , indicator_data['DEPOSITS'][i],"=", round(indicator_data['DEPOSITS'][i-1]-indicator_data['DEPOSITS'][i],2))
      else:
        interest_list.append(round(((indicator_data['DEPOSITS'][i-1]-indicator_data['DEPOSITS'][i])/indicator_data['DEPOSITS'][i])*100,2))
        # print(indicator_data['RESERVES AND SURPLUS'][i])
        count_dep=count_dep-20
        pepoints-=1
        # print(indicator_data['DEPOSITS'][i-1],"-",indicator_data['DEPOSITS'][i],"=", round(indicator_data['DEPOSITS'][i-1]-indicator_data['DEPOSITS'][i],2))

    interest_list=interest_list[::-1]

    for i in range(len(indicator_data['DEPOSITS'])-1,-1,-1):
        if(indicator_data['DEPOSITS'][i]<0):
          count_interest-=20
          pepoints-=1

    # print(count_dep)
    # print(dep_list)

    ##Indicator 6: Total Advances
    # print(indicator_data['ADVANCES'])
    adv_list=[]
    count_adv=0
    for i in range(len(indicator_data['ADVANCES'])-1,0,-1):
      if(indicator_data['ADVANCES'][i-1]-indicator_data['ADVANCES'][i]>0):
        adv_list.append(round(((indicator_data['ADVANCES'][i-1]-indicator_data['ADVANCES'][i])/indicator_data['ADVANCES'][i])*100,2))
        # print(indicator_data['RESERVES AND SURPLUS'][i])
        count_adv=count_adv+20
        pepoints+=1
        # print(indicator_data['ADVANCES'][i-1] , "-" , indicator_data['ADVANCES'][i],"=", round(indicator_data['ADVANCES'][i-1]-indicator_data['ADVANCES'][i],2))
      else:
        adv_list.append(round(((indicator_data['ADVANCES'][i-1]-indicator_data['ADVANCES'][i])/indicator_data['ADVANCES'][i])*100,2))
        # print(indicator_data['RESERVES AND SURPLUS'][i])
        count_adv=count_adv-20
        pepoints-=1
        # print(indicator_data['ADVANCES'][i-1],"-",indicator_data['ADVANCES'][i],"=", round(indicator_data['ADVANCES'][i-1]-indicator_data['ADVANCES'][i],2))

    adv_list=adv_list[::-1]

    for i in range(len(indicator_data['ADVANCES'])-1,-1,-1):
        if(indicator_data['ADVANCES'][i]<0):
          count_adv-=20
          pepoints-=1

    # print(count_adv)
    # print(adv_list)

    indicator_data['PROVISIONS AND CONTINGENCIES']

    ##Indicator 7: Provisions and Contingencies
    # print(indicator_data['PROVISIONS AND CONTINGENCIES'])
    pro_list=[]
    count_pro=0
    for i in range(len(indicator_data['PROVISIONS AND CONTINGENCIES'])-1,0,-1):
      if(indicator_data['PROVISIONS AND CONTINGENCIES'][i-1]-indicator_data['PROVISIONS AND CONTINGENCIES'][i]<0):
        pro_list.append(round(((indicator_data['PROVISIONS AND CONTINGENCIES'][i-1]-indicator_data['PROVISIONS AND CONTINGENCIES'][i])/indicator_data['PROVISIONS AND CONTINGENCIES'][i])*100,2))
        # print(indicator_data['RESERVES AND SURPLUS'][i])
        count_pro=count_pro+20
        pepoints+=1
        # print(indicator_data['PROVISIONS AND CONTINGENCIES'][i-1] , "-" , indicator_data['PROVISIONS AND CONTINGENCIES'][i],"=", round(indicator_data['PROVISIONS AND CONTINGENCIES'][i-1]-indicator_data['PROVISIONS AND CONTINGENCIES'][i],2))
      else:
        pro_list.append(round(((indicator_data['PROVISIONS AND CONTINGENCIES'][i-1]-indicator_data['PROVISIONS AND CONTINGENCIES'][i])/indicator_data['PROVISIONS AND CONTINGENCIES'][i])*100,2))
        # print(indicator_data['RESERVES AND SURPLUS'][i])
        count_pro=count_pro-20
        pepoints-=1
        # print(indicator_data['PROVISIONS AND CONTINGENCIES'][i-1],"-",indicator_data['PROVISIONS AND CONTINGENCIES'][i],"=", round(indicator_data['PROVISIONS AND CONTINGENCIES'][i-1]-indicator_data['PROVISIONS AND CONTINGENCIES'][i],2))

    pro_list=pro_list[::-1]

    # for i in range(len(indicator_data['ADVANCES'])-1,-1,-1):
    #     if(indicator_data['ADVANCES'][i]<0):
    #       count_adv-=20
    #       pepoints-=1
    prov_ind=round((indicator_data['PROVISIONS AND CONTINGENCIES'][0]-indicator_data['PROVISIONS AND CONTINGENCIES'][4])/indicator_data['PROVISIONS AND CONTINGENCIES'][4],2)*100

   


    ##Indicator 8: NPA

    count_npa=0
    # print(indicator_data["NET NPA (%)"])

    for i in range(len(indicator_data['NET NPA (%)'])-1,0,-1):
      if(indicator_data['NET NPA (%)'][i-1]-indicator_data['NET NPA (%)'][i]<0):
        count_npa+=20
        pepoints+=1
        # print(indicator_data['NET NPA (%)'][i-1] , "-" , indicator_data['NET NPA (%)'][i],"=", round(indicator_data['NET NPA (%)'][i-1]-indicator_data['NET NPA (%)'][i],2))
      elif (indicator_data['NET NPA (%)'][i-1]-indicator_data['NET NPA (%)'][i]==0):
            count_npa+=20
            pepoints+=1
      else:
        count_npa-=10
        pepoints-=1
        # print(indicator_data['NET NPA (%)'][i-1],"-",indicator_data['NET NPA (%)'][i],"=",round(indicator_data['NET NPA (%)'][i-1]-indicator_data['NET NPA (%)'][i],2))
    # print(count_npa)

    ##Indicator 9: Gross NPA

    count_gnpa=0
    # print(indicator_data["GROSS NPA (%)"])

    for i in range(len(indicator_data['GROSS NPA (%)'])-1,0,-1):
      if(indicator_data['GROSS NPA (%)'][i-1]-indicator_data['GROSS NPA (%)'][i]<0):
        count_gnpa+=20
        pepoints+=1
        # print(indicator_data['GROSS NPA (%)'][i-1] , "-" , indicator_data['GROSS NPA (%)'][i],"=", round(indicator_data['GROSS NPA (%)'][i-1]-indicator_data['GROSS NPA (%)'][i],2))
      elif (indicator_data['GROSS NPA (%)'][i-1]-indicator_data['GROSS NPA (%)'][i]==0):
            count_gnpa+=20
            pepoints+=1
      else:
        count_gnpa-=10
        pepoints-=1
        # print(indicator_data['GROSS NPA (%)'][i-1],"-",indicator_data['GROSS NPA (%)'][i],"=",round(indicator_data['GROSS NPA (%)'][i-1]-indicator_data['GROSS NPA (%)'][i],2))
    # print(count_gnpa)

    ##Indicator 10: NPA to Advances

    count_adpa=0
    # print(indicator_data["NET NPA TO ADVANCES (%)"])

    for i in range(len(indicator_data['NET NPA TO ADVANCES (%)'])-1,0,-1):
      if(indicator_data['NET NPA TO ADVANCES (%)'][i-1]-indicator_data['NET NPA TO ADVANCES (%)'][i]<0):
        count_adpa+=20
        pepoints+=1
        # print(indicator_data['NET NPA TO ADVANCES (%)'][i-1] , "-" , indicator_data['NET NPA TO ADVANCES (%)'][i],"=", round(indicator_data['NET NPA TO ADVANCES (%)'][i-1]-indicator_data['NET NPA TO ADVANCES (%)'][i],2))
      elif (indicator_data['NET NPA TO ADVANCES (%)'][i-1]-indicator_data['NET NPA TO ADVANCES (%)'][i]==0):
            count_adpa+=20
            pepoints+=1
      else:
        count_adpa-=10
        pepoints-=1
        # print(indicator_data['NET NPA TO ADVANCES (%)'][i-1],"-",indicator_data['NET NPA TO ADVANCES (%)'][i],"=",round(indicator_data['NET NPA TO ADVANCES (%)'][i-1]-indicator_data['NET NPA TO ADVANCES (%)'][i],2))

    npa_ind=indicator_data['NET NPA TO ADVANCES (%)'][0]-indicator_data['NET NPA TO ADVANCES (%)'][4]


    # print(count_adpa)
    # print(npa_ind)

    indicator_data['CASA (%)']

    ##Indicator 11: CASA

    count_casa=0
    # print(indicator_data["CASA (%)"])

    for i in range(len(indicator_data['CASA (%)'])-1,0,-1):
      if(indicator_data['CASA (%)'][i-1]-indicator_data['CASA (%)'][i]>-0.5):
        count_casa+=20
        pepoints+=1
        # print(indicator_data['CASA (%)'][i-1] , "-" , indicator_data['CASA (%)'][i],"=", round(indicator_data['CASA (%)'][i-1]-indicator_data['CASA (%)'][i],2))
      elif (indicator_data['CASA (%)'][i-1]-indicator_data['CASA (%)'][i]==0):
            count_casa+=20
            pepoints+=1
      else:
        count_casa-=10
        pepoints-=1
        # print(indicator_data['CASA (%)'][i-1],"-",indicator_data['CASA (%)'][i],"=",round(indicator_data['CASA (%)'][i-1]-indicator_data['CASA (%)'][i],2))

    casa_ind=indicator_data['CASA (%)'][0]


    # print(count_casa)
    # print(casa_ind)



    ##Indicator 12: Free cash Flow
    stock_position=None
    stock_data=excel_data.values.tolist()
    stock_data
    for i in stock_data:
      for j in i:
        j=str(j)
        # print(j)
        if(stock_name in j):
          # print(j.index(i))
          stock_position=stock_data.index(i)
          # print(j)
          break
          
    # print(stock_position)

    freecash_list=[]
    for i in range(5):
      freecash_list.append(stock_data[stock_position][i])
    # print(freecash_list)

    count_freecash=0
    for i in range(1,len(freecash_list)):
      if(freecash_list[i]-freecash_list[i-1]>0):
        # print(freecash_list[i],"-",freecash_list[i-1],"=",freecash_list[i]-freecash_list[i-1])
        count_freecash+=20
        pepoints+=1
      else:
        # print(freecash_list[i],"-",freecash_list[i-1],"=",freecash_list[i]-freecash_list[i-1])
        count_freecash-=10
        pepoints-=1

    for i in range(0,len(freecash_list)):
      if(freecash_list[i]<0):
        count_freecash-=20
        pepoints-=1

    # print(count_freecash)

    ##Indicator 13: Pledged shares
    for i in stock_data:
      for j in i:
        j=str(j)
        if(stock_name in j):
          # print(j.index(i))
          stock_position=stock_data.index(i)
          # print(j)
          break

    pledged_shares=stock_data[stock_position][15]
    # print(pledged_shares)

    count_pshares=1
    if(pledged_shares>0):
      pepoints-=1
      count_pshares=count_pshares*-10
    else:
      count_pshares=count_pshares*10
      pepoints+=1

    ##Entities: Alpha & Beta
    alpha=round(stock_data[stock_position][9],2)
    # print("Alpha",alpha)
    beta=round(stock_data[stock_position][10],2)
    # print("Beta",beta)
    divy=data['Dividend Yield']
    # print("Dividend Yield",divy)

    cagr=stock_data[stock_position][8]
    # print("CAGR:", cagr)

    ##Indicator 14: PE Ratio
    st_pe=data['TTM PE']
    se_pe=data['Sector PE']
    # print("Stock PE", st_pe)
    # print("Sector PE",se_pe)
    count_pe=1
    if(data['TTM PE']=="--"):
        count_pe=pepoints*10
    elif(data['TTM PE']<data['Sector PE']):
      count_pe=pepoints*15
    else:
      count_pe=pepoints*10

    # print(count_pe)



    points=count_profitloss+count_reserves+count_pe+count_freecash+count_pshares+count_interest+count_adpa+count_adv+count_casa+count_dep+count_gnpa+count_npa+count_pro+count_spend+casa_ind*10
    # print(points)
    per_banks="10%"
    industry="Private & Public Banks"
    final_list=[]
    final_list.append(stock_name) #name of the stock
    final_list.append(cap)
    final_list.append(casa_ind)

    final_list.append(points)
    final_list.append(per_banks)
    final_list.append(industry)


    return final_list

  table=[]
  url_list=[]
       
  url_list=[[["HDFCBANK"],['https://www.moneycontrol.com/india/stockpricequote/banksprivatesector/hdfcbank/HDF01'],["https://www.moneycontrol.com/financials/hdfcbank/balance-sheetVI/HDF01#HDF01","https://www.moneycontrol.com/financials/hdfcbank/profit-lossVI/HDF01#HDF01","https://www.moneycontrol.com/financials/hdfcbank/results/quarterly-results/HDF01#HDF01","https://www.moneycontrol.com/financials/hdfcbank/cash-flowVI/HDF01#HDF01","https://www.moneycontrol.com/financials/hdfcbank/ratiosVI/HDF01#HDF01"]],
         [["ICICIBANK"],['https://www.moneycontrol.com/india/stockpricequote/banksprivatesector/icicibank/ICI02'],['https://www.moneycontrol.com/financials/icicibank/balance-sheetVI/ICI02#ICI02','https://www.moneycontrol.com/financials/icicibank/profit-lossVI/ICI02#ICI02','https://www.moneycontrol.com/financials/icicibank/results/quarterly-results/ICI02#ICI02','https://www.moneycontrol.com/financials/icicibank/cash-flowVI/ICI02#ICI02','https://www.moneycontrol.com/financials/icicibank/ratiosVI/ICI02#ICI02']],
         [['KOTAKBANK'],['https://www.moneycontrol.com/india/stockpricequote/banksprivatesector/kotakmahindrabank/KMB'],['https://www.moneycontrol.com/financials/kotakmahindrabank/ratiosVI/KMB#KMB','https://www.moneycontrol.com/financials/kotakmahindrabank/cash-flowVI/KMB#KMB','https://www.moneycontrol.com/financials/kotakmahindrabank/results/quarterly-results/KMB#KMB','https://www.moneycontrol.com/financials/kotakmahindrabank/profit-lossVI/KMB#KMB','https://www.moneycontrol.com/financials/kotakmahindrabank/balance-sheetVI/KMB#KMB']],
         [['SBIN'],['https://www.moneycontrol.com/india/stockpricequote/bankspublicsector/statebankindia/SBI'],['https://www.moneycontrol.com/financials/statebankindia/balance-sheetVI/SBI#SBI','https://www.moneycontrol.com/financials/statebankindia/profit-lossVI/SBI#SBI','https://www.moneycontrol.com/financials/statebankindia/results/quarterly-results/SBI#SBI','https://www.moneycontrol.com/financials/statebankindia/cash-flowVI/SBI#SBI','https://www.moneycontrol.com/financials/statebankindia/ratiosVI/SBI#SBI']],
         [['AXISBANK'],['https://www.moneycontrol.com/india/stockpricequote/banksprivatesector/axisbank/AB16'],['https://www.moneycontrol.com/financials/axisbank/balance-sheetVI/AB16#AB16','https://www.moneycontrol.com/financials/axisbank/profit-lossVI/AB16#AB16','https://www.moneycontrol.com/financials/axisbank/results/quarterly-results/AB16#AB16','https://www.moneycontrol.com/financials/axisbank/cash-flowVI/AB16#AB16','https://www.moneycontrol.com/financials/axisbank/ratiosVI/AB16#AB16']],
         [['INDUSINDBK'],['https://www.moneycontrol.com/india/stockpricequote/banksprivatesector/indusindbank/IIB'],['https://www.moneycontrol.com/financials/indusindbank/balance-sheetVI/IIB#IIB','https://www.moneycontrol.com/financials/indusindbank/profit-lossVI/IIB#IIB','https://www.moneycontrol.com/financials/indusindbank/results/quarterly-results/IIB#IIB','https://www.moneycontrol.com/financials/indusindbank/cash-flowVI/IIB#IIB','https://www.moneycontrol.com/financials/indusindbank/ratiosVI/IIB#IIB']],
         [['BANDHANBNK'],['https://www.moneycontrol.com/india/stockpricequote/banksprivatesector/bandhanbank/BB09'],['https://www.moneycontrol.com/financials/bandhanbank/balance-sheetVI/BB09#BB09','https://www.moneycontrol.com/financials/bandhanbank/profit-lossVI/BB09#BB09','https://www.moneycontrol.com/financials/bandhanbank/results/quarterly-results/BB09#BB09','https://www.moneycontrol.com/financials/bandhanbank/cash-flowVI/BB09#BB09','https://www.moneycontrol.com/financials/bandhanbank/ratiosVI/BB09#BB09']],

         [['YESBANK'],['https://www.moneycontrol.com/india/stockpricequote/banksprivatesector/yesbank/YB'],['https://www.moneycontrol.com/financials/yesbank/balance-sheetVI/YB#YB','https://www.moneycontrol.com/financials/yesbank/profit-lossVI/YB#YB','https://www.moneycontrol.com/financials/yesbank/results/quarterly-results/YB#YB','https://www.moneycontrol.com/financials/yesbank/cash-flowVI/YB#YB','https://www.moneycontrol.com/financials/yesbank/ratiosVI/YB#YB']]]
      
          

          
# print(len(url_list))
# print(len(url_list))

  for i in range(len(url_list)):
    list_input=[]
    for j in url_list[i]:
      list_input.append(j)
    stockname=list_input[0][0]
    url1=list_input[1][0]
    url2=list_input[2]
    # print(stockname,url1,url2)
    final_list=bank(stockname,url1,url2)
    table.append(final_list)
    # print(table)

  df=pd.DataFrame(table,columns=['stock_name','cap','casa_ind','points','per_banks','industry'])
  df.sort_values(by='points', ascending=False,inplace=True)
  stock=[]

  df_final=df[['stock_name','cap','casa_ind','per_banks','industry']]
    
  stock= df_final[:1].values.tolist()
    
  portfolio.append(stock) 
  with open("buy_right_stock.txt","w") as fmcgdata:
    stock_json=json.dumps(portfolio)
    fmcgdata.write(stock_json)
  return portfolio


import datetime
from datetime import datetime


def function_buyright():
  currentDay = datetime.now().day
  currentMonth = datetime.now().month

  if(currentMonth in [11,2,5,8] and currentDay==20):
    result=buyright()
    return result
  else:
    try:
      data_file = open("buy_right_stock.txt","r")
      list_stock = data_file.read()
      list_stock = json.loads(list_stock)

    except FileNotFoundError:
      
      list_stock = buyright()
    return list_stock

